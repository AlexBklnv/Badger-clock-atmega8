
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001fb1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c1  00800060  00800060  00001f9e  2**0
                  ALLOC
  3 .eeprom       00000013  00810000  00810000  00001f9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001fb1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fe4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000190  00000000  00000000  00002020  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002593  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000949  00000000  00000000  00004743  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c75  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000594  00000000  00000000  00006d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d4c  00000000  00000000  00007298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017cb  00000000  00000000  00007fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  000097af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2e c0       	rjmp	.+92     	; 0x5e <__ctors_end>
       2:	3d c0       	rjmp	.+122    	; 0x7e <__bad_interrupt>
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
       8:	3a c0       	rjmp	.+116    	; 0x7e <__bad_interrupt>
       a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	3e c0       	rjmp	.+124    	; 0x90 <__vector_9>
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
      20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
      22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
      24:	2c c0       	rjmp	.+88     	; 0x7e <__bad_interrupt>
      26:	07 c5       	rjmp	.+2574   	; 0xa36 <_Z10tubeAsModev+0x7c>
      28:	e0 c4       	rjmp	.+2496   	; 0x9ea <_Z10tubeAsModev+0x30>
      2a:	f1 c4       	rjmp	.+2530   	; 0xa0e <_Z10tubeAsModev+0x54>
      2c:	e4 c4       	rjmp	.+2504   	; 0x9f6 <_Z10tubeAsModev+0x3c>
      2e:	e9 c4       	rjmp	.+2514   	; 0xa02 <_Z10tubeAsModev+0x48>
      30:	fc c4       	rjmp	.+2552   	; 0xa2a <_Z10tubeAsModev+0x70>
      32:	06 c5       	rjmp	.+2572   	; 0xa40 <_Z10tubeAsModev+0x86>
      34:	f4 c4       	rjmp	.+2536   	; 0xa1e <_Z10tubeAsModev+0x64>
      36:	e3 c7       	rjmp	.+4038   	; 0xffe <_Z20firstButtonLongPressv+0x28>
      38:	fa c7       	rjmp	.+4084   	; 0x102e <_Z20firstButtonLongPressv+0x58>
      3a:	53 c8       	rjmp	.-3930   	; 0xfffff0e2 <__eeprom_end+0xff7ef0cf>
      3c:	60 c8       	rjmp	.-3904   	; 0xfffff0fe <__eeprom_end+0xff7ef0eb>
      3e:	69 c8       	rjmp	.-3886   	; 0xfffff112 <__eeprom_end+0xff7ef0ff>
      40:	0e c8       	rjmp	.-4068   	; 0xfffff05e <__eeprom_end+0xff7ef04b>
      42:	23 c8       	rjmp	.-4026   	; 0xfffff08a <__eeprom_end+0xff7ef077>
      44:	38 c8       	rjmp	.-3984   	; 0xfffff0b6 <__eeprom_end+0xff7ef0a3>
      46:	6f c8       	rjmp	.-3874   	; 0xfffff126 <__eeprom_end+0xff7ef113>
      48:	7a c8       	rjmp	.-3852   	; 0xfffff13e <__eeprom_end+0xff7ef12b>
      4a:	81 c8       	rjmp	.-3838   	; 0xfffff14e <__eeprom_end+0xff7ef13b>
      4c:	a7 c8       	rjmp	.-3762   	; 0xfffff19c <__eeprom_end+0xff7ef189>
      4e:	ae c8       	rjmp	.-3748   	; 0xfffff1ac <__eeprom_end+0xff7ef199>
      50:	b5 c8       	rjmp	.-3734   	; 0xfffff1bc <__eeprom_end+0xff7ef1a9>
      52:	bc c8       	rjmp	.-3720   	; 0xfffff1cc <__eeprom_end+0xff7ef1b9>
      54:	c9 c8       	rjmp	.-3694   	; 0xfffff1e8 <__eeprom_end+0xff7ef1d5>
      56:	c8 c8       	rjmp	.-3696   	; 0xfffff1e8 <__eeprom_end+0xff7ef1d5>
      58:	82 c8       	rjmp	.-3836   	; 0xfffff15e <__eeprom_end+0xff7ef14b>
      5a:	8e c8       	rjmp	.-3812   	; 0xfffff178 <__eeprom_end+0xff7ef165>
      5c:	96 c8       	rjmp	.-3796   	; 0xfffff18a <__eeprom_end+0xff7ef177>

0000005e <__ctors_end>:
      5e:	11 24       	eor	r1, r1
      60:	1f be       	out	0x3f, r1	; 63
      62:	cf e5       	ldi	r28, 0x5F	; 95
      64:	d4 e0       	ldi	r29, 0x04	; 4
      66:	de bf       	out	0x3e, r29	; 62
      68:	cd bf       	out	0x3d, r28	; 61

0000006a <__do_clear_bss>:
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	a0 e6       	ldi	r26, 0x60	; 96
      6e:	b0 e0       	ldi	r27, 0x00	; 0
      70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
      72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
      74:	a1 32       	cpi	r26, 0x21	; 33
      76:	b2 07       	cpc	r27, r18
      78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
      7a:	bb dc       	rcall	.-1674   	; 0xfffff9f2 <__eeprom_end+0xff7ef9df>
      7c:	44 cf       	rjmp	.-376    	; 0xffffff06 <__eeprom_end+0xff7efef3>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <_Z10initMillisv>:
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
}
      80:	83 b7       	in	r24, 0x33	; 51
      82:	82 60       	ori	r24, 0x02	; 2
      84:	83 bf       	out	0x33, r24	; 51
      86:	89 b7       	in	r24, 0x39	; 57
      88:	81 60       	ori	r24, 0x01	; 1
      8a:	89 bf       	out	0x39, r24	; 57
      8c:	78 94       	sei
      8e:	08 95       	ret

00000090 <__vector_9>:
      90:	1f 92       	push	r1
      92:	0f 92       	push	r0
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	0f 92       	push	r0
      98:	11 24       	eor	r1, r1
      9a:	2f 93       	push	r18
      9c:	3f 93       	push	r19
      9e:	4f 93       	push	r20
      a0:	5f 93       	push	r21
      a2:	6f 93       	push	r22
      a4:	7f 93       	push	r23
      a6:	8f 93       	push	r24
      a8:	9f 93       	push	r25
      aa:	af 93       	push	r26
      ac:	ef 93       	push	r30
      ae:	ff 93       	push	r31
      b0:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <_1000us>
      b4:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <_1000us+0x1>
      b8:	f3 95       	inc	r31
      ba:	f0 93 18 01 	sts	0x0118, r31	; 0x800118 <_1000us+0x1>
      be:	e0 93 17 01 	sts	0x0117, r30	; 0x800117 <_1000us>
      c2:	e8 3e       	cpi	r30, 0xE8	; 232
      c4:	83 e0       	ldi	r24, 0x03	; 3
      c6:	f8 07       	cpc	r31, r24
      c8:	60 f1       	brcs	.+88     	; 0x122 <__vector_9+0x92>
      ca:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <_millis>
      ce:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <_millis+0x1>
      d2:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <_millis+0x2>
      d6:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <_millis+0x3>
      da:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <_millis+0x4>
      de:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <_millis+0x5>
      e2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_millis+0x6>
      e6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <_millis+0x7>
      ea:	a1 e0       	ldi	r26, 0x01	; 1
      ec:	b5 de       	rcall	.-662    	; 0xfffffe58 <__eeprom_end+0xff7efe45>
      ee:	e8 5e       	subi	r30, 0xE8	; 232
      f0:	f3 40       	sbci	r31, 0x03	; 3
      f2:	e8 3e       	cpi	r30, 0xE8	; 232
      f4:	a3 e0       	ldi	r26, 0x03	; 3
      f6:	fa 07       	cpc	r31, r26
      f8:	c0 f7       	brcc	.-16     	; 0xea <__vector_9+0x5a>
      fa:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <_millis>
      fe:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <_millis+0x1>
     102:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <_millis+0x2>
     106:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <_millis+0x3>
     10a:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <_millis+0x4>
     10e:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <_millis+0x5>
     112:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_millis+0x6>
     116:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_millis+0x7>
     11a:	f0 93 18 01 	sts	0x0118, r31	; 0x800118 <_1000us+0x1>
     11e:	e0 93 17 01 	sts	0x0117, r30	; 0x800117 <_1000us>
     122:	ff 91       	pop	r31
     124:	ef 91       	pop	r30
     126:	af 91       	pop	r26
     128:	9f 91       	pop	r25
     12a:	8f 91       	pop	r24
     12c:	7f 91       	pop	r23
     12e:	6f 91       	pop	r22
     130:	5f 91       	pop	r21
     132:	4f 91       	pop	r20
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	0f 90       	pop	r0
     13a:	0f be       	out	0x3f, r0	; 63
     13c:	0f 90       	pop	r0
     13e:	1f 90       	pop	r1
     140:	18 95       	reti

00000142 <_Z6millisv>:
     142:	f8 94       	cli
     144:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <_millis>
     148:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <_millis+0x1>
     14c:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <_millis+0x2>
     150:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <_millis+0x3>
     154:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <_millis+0x4>
     158:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <_millis+0x5>
     15c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_millis+0x6>
     160:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <_millis+0x7>
     164:	78 94       	sei
     166:	08 95       	ret

00000168 <_Z15translitDecoderc>:
     168:	e4 ea       	ldi	r30, 0xA4	; 164
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	12 8a       	std	Z+18, r1	; 0x12
     16e:	13 8a       	std	Z+19, r1	; 0x13
     170:	14 8a       	std	Z+20, r1	; 0x14
     172:	15 8a       	std	Z+21, r1	; 0x15
     174:	88 23       	and	r24, r24
     176:	39 f0       	breq	.+14     	; 0x186 <_Z15translitDecoderc+0x1e>
     178:	ea eb       	ldi	r30, 0xBA	; 186
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	98 2f       	mov	r25, r24
     17e:	91 70       	andi	r25, 0x01	; 1
     180:	92 93       	st	-Z, r25
     182:	86 95       	lsr	r24
     184:	d9 f7       	brne	.-10     	; 0x17c <_Z15translitDecoderc+0x14>
     186:	08 95       	ret

00000188 <_Z10tubeSwitchv>:
     188:	5f 92       	push	r5
     18a:	6f 92       	push	r6
     18c:	7f 92       	push	r7
     18e:	8f 92       	push	r8
     190:	9f 92       	push	r9
     192:	af 92       	push	r10
     194:	bf 92       	push	r11
     196:	cf 92       	push	r12
     198:	df 92       	push	r13
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <bright>
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	59 f0       	breq	.+22     	; 0x1c4 <_Z10tubeSwitchv+0x3c>
     1ae:	28 f0       	brcs	.+10     	; 0x1ba <_Z10tubeSwitchv+0x32>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	79 f0       	breq	.+30     	; 0x1d2 <_Z10tubeSwitchv+0x4a>
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	a1 f0       	breq	.+40     	; 0x1e0 <_Z10tubeSwitchv+0x58>
     1b8:	1a c0       	rjmp	.+52     	; 0x1ee <_Z10tubeSwitchv+0x66>
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	8a 95       	dec	r24
     1be:	f1 f7       	brne	.-4      	; 0x1bc <_Z10tubeSwitchv+0x34>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <_Z10tubeSwitchv+0x3a>
     1c2:	7e c0       	rjmp	.+252    	; 0x2c0 <_Z10tubeSwitchv+0x138>
     1c4:	e3 e1       	ldi	r30, 0x13	; 19
     1c6:	f2 e0       	ldi	r31, 0x02	; 2
     1c8:	31 97       	sbiw	r30, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <_Z10tubeSwitchv+0x40>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_Z10tubeSwitchv+0x46>
     1ce:	00 00       	nop
     1d0:	77 c0       	rjmp	.+238    	; 0x2c0 <_Z10tubeSwitchv+0x138>
     1d2:	89 e2       	ldi	r24, 0x29	; 41
     1d4:	94 e0       	ldi	r25, 0x04	; 4
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <_Z10tubeSwitchv+0x4e>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <_Z10tubeSwitchv+0x54>
     1dc:	00 00       	nop
     1de:	70 c0       	rjmp	.+224    	; 0x2c0 <_Z10tubeSwitchv+0x138>
     1e0:	ef e3       	ldi	r30, 0x3F	; 63
     1e2:	f6 e0       	ldi	r31, 0x06	; 6
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_Z10tubeSwitchv+0x5c>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_Z10tubeSwitchv+0x62>
     1ea:	00 00       	nop
     1ec:	69 c0       	rjmp	.+210    	; 0x2c0 <_Z10tubeSwitchv+0x138>
     1ee:	a8 9a       	sbi	0x15, 0	; 21
     1f0:	a9 9a       	sbi	0x15, 1	; 21
     1f2:	aa 9a       	sbi	0x15, 2	; 21
     1f4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     1f8:	88 23       	and	r24, r24
     1fa:	09 f4       	brne	.+2      	; 0x1fe <_Z10tubeSwitchv+0x76>
     1fc:	4a c0       	rjmp	.+148    	; 0x292 <_Z10tubeSwitchv+0x10a>
     1fe:	c4 ea       	ldi	r28, 0xA4	; 164
     200:	d0 e0       	ldi	r29, 0x00	; 0
     202:	0f 2e       	mov	r0, r31
     204:	fa ea       	ldi	r31, 0xAA	; 170
     206:	6f 2e       	mov	r6, r31
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	7f 2e       	mov	r7, r31
     20c:	f0 2d       	mov	r31, r0
     20e:	4e 01       	movw	r8, r28
     210:	55 24       	eor	r5, r5
     212:	53 94       	inc	r5
     214:	89 91       	ld	r24, Y+
     216:	88 23       	and	r24, r24
     218:	c1 f1       	breq	.+112    	; 0x28a <_Z10tubeSwitchv+0x102>
     21a:	93 df       	rcall	.-218    	; 0x142 <_Z6millisv>
     21c:	f4 01       	movw	r30, r8
     21e:	a4 8c       	ldd	r10, Z+28	; 0x1c
     220:	b5 8c       	ldd	r11, Z+29	; 0x1d
     222:	c6 8c       	ldd	r12, Z+30	; 0x1e
     224:	d7 8c       	ldd	r13, Z+31	; 0x1f
     226:	e0 a0       	ldd	r14, Z+32	; 0x20
     228:	f1 a0       	ldd	r15, Z+33	; 0x21
     22a:	02 a1       	ldd	r16, Z+34	; 0x22
     22c:	13 a1       	ldd	r17, Z+35	; 0x23
     22e:	20 de       	rcall	.-960    	; 0xfffffe70 <__eeprom_end+0xff7efe5d>
     230:	25 39       	cpi	r18, 0x95	; 149
     232:	31 05       	cpc	r19, r1
     234:	41 05       	cpc	r20, r1
     236:	51 05       	cpc	r21, r1
     238:	61 05       	cpc	r22, r1
     23a:	71 05       	cpc	r23, r1
     23c:	81 05       	cpc	r24, r1
     23e:	91 05       	cpc	r25, r1
     240:	11 f1       	breq	.+68     	; 0x286 <_Z10tubeSwitchv+0xfe>
     242:	08 f1       	brcs	.+66     	; 0x286 <_Z10tubeSwitchv+0xfe>
     244:	5d 82       	std	Y+5, r5	; 0x05
     246:	7d df       	rcall	.-262    	; 0x142 <_Z6millisv>
     248:	f4 01       	movw	r30, r8
     24a:	a4 8c       	ldd	r10, Z+28	; 0x1c
     24c:	b5 8c       	ldd	r11, Z+29	; 0x1d
     24e:	c6 8c       	ldd	r12, Z+30	; 0x1e
     250:	d7 8c       	ldd	r13, Z+31	; 0x1f
     252:	e0 a0       	ldd	r14, Z+32	; 0x20
     254:	f1 a0       	ldd	r15, Z+33	; 0x21
     256:	02 a1       	ldd	r16, Z+34	; 0x22
     258:	13 a1       	ldd	r17, Z+35	; 0x23
     25a:	0a de       	rcall	.-1004   	; 0xfffffe70 <__eeprom_end+0xff7efe5d>
     25c:	25 32       	cpi	r18, 0x25	; 37
     25e:	32 40       	sbci	r19, 0x02	; 2
     260:	41 05       	cpc	r20, r1
     262:	51 05       	cpc	r21, r1
     264:	61 05       	cpc	r22, r1
     266:	71 05       	cpc	r23, r1
     268:	81 05       	cpc	r24, r1
     26a:	91 05       	cpc	r25, r1
     26c:	79 f0       	breq	.+30     	; 0x28c <_Z10tubeSwitchv+0x104>
     26e:	70 f0       	brcs	.+28     	; 0x28c <_Z10tubeSwitchv+0x104>
     270:	68 df       	rcall	.-304    	; 0x142 <_Z6millisv>
     272:	f4 01       	movw	r30, r8
     274:	24 8f       	std	Z+28, r18	; 0x1c
     276:	35 8f       	std	Z+29, r19	; 0x1d
     278:	46 8f       	std	Z+30, r20	; 0x1e
     27a:	57 8f       	std	Z+31, r21	; 0x1f
     27c:	60 a3       	std	Z+32, r22	; 0x20
     27e:	71 a3       	std	Z+33, r23	; 0x21
     280:	82 a3       	std	Z+34, r24	; 0x22
     282:	93 a3       	std	Z+35, r25	; 0x23
     284:	03 c0       	rjmp	.+6      	; 0x28c <_Z10tubeSwitchv+0x104>
     286:	1d 82       	std	Y+5, r1	; 0x05
     288:	01 c0       	rjmp	.+2      	; 0x28c <_Z10tubeSwitchv+0x104>
     28a:	1d 82       	std	Y+5, r1	; 0x05
     28c:	c6 15       	cp	r28, r6
     28e:	d7 05       	cpc	r29, r7
     290:	09 f6       	brne	.-126    	; 0x214 <_Z10tubeSwitchv+0x8c>
     292:	8f e3       	ldi	r24, 0x3F	; 63
     294:	96 e0       	ldi	r25, 0x06	; 6
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <_Z10tubeSwitchv+0x10e>
     29a:	00 c0       	rjmp	.+0      	; 0x29c <_Z10tubeSwitchv+0x114>
     29c:	00 00       	nop
     29e:	c7 9a       	sbi	0x18, 7	; 24
     2a0:	93 9a       	sbi	0x12, 3	; 18
     2a2:	92 9a       	sbi	0x12, 2	; 18
     2a4:	c6 9a       	sbi	0x18, 6	; 24
     2a6:	96 9a       	sbi	0x12, 6	; 18
     2a8:	97 9a       	sbi	0x12, 7	; 18
     2aa:	c0 9a       	sbi	0x18, 0	; 24
     2ac:	c1 9a       	sbi	0x18, 1	; 24
     2ae:	ab 98       	cbi	0x15, 3	; 21
     2b0:	94 98       	cbi	0x12, 4	; 18
     2b2:	ef e1       	ldi	r30, 0x1F	; 31
     2b4:	f3 e0       	ldi	r31, 0x03	; 3
     2b6:	31 97       	sbiw	r30, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <_Z10tubeSwitchv+0x12e>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <_Z10tubeSwitchv+0x134>
     2bc:	00 00       	nop
     2be:	08 c0       	rjmp	.+16     	; 0x2d0 <_Z10tubeSwitchv+0x148>
     2c0:	a8 9a       	sbi	0x15, 0	; 21
     2c2:	a9 9a       	sbi	0x15, 1	; 21
     2c4:	aa 9a       	sbi	0x15, 2	; 21
     2c6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     2ca:	81 11       	cpse	r24, r1
     2cc:	98 cf       	rjmp	.-208    	; 0x1fe <_Z10tubeSwitchv+0x76>
     2ce:	e1 cf       	rjmp	.-62     	; 0x292 <_Z10tubeSwitchv+0x10a>
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	ff 90       	pop	r15
     2da:	ef 90       	pop	r14
     2dc:	df 90       	pop	r13
     2de:	cf 90       	pop	r12
     2e0:	bf 90       	pop	r11
     2e2:	af 90       	pop	r10
     2e4:	9f 90       	pop	r9
     2e6:	8f 90       	pop	r8
     2e8:	7f 90       	pop	r7
     2ea:	6f 90       	pop	r6
     2ec:	5f 90       	pop	r5
     2ee:	08 95       	ret

000002f0 <_Z13calcTimeStamphhh>:
     2f0:	2f 92       	push	r2
     2f2:	3f 92       	push	r3
     2f4:	4f 92       	push	r4
     2f6:	5f 92       	push	r5
     2f8:	6f 92       	push	r6
     2fa:	7f 92       	push	r7
     2fc:	8f 92       	push	r8
     2fe:	9f 92       	push	r9
     300:	af 92       	push	r10
     302:	bf 92       	push	r11
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	67 97       	sbiw	r28, 0x17	; 23
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
     324:	d1 2c       	mov	r13, r1
     326:	e1 2c       	mov	r14, r1
     328:	f1 2c       	mov	r15, r1
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	10 e0       	ldi	r17, 0x00	; 0
     32e:	98 01       	movw	r18, r16
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	da 82       	std	Y+2, r13	; 0x02
     334:	eb 82       	std	Y+3, r14	; 0x03
     336:	fc 82       	std	Y+4, r15	; 0x04
     338:	0d 83       	std	Y+5, r16	; 0x05
     33a:	1e 83       	std	Y+6, r17	; 0x06
     33c:	2f 83       	std	Y+7, r18	; 0x07
     33e:	38 87       	std	Y+8, r19	; 0x08
     340:	62 30       	cpi	r22, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_Z13calcTimeStamphhh+0x56>
     344:	a8 c0       	rjmp	.+336    	; 0x496 <__stack+0x37>
     346:	a6 2f       	mov	r26, r22
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	a2 30       	cpi	r26, 0x02	; 2
     34e:	b1 05       	cpc	r27, r1
     350:	0c f4       	brge	.+2      	; 0x354 <_Z13calcTimeStamphhh+0x64>
     352:	a1 c0       	rjmp	.+322    	; 0x496 <__stack+0x37>
     354:	43 70       	andi	r20, 0x03	; 3
     356:	41 f4       	brne	.+16     	; 0x368 <_Z13calcTimeStamphhh+0x78>
     358:	ed e1       	ldi	r30, 0x1D	; 29
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	08 c0       	rjmp	.+16     	; 0x378 <_Z13calcTimeStamphhh+0x88>
     368:	ec e1       	ldi	r30, 0x1C	; 28
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	ee 87       	std	Y+14, r30	; 0x0e
     37a:	7f 87       	std	Y+15, r23	; 0x0f
     37c:	58 8b       	std	Y+16, r21	; 0x10
     37e:	49 8b       	std	Y+17, r20	; 0x11
     380:	3a 8b       	std	Y+18, r19	; 0x12
     382:	2b 8b       	std	Y+19, r18	; 0x13
     384:	9c 8b       	std	Y+20, r25	; 0x14
     386:	8d 8b       	std	Y+21, r24	; 0x15
     388:	86 2f       	mov	r24, r22
     38a:	81 70       	andi	r24, 0x01	; 1
     38c:	60 ff       	sbrs	r22, 0
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <_Z13calcTimeStamphhh+0xb2>
     390:	9f e1       	ldi	r25, 0x1F	; 31
     392:	61 2c       	mov	r6, r1
     394:	71 2c       	mov	r7, r1
     396:	81 2c       	mov	r8, r1
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	1e 8a       	std	Y+22, r1	; 0x16
     39c:	1f 8a       	std	Y+23, r1	; 0x17
     39e:	91 2c       	mov	r9, r1
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <_Z13calcTimeStamphhh+0xc2>
     3a2:	9e e1       	ldi	r25, 0x1E	; 30
     3a4:	61 2c       	mov	r6, r1
     3a6:	71 2c       	mov	r7, r1
     3a8:	81 2c       	mov	r8, r1
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	1e 8a       	std	Y+22, r1	; 0x16
     3ae:	1f 8a       	std	Y+23, r1	; 0x17
     3b0:	91 2c       	mov	r9, r1
     3b2:	59 2e       	mov	r5, r25
     3b4:	81 11       	cpse	r24, r1
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <_Z13calcTimeStamphhh+0xd8>
     3b8:	5f e1       	ldi	r21, 0x1F	; 31
     3ba:	31 2c       	mov	r3, r1
     3bc:	21 2c       	mov	r2, r1
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <_Z13calcTimeStamphhh+0xe8>
     3c8:	5e e1       	ldi	r21, 0x1E	; 30
     3ca:	31 2c       	mov	r3, r1
     3cc:	21 2c       	mov	r2, r1
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	45 2e       	mov	r4, r21
     3da:	49 87       	std	Y+9, r20	; 0x09
     3dc:	3a 87       	std	Y+10, r19	; 0x0a
     3de:	2b 87       	std	Y+11, r18	; 0x0b
     3e0:	9c 87       	std	Y+12, r25	; 0x0c
     3e2:	8d 87       	std	Y+13, r24	; 0x0d
     3e4:	e1 e0       	ldi	r30, 0x01	; 1
     3e6:	e2 30       	cpi	r30, 0x02	; 2
     3e8:	d1 f4       	brne	.+52     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3ea:	2e 85       	ldd	r18, Y+14	; 0x0e
     3ec:	3f 85       	ldd	r19, Y+15	; 0x0f
     3ee:	48 89       	ldd	r20, Y+16	; 0x10
     3f0:	59 89       	ldd	r21, Y+17	; 0x11
     3f2:	6a 89       	ldd	r22, Y+18	; 0x12
     3f4:	7b 89       	ldd	r23, Y+19	; 0x13
     3f6:	8c 89       	ldd	r24, Y+20	; 0x14
     3f8:	9d 89       	ldd	r25, Y+21	; 0x15
     3fa:	a9 80       	ldd	r10, Y+1	; 0x01
     3fc:	ba 80       	ldd	r11, Y+2	; 0x02
     3fe:	cb 80       	ldd	r12, Y+3	; 0x03
     400:	dc 80       	ldd	r13, Y+4	; 0x04
     402:	ed 80       	ldd	r14, Y+5	; 0x05
     404:	fe 80       	ldd	r15, Y+6	; 0x06
     406:	0f 81       	ldd	r16, Y+7	; 0x07
     408:	18 85       	ldd	r17, Y+8	; 0x08
     40a:	1d dd       	rcall	.-1478   	; 0xfffffe46 <__eeprom_end+0xff7efe33>
     40c:	29 83       	std	Y+1, r18	; 0x01
     40e:	3a 83       	std	Y+2, r19	; 0x02
     410:	4b 83       	std	Y+3, r20	; 0x03
     412:	5c 83       	std	Y+4, r21	; 0x04
     414:	6d 83       	std	Y+5, r22	; 0x05
     416:	7e 83       	std	Y+6, r23	; 0x06
     418:	8f 83       	std	Y+7, r24	; 0x07
     41a:	98 87       	std	Y+8, r25	; 0x08
     41c:	35 c0       	rjmp	.+106    	; 0x488 <__stack+0x29>
     41e:	e8 30       	cpi	r30, 0x08	; 8
     420:	d0 f4       	brcc	.+52     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     422:	25 2d       	mov	r18, r5
     424:	36 2d       	mov	r19, r6
     426:	47 2d       	mov	r20, r7
     428:	58 2d       	mov	r21, r8
     42a:	6f 2f       	mov	r22, r31
     42c:	7e 89       	ldd	r23, Y+22	; 0x16
     42e:	8f 89       	ldd	r24, Y+23	; 0x17
     430:	99 2d       	mov	r25, r9
     432:	a9 80       	ldd	r10, Y+1	; 0x01
     434:	ba 80       	ldd	r11, Y+2	; 0x02
     436:	cb 80       	ldd	r12, Y+3	; 0x03
     438:	dc 80       	ldd	r13, Y+4	; 0x04
     43a:	ed 80       	ldd	r14, Y+5	; 0x05
     43c:	fe 80       	ldd	r15, Y+6	; 0x06
     43e:	0f 81       	ldd	r16, Y+7	; 0x07
     440:	18 85       	ldd	r17, Y+8	; 0x08
     442:	01 dd       	rcall	.-1534   	; 0xfffffe46 <__eeprom_end+0xff7efe33>
     444:	29 83       	std	Y+1, r18	; 0x01
     446:	3a 83       	std	Y+2, r19	; 0x02
     448:	4b 83       	std	Y+3, r20	; 0x03
     44a:	5c 83       	std	Y+4, r21	; 0x04
     44c:	6d 83       	std	Y+5, r22	; 0x05
     44e:	7e 83       	std	Y+6, r23	; 0x06
     450:	8f 83       	std	Y+7, r24	; 0x07
     452:	98 87       	std	Y+8, r25	; 0x08
     454:	19 c0       	rjmp	.+50     	; 0x488 <__stack+0x29>
     456:	24 2d       	mov	r18, r4
     458:	33 2d       	mov	r19, r3
     45a:	42 2d       	mov	r20, r2
     45c:	59 85       	ldd	r21, Y+9	; 0x09
     45e:	6a 85       	ldd	r22, Y+10	; 0x0a
     460:	7b 85       	ldd	r23, Y+11	; 0x0b
     462:	8c 85       	ldd	r24, Y+12	; 0x0c
     464:	9d 85       	ldd	r25, Y+13	; 0x0d
     466:	a9 80       	ldd	r10, Y+1	; 0x01
     468:	ba 80       	ldd	r11, Y+2	; 0x02
     46a:	cb 80       	ldd	r12, Y+3	; 0x03
     46c:	dc 80       	ldd	r13, Y+4	; 0x04
     46e:	ed 80       	ldd	r14, Y+5	; 0x05
     470:	fe 80       	ldd	r15, Y+6	; 0x06
     472:	0f 81       	ldd	r16, Y+7	; 0x07
     474:	18 85       	ldd	r17, Y+8	; 0x08
     476:	e7 dc       	rcall	.-1586   	; 0xfffffe46 <__eeprom_end+0xff7efe33>
     478:	29 83       	std	Y+1, r18	; 0x01
     47a:	3a 83       	std	Y+2, r19	; 0x02
     47c:	4b 83       	std	Y+3, r20	; 0x03
     47e:	5c 83       	std	Y+4, r21	; 0x04
     480:	6d 83       	std	Y+5, r22	; 0x05
     482:	7e 83       	std	Y+6, r23	; 0x06
     484:	8f 83       	std	Y+7, r24	; 0x07
     486:	98 87       	std	Y+8, r25	; 0x08
     488:	ef 5f       	subi	r30, 0xFF	; 255
     48a:	8e 2f       	mov	r24, r30
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	8a 17       	cp	r24, r26
     490:	9b 07       	cpc	r25, r27
     492:	0c f4       	brge	.+2      	; 0x496 <__stack+0x37>
     494:	a8 cf       	rjmp	.-176    	; 0x3e6 <_Z13calcTimeStamphhh+0xf6>
     496:	29 81       	ldd	r18, Y+1	; 0x01
     498:	3a 81       	ldd	r19, Y+2	; 0x02
     49a:	4b 81       	ldd	r20, Y+3	; 0x03
     49c:	5c 81       	ldd	r21, Y+4	; 0x04
     49e:	6d 81       	ldd	r22, Y+5	; 0x05
     4a0:	7e 81       	ldd	r23, Y+6	; 0x06
     4a2:	8f 81       	ldd	r24, Y+7	; 0x07
     4a4:	98 85       	ldd	r25, Y+8	; 0x08
     4a6:	67 96       	adiw	r28, 0x17	; 23
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	bf 90       	pop	r11
     4c4:	af 90       	pop	r10
     4c6:	9f 90       	pop	r9
     4c8:	8f 90       	pop	r8
     4ca:	7f 90       	pop	r7
     4cc:	6f 90       	pop	r6
     4ce:	5f 90       	pop	r5
     4d0:	4f 90       	pop	r4
     4d2:	3f 90       	pop	r3
     4d4:	2f 90       	pop	r2
     4d6:	08 95       	ret

000004d8 <_Z21resetCorrectionParamsv>:
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	00 e1       	ldi	r16, 0x10	; 16
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	f8 01       	movw	r30, r16
     4e8:	45 81       	ldd	r20, Z+5	; 0x05
     4ea:	c6 e8       	ldi	r28, 0x86	; 134
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
     4ee:	4b 83       	std	Y+3, r20	; 0x03
     4f0:	f3 80       	ldd	r15, Z+3	; 0x03
     4f2:	64 81       	ldd	r22, Z+4	; 0x04
     4f4:	8f 2d       	mov	r24, r15
     4f6:	fc de       	rcall	.-520    	; 0x2f0 <_Z13calcTimeStamphhh>
     4f8:	2c 83       	std	Y+4, r18	; 0x04
     4fa:	3d 83       	std	Y+5, r19	; 0x05
     4fc:	4e 83       	std	Y+6, r20	; 0x06
     4fe:	5f 83       	std	Y+7, r21	; 0x07
     500:	68 87       	std	Y+8, r22	; 0x08
     502:	79 87       	std	Y+9, r23	; 0x09
     504:	8a 87       	std	Y+10, r24	; 0x0a
     506:	9b 87       	std	Y+11, r25	; 0x0b
     508:	6f 2d       	mov	r22, r15
     50a:	8c e0       	ldi	r24, 0x0C	; 12
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	ea dc       	rcall	.-1580   	; 0xfffffee4 <__eeprom_end+0xff7efed1>
     510:	f8 01       	movw	r30, r16
     512:	64 81       	ldd	r22, Z+4	; 0x04
     514:	8b e0       	ldi	r24, 0x0B	; 11
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	e5 dc       	rcall	.-1590   	; 0xfffffee4 <__eeprom_end+0xff7efed1>
     51a:	6b 81       	ldd	r22, Y+3	; 0x03
     51c:	8a e0       	ldi	r24, 0x0A	; 10
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	e1 dc       	rcall	.-1598   	; 0xfffffee4 <__eeprom_end+0xff7efed1>
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	08 95       	ret

0000052e <_Z12setNightModev>:
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <nightMode>
     534:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <bright>
     538:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
     53c:	81 11       	cpse	r24, r1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <_Z12setNightModev+0x14>
     540:	c2 98       	cbi	0x18, 2	; 24
     542:	08 95       	ret

00000544 <_Z12resetButtonsv>:
     544:	ea ec       	ldi	r30, 0xCA	; 202
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	10 82       	st	Z, r1
     54a:	12 82       	std	Z+2, r1	; 0x02
     54c:	11 82       	std	Z+1, r1	; 0x01
     54e:	15 82       	std	Z+5, r1	; 0x05
     550:	16 82       	std	Z+6, r1	; 0x06
     552:	17 82       	std	Z+7, r1	; 0x07
     554:	10 86       	std	Z+8, r1	; 0x08
     556:	11 86       	std	Z+9, r1	; 0x09
     558:	12 86       	std	Z+10, r1	; 0x0a
     55a:	13 86       	std	Z+11, r1	; 0x0b
     55c:	14 86       	std	Z+12, r1	; 0x0c
     55e:	15 86       	std	Z+13, r1	; 0x0d
     560:	16 86       	std	Z+14, r1	; 0x0e
     562:	17 86       	std	Z+15, r1	; 0x0f
     564:	10 8a       	std	Z+16, r1	; 0x10
     566:	11 8a       	std	Z+17, r1	; 0x11
     568:	12 8a       	std	Z+18, r1	; 0x12
     56a:	13 8a       	std	Z+19, r1	; 0x13
     56c:	14 8a       	std	Z+20, r1	; 0x14
     56e:	08 95       	ret

00000570 <_Z6getADCh>:
     570:	97 b1       	in	r25, 0x07	; 7
     572:	90 7e       	andi	r25, 0xE0	; 224
     574:	8f 71       	andi	r24, 0x1F	; 31
     576:	89 2b       	or	r24, r25
     578:	87 b9       	out	0x07, r24	; 7
     57a:	36 9a       	sbi	0x06, 6	; 6
     57c:	36 99       	sbic	0x06, 6	; 6
     57e:	fe cf       	rjmp	.-4      	; 0x57c <_Z6getADCh+0xc>
     580:	84 b1       	in	r24, 0x04	; 4
     582:	95 b1       	in	r25, 0x05	; 5
     584:	08 95       	ret

00000586 <_Z14checkNightModev>:
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <nightMode+0x2>
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	e9 f4       	brne	.+58     	; 0x5dc <_Z14checkNightModev+0x56>
     5a2:	e2 e9       	ldi	r30, 0x92	; 146
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	86 81       	ldd	r24, Z+6	; 0x06
     5a8:	97 81       	ldd	r25, Z+7	; 0x07
     5aa:	89 13       	cpse	r24, r25
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <_Z14checkNightModev+0x2c>
     5ae:	bf df       	rcall	.-130    	; 0x52e <_Z12setNightModev>
     5b0:	6c c0       	rjmp	.+216    	; 0x68a <_Z14checkNightModev+0x104>
     5b2:	98 17       	cp	r25, r24
     5b4:	48 f4       	brcc	.+18     	; 0x5c8 <_Z14checkNightModev+0x42>
     5b6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <dateTime+0x2>
     5ba:	92 17       	cp	r25, r18
     5bc:	18 f4       	brcc	.+6      	; 0x5c4 <_Z14checkNightModev+0x3e>
     5be:	82 17       	cp	r24, r18
     5c0:	08 f0       	brcs	.+2      	; 0x5c4 <_Z14checkNightModev+0x3e>
     5c2:	5e c0       	rjmp	.+188    	; 0x680 <_Z14checkNightModev+0xfa>
     5c4:	b4 df       	rcall	.-152    	; 0x52e <_Z12setNightModev>
     5c6:	61 c0       	rjmp	.+194    	; 0x68a <_Z14checkNightModev+0x104>
     5c8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <dateTime+0x2>
     5cc:	28 17       	cp	r18, r24
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <_Z14checkNightModev+0x4c>
     5d0:	57 c0       	rjmp	.+174    	; 0x680 <_Z14checkNightModev+0xfa>
     5d2:	29 17       	cp	r18, r25
     5d4:	08 f0       	brcs	.+2      	; 0x5d8 <_Z14checkNightModev+0x52>
     5d6:	54 c0       	rjmp	.+168    	; 0x680 <_Z14checkNightModev+0xfa>
     5d8:	aa df       	rcall	.-172    	; 0x52e <_Z12setNightModev>
     5da:	57 c0       	rjmp	.+174    	; 0x68a <_Z14checkNightModev+0x104>
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	29 f5       	brne	.+74     	; 0x62a <_Z14checkNightModev+0xa4>
     5e0:	87 e0       	ldi	r24, 0x07	; 7
     5e2:	c6 df       	rcall	.-116    	; 0x570 <_Z6getADCh>
     5e4:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <nightMode+0x3>
     5e8:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <nightMode+0x4>
     5ec:	82 17       	cp	r24, r18
     5ee:	93 07       	cpc	r25, r19
     5f0:	04 f1       	brlt	.+64     	; 0x632 <_Z14checkNightModev+0xac>
     5f2:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <nightMode+0x1>
     5f6:	88 23       	and	r24, r24
     5f8:	e1 f0       	breq	.+56     	; 0x632 <_Z14checkNightModev+0xac>
     5fa:	a3 dd       	rcall	.-1210   	; 0x142 <_Z6millisv>
     5fc:	e2 e9       	ldi	r30, 0x92	; 146
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	a2 84       	ldd	r10, Z+10	; 0x0a
     602:	b3 84       	ldd	r11, Z+11	; 0x0b
     604:	c4 84       	ldd	r12, Z+12	; 0x0c
     606:	d5 84       	ldd	r13, Z+13	; 0x0d
     608:	e6 84       	ldd	r14, Z+14	; 0x0e
     60a:	f7 84       	ldd	r15, Z+15	; 0x0f
     60c:	00 89       	ldd	r16, Z+16	; 0x10
     60e:	11 89       	ldd	r17, Z+17	; 0x11
     610:	2f dc       	rcall	.-1954   	; 0xfffffe70 <__eeprom_end+0xff7efe5d>
     612:	27 38       	cpi	r18, 0x87	; 135
     614:	33 41       	sbci	r19, 0x13	; 19
     616:	41 05       	cpc	r20, r1
     618:	51 05       	cpc	r21, r1
     61a:	61 05       	cpc	r22, r1
     61c:	71 05       	cpc	r23, r1
     61e:	81 05       	cpc	r24, r1
     620:	91 05       	cpc	r25, r1
     622:	19 f0       	breq	.+6      	; 0x62a <_Z14checkNightModev+0xa4>
     624:	10 f0       	brcs	.+4      	; 0x62a <_Z14checkNightModev+0xa4>
     626:	83 df       	rcall	.-250    	; 0x52e <_Z12setNightModev>
     628:	30 c0       	rjmp	.+96     	; 0x68a <_Z14checkNightModev+0x104>
     62a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <nightMode+0x1>
     62e:	81 11       	cpse	r24, r1
     630:	0d c0       	rjmp	.+26     	; 0x64c <_Z14checkNightModev+0xc6>
     632:	c2 e9       	ldi	r28, 0x92	; 146
     634:	d0 e0       	ldi	r29, 0x00	; 0
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	83 dd       	rcall	.-1274   	; 0x142 <_Z6millisv>
     63c:	2a 87       	std	Y+10, r18	; 0x0a
     63e:	3b 87       	std	Y+11, r19	; 0x0b
     640:	4c 87       	std	Y+12, r20	; 0x0c
     642:	5d 87       	std	Y+13, r21	; 0x0d
     644:	6e 87       	std	Y+14, r22	; 0x0e
     646:	7f 87       	std	Y+15, r23	; 0x0f
     648:	88 8b       	std	Y+16, r24	; 0x10
     64a:	99 8b       	std	Y+17, r25	; 0x11
     64c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <nightMode+0x2>
     650:	88 23       	and	r24, r24
     652:	d9 f0       	breq	.+54     	; 0x68a <_Z14checkNightModev+0x104>
     654:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <nightMode>
     658:	88 23       	and	r24, r24
     65a:	b9 f0       	breq	.+46     	; 0x68a <_Z14checkNightModev+0x104>
     65c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <nightMode>
     660:	e8 ec       	ldi	r30, 0xC8	; 200
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	81 81       	ldd	r24, Z+1	; 0x01
     666:	80 83       	st	Z, r24
     668:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
     66c:	81 11       	cpse	r24, r1
     66e:	0d c0       	rjmp	.+26     	; 0x68a <_Z14checkNightModev+0x104>
     670:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <isLedActive>
     674:	88 23       	and	r24, r24
     676:	11 f0       	breq	.+4      	; 0x67c <_Z14checkNightModev+0xf6>
     678:	c2 9a       	sbi	0x18, 2	; 24
     67a:	07 c0       	rjmp	.+14     	; 0x68a <_Z14checkNightModev+0x104>
     67c:	c2 98       	cbi	0x18, 2	; 24
     67e:	05 c0       	rjmp	.+10     	; 0x68a <_Z14checkNightModev+0x104>
     680:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <nightMode+0x1>
     684:	81 11       	cpse	r24, r1
     686:	e6 cf       	rjmp	.-52     	; 0x654 <_Z14checkNightModev+0xce>
     688:	d4 cf       	rjmp	.-88     	; 0x632 <_Z14checkNightModev+0xac>
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	df 90       	pop	r13
     698:	cf 90       	pop	r12
     69a:	bf 90       	pop	r11
     69c:	af 90       	pop	r10
     69e:	08 95       	ret

000006a0 <_Z14getMaxMonthDayv>:
     6a0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dateTime+0x4>
     6a4:	82 30       	cpi	r24, 0x02	; 2
     6a6:	31 f4       	brne	.+12     	; 0x6b4 <_Z14getMaxMonthDayv+0x14>
     6a8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <dateTime+0x5>
     6ac:	83 70       	andi	r24, 0x03	; 3
     6ae:	61 f0       	breq	.+24     	; 0x6c8 <_Z14getMaxMonthDayv+0x28>
     6b0:	8c e1       	ldi	r24, 0x1C	; 28
     6b2:	08 95       	ret
     6b4:	88 30       	cpi	r24, 0x08	; 8
     6b6:	20 f4       	brcc	.+8      	; 0x6c0 <_Z14getMaxMonthDayv+0x20>
     6b8:	80 ff       	sbrs	r24, 0
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <_Z14getMaxMonthDayv+0x2c>
     6bc:	8f e1       	ldi	r24, 0x1F	; 31
     6be:	08 95       	ret
     6c0:	80 fd       	sbrc	r24, 0
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <_Z14getMaxMonthDayv+0x30>
     6c4:	8f e1       	ldi	r24, 0x1F	; 31
     6c6:	08 95       	ret
     6c8:	8d e1       	ldi	r24, 0x1D	; 29
     6ca:	08 95       	ret
     6cc:	8e e1       	ldi	r24, 0x1E	; 30
     6ce:	08 95       	ret
     6d0:	8e e1       	ldi	r24, 0x1E	; 30
     6d2:	08 95       	ret

000006d4 <_Z15assignEditDigitv>:
     6d4:	cf 93       	push	r28
     6d6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     6da:	9f ef       	ldi	r25, 0xFF	; 255
     6dc:	98 0f       	add	r25, r24
     6de:	93 30       	cpi	r25, 0x03	; 3
     6e0:	18 f4       	brcc	.+6      	; 0x6e8 <_Z15assignEditDigitv+0x14>
     6e2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <tubeMode>
     6e6:	39 c0       	rjmp	.+114    	; 0x75a <_Z15assignEditDigitv+0x86>
     6e8:	9c ef       	ldi	r25, 0xFC	; 252
     6ea:	98 0f       	add	r25, r24
     6ec:	93 30       	cpi	r25, 0x03	; 3
     6ee:	20 f4       	brcc	.+8      	; 0x6f8 <_Z15assignEditDigitv+0x24>
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <tubeMode>
     6f6:	31 c0       	rjmp	.+98     	; 0x75a <_Z15assignEditDigitv+0x86>
     6f8:	99 ef       	ldi	r25, 0xF9	; 249
     6fa:	98 0f       	add	r25, r24
     6fc:	93 30       	cpi	r25, 0x03	; 3
     6fe:	20 f4       	brcc	.+8      	; 0x708 <_Z15assignEditDigitv+0x34>
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <tubeMode>
     706:	29 c0       	rjmp	.+82     	; 0x75a <_Z15assignEditDigitv+0x86>
     708:	96 ef       	ldi	r25, 0xF6	; 246
     70a:	98 0f       	add	r25, r24
     70c:	93 30       	cpi	r25, 0x03	; 3
     70e:	20 f4       	brcc	.+8      	; 0x718 <_Z15assignEditDigitv+0x44>
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <tubeMode>
     716:	21 c0       	rjmp	.+66     	; 0x75a <_Z15assignEditDigitv+0x86>
     718:	93 ef       	ldi	r25, 0xF3	; 243
     71a:	98 0f       	add	r25, r24
     71c:	93 30       	cpi	r25, 0x03	; 3
     71e:	20 f4       	brcc	.+8      	; 0x728 <_Z15assignEditDigitv+0x54>
     720:	94 e0       	ldi	r25, 0x04	; 4
     722:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <tubeMode>
     726:	19 c0       	rjmp	.+50     	; 0x75a <_Z15assignEditDigitv+0x86>
     728:	80 31       	cpi	r24, 0x10	; 16
     72a:	81 f4       	brne	.+32     	; 0x74c <_Z15assignEditDigitv+0x78>
     72c:	85 e0       	ldi	r24, 0x05	; 5
     72e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <tubeMode>
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <rank>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <editValue>
     73e:	46 e0       	ldi	r20, 0x06	; 6
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	84 e0       	ldi	r24, 0x04	; 4
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	24 e0       	ldi	r18, 0x04	; 4
     748:	c3 e0       	ldi	r28, 0x03	; 3
     74a:	1f c0       	rjmp	.+62     	; 0x78a <_Z15assignEditDigitv+0xb6>
     74c:	9d ee       	ldi	r25, 0xED	; 237
     74e:	98 0f       	add	r25, r24
     750:	93 30       	cpi	r25, 0x03	; 3
     752:	18 f4       	brcc	.+6      	; 0x75a <_Z15assignEditDigitv+0x86>
     754:	96 e0       	ldi	r25, 0x06	; 6
     756:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <tubeMode>
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	02 96       	adiw	r24, 0x02	; 2
     75e:	63 e0       	ldi	r22, 0x03	; 3
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	52 db       	rcall	.-2396   	; 0xfffffe08 <__eeprom_end+0xff7efdf5>
     764:	c3 e0       	ldi	r28, 0x03	; 3
     766:	c8 1b       	sub	r28, r24
     768:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <rank>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <editValue>
     772:	4c 2f       	mov	r20, r28
     774:	44 0f       	add	r20, r20
     776:	2e ef       	ldi	r18, 0xFE	; 254
     778:	24 0f       	add	r18, r20
     77a:	82 2f       	mov	r24, r18
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	04 2e       	mov	r0, r20
     780:	00 0c       	add	r0, r0
     782:	55 0b       	sbc	r21, r21
     784:	84 17       	cp	r24, r20
     786:	95 07       	cpc	r25, r21
     788:	5c f4       	brge	.+22     	; 0x7a0 <_Z15assignEditDigitv+0xcc>
     78a:	31 e0       	ldi	r19, 0x01	; 1
     78c:	fc 01       	movw	r30, r24
     78e:	ec 55       	subi	r30, 0x5C	; 92
     790:	ff 4f       	sbci	r31, 0xFF	; 255
     792:	30 83       	st	Z, r19
     794:	2f 5f       	subi	r18, 0xFF	; 255
     796:	82 2f       	mov	r24, r18
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	84 17       	cp	r24, r20
     79c:	95 07       	cpc	r25, r21
     79e:	b4 f3       	brlt	.-20     	; 0x78c <_Z15assignEditDigitv+0xb8>
     7a0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <tubeMode>
     7a4:	81 11       	cpse	r24, r1
     7a6:	20 c0       	rjmp	.+64     	; 0x7e8 <_Z15assignEditDigitv+0x114>
     7a8:	c2 30       	cpi	r28, 0x02	; 2
     7aa:	71 f0       	breq	.+28     	; 0x7c8 <_Z15assignEditDigitv+0xf4>
     7ac:	c3 30       	cpi	r28, 0x03	; 3
     7ae:	a9 f0       	breq	.+42     	; 0x7da <_Z15assignEditDigitv+0x106>
     7b0:	c1 30       	cpi	r28, 0x01	; 1
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <_Z15assignEditDigitv+0xe2>
     7b4:	de c0       	rjmp	.+444    	; 0x972 <_Z15assignEditDigitv+0x29e>
     7b6:	e2 e8       	ldi	r30, 0x82	; 130
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <dateTime+0x2>
     7be:	81 83       	std	Z+1, r24	; 0x01
     7c0:	87 e1       	ldi	r24, 0x17	; 23
     7c2:	82 83       	std	Z+2, r24	; 0x02
     7c4:	13 82       	std	Z+3, r1	; 0x03
     7c6:	d5 c0       	rjmp	.+426    	; 0x972 <_Z15assignEditDigitv+0x29e>
     7c8:	e2 e8       	ldi	r30, 0x82	; 130
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dateTime+0x1>
     7d0:	81 83       	std	Z+1, r24	; 0x01
     7d2:	8b e3       	ldi	r24, 0x3B	; 59
     7d4:	82 83       	std	Z+2, r24	; 0x02
     7d6:	13 82       	std	Z+3, r1	; 0x03
     7d8:	cc c0       	rjmp	.+408    	; 0x972 <_Z15assignEditDigitv+0x29e>
     7da:	e2 e8       	ldi	r30, 0x82	; 130
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dateTime>
     7e2:	81 83       	std	Z+1, r24	; 0x01
     7e4:	10 82       	st	Z, r1
     7e6:	c5 c0       	rjmp	.+394    	; 0x972 <_Z15assignEditDigitv+0x29e>
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	31 f5       	brne	.+76     	; 0x838 <_Z15assignEditDigitv+0x164>
     7ec:	59 df       	rcall	.-334    	; 0x6a0 <_Z14getMaxMonthDayv>
     7ee:	c2 30       	cpi	r28, 0x02	; 2
     7f0:	81 f0       	breq	.+32     	; 0x812 <_Z15assignEditDigitv+0x13e>
     7f2:	c3 30       	cpi	r28, 0x03	; 3
     7f4:	c1 f0       	breq	.+48     	; 0x826 <_Z15assignEditDigitv+0x152>
     7f6:	c1 30       	cpi	r28, 0x01	; 1
     7f8:	09 f0       	breq	.+2      	; 0x7fc <_Z15assignEditDigitv+0x128>
     7fa:	bb c0       	rjmp	.+374    	; 0x972 <_Z15assignEditDigitv+0x29e>
     7fc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <dateTime+0x3>
     800:	89 17       	cp	r24, r25
     802:	08 f4       	brcc	.+2      	; 0x806 <_Z15assignEditDigitv+0x132>
     804:	98 2f       	mov	r25, r24
     806:	e2 e8       	ldi	r30, 0x82	; 130
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	91 83       	std	Z+1, r25	; 0x01
     80c:	82 83       	std	Z+2, r24	; 0x02
     80e:	13 82       	std	Z+3, r1	; 0x03
     810:	b0 c0       	rjmp	.+352    	; 0x972 <_Z15assignEditDigitv+0x29e>
     812:	e2 e8       	ldi	r30, 0x82	; 130
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dateTime+0x4>
     81a:	81 83       	std	Z+1, r24	; 0x01
     81c:	8c e0       	ldi	r24, 0x0C	; 12
     81e:	82 83       	std	Z+2, r24	; 0x02
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	83 83       	std	Z+3, r24	; 0x03
     824:	a6 c0       	rjmp	.+332    	; 0x972 <_Z15assignEditDigitv+0x29e>
     826:	e2 e8       	ldi	r30, 0x82	; 130
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <dateTime+0x5>
     82e:	81 83       	std	Z+1, r24	; 0x01
     830:	83 e6       	ldi	r24, 0x63	; 99
     832:	82 83       	std	Z+2, r24	; 0x02
     834:	13 82       	std	Z+3, r1	; 0x03
     836:	9d c0       	rjmp	.+314    	; 0x972 <_Z15assignEditDigitv+0x29e>
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	21 f5       	brne	.+72     	; 0x884 <_Z15assignEditDigitv+0x1b0>
     83c:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <alarm>
     840:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <tube+0x10>
     844:	c2 30       	cpi	r28, 0x02	; 2
     846:	71 f0       	breq	.+28     	; 0x864 <_Z15assignEditDigitv+0x190>
     848:	c3 30       	cpi	r28, 0x03	; 3
     84a:	a9 f0       	breq	.+42     	; 0x876 <_Z15assignEditDigitv+0x1a2>
     84c:	c1 30       	cpi	r28, 0x01	; 1
     84e:	09 f0       	breq	.+2      	; 0x852 <_Z15assignEditDigitv+0x17e>
     850:	90 c0       	rjmp	.+288    	; 0x972 <_Z15assignEditDigitv+0x29e>
     852:	e2 e8       	ldi	r30, 0x82	; 130
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <alarm+0x3>
     85a:	81 83       	std	Z+1, r24	; 0x01
     85c:	87 e1       	ldi	r24, 0x17	; 23
     85e:	82 83       	std	Z+2, r24	; 0x02
     860:	13 82       	std	Z+3, r1	; 0x03
     862:	87 c0       	rjmp	.+270    	; 0x972 <_Z15assignEditDigitv+0x29e>
     864:	e2 e8       	ldi	r30, 0x82	; 130
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <alarm+0x4>
     86c:	81 83       	std	Z+1, r24	; 0x01
     86e:	8b e3       	ldi	r24, 0x3B	; 59
     870:	82 83       	std	Z+2, r24	; 0x02
     872:	13 82       	std	Z+3, r1	; 0x03
     874:	7e c0       	rjmp	.+252    	; 0x972 <_Z15assignEditDigitv+0x29e>
     876:	e2 e8       	ldi	r30, 0x82	; 130
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	81 83       	std	Z+1, r24	; 0x01
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	82 83       	std	Z+2, r24	; 0x02
     880:	13 82       	std	Z+3, r1	; 0x03
     882:	77 c0       	rjmp	.+238    	; 0x972 <_Z15assignEditDigitv+0x29e>
     884:	86 30       	cpi	r24, 0x06	; 6
     886:	11 f5       	brne	.+68     	; 0x8cc <_Z15assignEditDigitv+0x1f8>
     888:	c2 30       	cpi	r28, 0x02	; 2
     88a:	71 f0       	breq	.+28     	; 0x8a8 <_Z15assignEditDigitv+0x1d4>
     88c:	c3 30       	cpi	r28, 0x03	; 3
     88e:	a9 f0       	breq	.+42     	; 0x8ba <_Z15assignEditDigitv+0x1e6>
     890:	c1 30       	cpi	r28, 0x01	; 1
     892:	09 f0       	breq	.+2      	; 0x896 <_Z15assignEditDigitv+0x1c2>
     894:	6e c0       	rjmp	.+220    	; 0x972 <_Z15assignEditDigitv+0x29e>
     896:	e2 e8       	ldi	r30, 0x82	; 130
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <correction+0x2>
     89e:	81 83       	std	Z+1, r24	; 0x01
     8a0:	83 e6       	ldi	r24, 0x63	; 99
     8a2:	82 83       	std	Z+2, r24	; 0x02
     8a4:	13 82       	std	Z+3, r1	; 0x03
     8a6:	65 c0       	rjmp	.+202    	; 0x972 <_Z15assignEditDigitv+0x29e>
     8a8:	e2 e8       	ldi	r30, 0x82	; 130
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <correction+0x1>
     8b0:	81 83       	std	Z+1, r24	; 0x01
     8b2:	83 e6       	ldi	r24, 0x63	; 99
     8b4:	82 83       	std	Z+2, r24	; 0x02
     8b6:	13 82       	std	Z+3, r1	; 0x03
     8b8:	5c c0       	rjmp	.+184    	; 0x972 <_Z15assignEditDigitv+0x29e>
     8ba:	e2 e8       	ldi	r30, 0x82	; 130
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <correction>
     8c2:	81 83       	std	Z+1, r24	; 0x01
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	82 83       	std	Z+2, r24	; 0x02
     8c8:	13 82       	std	Z+3, r1	; 0x03
     8ca:	53 c0       	rjmp	.+166    	; 0x972 <_Z15assignEditDigitv+0x29e>
     8cc:	84 30       	cpi	r24, 0x04	; 4
     8ce:	11 f5       	brne	.+68     	; 0x914 <_Z15assignEditDigitv+0x240>
     8d0:	c2 30       	cpi	r28, 0x02	; 2
     8d2:	71 f0       	breq	.+28     	; 0x8f0 <_Z15assignEditDigitv+0x21c>
     8d4:	c3 30       	cpi	r28, 0x03	; 3
     8d6:	a9 f0       	breq	.+42     	; 0x902 <_Z15assignEditDigitv+0x22e>
     8d8:	c1 30       	cpi	r28, 0x01	; 1
     8da:	09 f0       	breq	.+2      	; 0x8de <_Z15assignEditDigitv+0x20a>
     8dc:	4a c0       	rjmp	.+148    	; 0x972 <_Z15assignEditDigitv+0x29e>
     8de:	e2 e8       	ldi	r30, 0x82	; 130
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <nightMode+0x6>
     8e6:	81 83       	std	Z+1, r24	; 0x01
     8e8:	87 e1       	ldi	r24, 0x17	; 23
     8ea:	82 83       	std	Z+2, r24	; 0x02
     8ec:	13 82       	std	Z+3, r1	; 0x03
     8ee:	41 c0       	rjmp	.+130    	; 0x972 <_Z15assignEditDigitv+0x29e>
     8f0:	e2 e8       	ldi	r30, 0x82	; 130
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <nightMode+0x7>
     8f8:	81 83       	std	Z+1, r24	; 0x01
     8fa:	87 e1       	ldi	r24, 0x17	; 23
     8fc:	82 83       	std	Z+2, r24	; 0x02
     8fe:	13 82       	std	Z+3, r1	; 0x03
     900:	38 c0       	rjmp	.+112    	; 0x972 <_Z15assignEditDigitv+0x29e>
     902:	e2 e8       	ldi	r30, 0x82	; 130
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <nightMode+0x2>
     90a:	81 83       	std	Z+1, r24	; 0x01
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	82 83       	std	Z+2, r24	; 0x02
     910:	13 82       	std	Z+3, r1	; 0x03
     912:	2f c0       	rjmp	.+94     	; 0x972 <_Z15assignEditDigitv+0x29e>
     914:	83 30       	cpi	r24, 0x03	; 3
     916:	19 f5       	brne	.+70     	; 0x95e <_Z15assignEditDigitv+0x28a>
     918:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <showDate+0x1>
     91c:	c2 30       	cpi	r28, 0x02	; 2
     91e:	79 f0       	breq	.+30     	; 0x93e <_Z15assignEditDigitv+0x26a>
     920:	c3 30       	cpi	r28, 0x03	; 3
     922:	a1 f0       	breq	.+40     	; 0x94c <_Z15assignEditDigitv+0x278>
     924:	c1 30       	cpi	r28, 0x01	; 1
     926:	29 f5       	brne	.+74     	; 0x972 <_Z15assignEditDigitv+0x29e>
     928:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <showDate>
     92c:	89 17       	cp	r24, r25
     92e:	08 f4       	brcc	.+2      	; 0x932 <_Z15assignEditDigitv+0x25e>
     930:	98 2f       	mov	r25, r24
     932:	e2 e8       	ldi	r30, 0x82	; 130
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	91 83       	std	Z+1, r25	; 0x01
     938:	82 83       	std	Z+2, r24	; 0x02
     93a:	13 82       	std	Z+3, r1	; 0x03
     93c:	1a c0       	rjmp	.+52     	; 0x972 <_Z15assignEditDigitv+0x29e>
     93e:	e2 e8       	ldi	r30, 0x82	; 130
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	81 83       	std	Z+1, r24	; 0x01
     944:	8b e3       	ldi	r24, 0x3B	; 59
     946:	82 83       	std	Z+2, r24	; 0x02
     948:	13 82       	std	Z+3, r1	; 0x03
     94a:	13 c0       	rjmp	.+38     	; 0x972 <_Z15assignEditDigitv+0x29e>
     94c:	e2 e8       	ldi	r30, 0x82	; 130
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <showDate+0x2>
     954:	81 83       	std	Z+1, r24	; 0x01
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	82 83       	std	Z+2, r24	; 0x02
     95a:	13 82       	std	Z+3, r1	; 0x03
     95c:	0a c0       	rjmp	.+20     	; 0x972 <_Z15assignEditDigitv+0x29e>
     95e:	85 30       	cpi	r24, 0x05	; 5
     960:	41 f4       	brne	.+16     	; 0x972 <_Z15assignEditDigitv+0x29e>
     962:	e2 e8       	ldi	r30, 0x82	; 130
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <nightMode+0x5>
     96a:	81 83       	std	Z+1, r24	; 0x01
     96c:	82 e3       	ldi	r24, 0x32	; 50
     96e:	82 83       	std	Z+2, r24	; 0x02
     970:	13 82       	std	Z+3, r1	; 0x03
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_Z22fillTubeValueFromIndexhh>:
     976:	88 0f       	add	r24, r24
     978:	82 50       	subi	r24, 0x02	; 2
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	6a 30       	cpi	r22, 0x0A	; 10
     97e:	b8 f0       	brcs	.+46     	; 0x9ae <_Z22fillTubeValueFromIndexhh+0x38>
     980:	fc 01       	movw	r30, r24
     982:	ec 55       	subi	r30, 0x5C	; 92
     984:	ff 4f       	sbci	r31, 0xFF	; 255
     986:	2d ec       	ldi	r18, 0xCD	; 205
     988:	62 9f       	mul	r22, r18
     98a:	21 2d       	mov	r18, r1
     98c:	11 24       	eor	r1, r1
     98e:	26 95       	lsr	r18
     990:	26 95       	lsr	r18
     992:	26 95       	lsr	r18
     994:	26 8b       	std	Z+22, r18	; 0x16
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	22 0f       	add	r18, r18
     99a:	32 2f       	mov	r19, r18
     99c:	33 0f       	add	r19, r19
     99e:	33 0f       	add	r19, r19
     9a0:	23 0f       	add	r18, r19
     9a2:	62 1b       	sub	r22, r18
     9a4:	fc 01       	movw	r30, r24
     9a6:	ec 55       	subi	r30, 0x5C	; 92
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	66 8b       	std	Z+22, r22	; 0x16
     9ac:	08 95       	ret
     9ae:	fc 01       	movw	r30, r24
     9b0:	ec 55       	subi	r30, 0x5C	; 92
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	16 8a       	std	Z+22, r1	; 0x16
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	f5 cf       	rjmp	.-22     	; 0x9a4 <_Z22fillTubeValueFromIndexhh+0x2e>

000009ba <_Z10tubeAsModev>:
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <tubeMode>
     9ce:	8e 2f       	mov	r24, r30
     9d0:	ee 0f       	add	r30, r30
     9d2:	99 0b       	sbc	r25, r25
     9d4:	aa 0b       	sbc	r26, r26
     9d6:	bb 0b       	sbc	r27, r27
     9d8:	fc 01       	movw	r30, r24
     9da:	31 96       	adiw	r30, 0x01	; 1
     9dc:	e8 30       	cpi	r30, 0x08	; 8
     9de:	f1 05       	cpc	r31, r1
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <_Z10tubeAsModev+0x2a>
     9e2:	43 c0       	rjmp	.+134    	; 0xa6a <_Z10tubeAsModev+0xb0>
     9e4:	ed 5e       	subi	r30, 0xED	; 237
     9e6:	ff 4f       	sbci	r31, 0xFF	; 255
     9e8:	09 94       	ijmp
     9ea:	e0 e1       	ldi	r30, 0x10	; 16
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	62 81       	ldd	r22, Z+2	; 0x02
     9f0:	d1 81       	ldd	r29, Z+1	; 0x01
     9f2:	c0 81       	ld	r28, Z
     9f4:	3d c0       	rjmp	.+122    	; 0xa70 <_Z10tubeAsModev+0xb6>
     9f6:	e0 e1       	ldi	r30, 0x10	; 16
     9f8:	f1 e0       	ldi	r31, 0x01	; 1
     9fa:	63 81       	ldd	r22, Z+3	; 0x03
     9fc:	d4 81       	ldd	r29, Z+4	; 0x04
     9fe:	c5 81       	ldd	r28, Z+5	; 0x05
     a00:	37 c0       	rjmp	.+110    	; 0xa70 <_Z10tubeAsModev+0xb6>
     a02:	ed e0       	ldi	r30, 0x0D	; 13
     a04:	f1 e0       	ldi	r31, 0x01	; 1
     a06:	60 81       	ld	r22, Z
     a08:	d1 81       	ldd	r29, Z+1	; 0x01
     a0a:	c2 81       	ldd	r28, Z+2	; 0x02
     a0c:	31 c0       	rjmp	.+98     	; 0xa70 <_Z10tubeAsModev+0xb6>
     a0e:	ef ed       	ldi	r30, 0xDF	; 223
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	63 81       	ldd	r22, Z+3	; 0x03
     a14:	d4 81       	ldd	r29, Z+4	; 0x04
     a16:	c0 81       	ld	r28, Z
     a18:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <tube+0x10>
     a1c:	29 c0       	rjmp	.+82     	; 0xa70 <_Z10tubeAsModev+0xb6>
     a1e:	e6 e8       	ldi	r30, 0x86	; 134
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	62 81       	ldd	r22, Z+2	; 0x02
     a24:	d1 81       	ldd	r29, Z+1	; 0x01
     a26:	c0 81       	ld	r28, Z
     a28:	23 c0       	rjmp	.+70     	; 0xa70 <_Z10tubeAsModev+0xb6>
     a2a:	e2 e9       	ldi	r30, 0x92	; 146
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	66 81       	ldd	r22, Z+6	; 0x06
     a30:	d7 81       	ldd	r29, Z+7	; 0x07
     a32:	c2 81       	ldd	r28, Z+2	; 0x02
     a34:	1d c0       	rjmp	.+58     	; 0xa70 <_Z10tubeAsModev+0xb6>
     a36:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <etching+0x2>
     a3a:	c6 2f       	mov	r28, r22
     a3c:	d6 2f       	mov	r29, r22
     a3e:	18 c0       	rjmp	.+48     	; 0xa70 <_Z10tubeAsModev+0xb6>
     a40:	c0 91 97 00 	lds	r28, 0x0097	; 0x800097 <nightMode+0x5>
     a44:	00 91 83 00 	lds	r16, 0x0083	; 0x800083 <editValue+0x1>
     a48:	84 e1       	ldi	r24, 0x14	; 20
     a4a:	08 02       	muls	r16, r24
     a4c:	80 01       	movw	r16, r0
     a4e:	11 24       	eor	r1, r1
     a50:	87 e0       	ldi	r24, 0x07	; 7
     a52:	8e dd       	rcall	.-1252   	; 0x570 <_Z6getADCh>
     a54:	80 17       	cp	r24, r16
     a56:	91 07       	cpc	r25, r17
     a58:	24 f4       	brge	.+8      	; 0xa62 <_Z10tubeAsModev+0xa8>
     a5a:	c2 9a       	sbi	0x18, 2	; 24
     a5c:	d0 e0       	ldi	r29, 0x00	; 0
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <_Z10tubeAsModev+0xb6>
     a62:	c2 98       	cbi	0x18, 2	; 24
     a64:	d0 e0       	ldi	r29, 0x00	; 0
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <_Z10tubeAsModev+0xb6>
     a6a:	c0 e0       	ldi	r28, 0x00	; 0
     a6c:	d0 e0       	ldi	r29, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	81 df       	rcall	.-254    	; 0x976 <_Z22fillTubeValueFromIndexhh>
     a74:	6d 2f       	mov	r22, r29
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	7e df       	rcall	.-260    	; 0x976 <_Z22fillTubeValueFromIndexhh>
     a7a:	6c 2f       	mov	r22, r28
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	7b df       	rcall	.-266    	; 0x976 <_Z22fillTubeValueFromIndexhh>
     a80:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     a84:	88 23       	and	r24, r24
     a86:	09 f4       	brne	.+2      	; 0xa8a <_Z10tubeAsModev+0xd0>
     a88:	6f c0       	rjmp	.+222    	; 0xb68 <_Z10tubeAsModev+0x1ae>
     a8a:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
     a8e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <rank>
     a92:	71 df       	rcall	.-286    	; 0x976 <_Z22fillTubeValueFromIndexhh>
     a94:	69 c0       	rjmp	.+210    	; 0xb68 <_Z10tubeAsModev+0x1ae>
     a96:	86 01       	movw	r16, r12
     a98:	89 91       	ld	r24, Y+
     a9a:	68 01       	movw	r12, r16
     a9c:	9f ef       	ldi	r25, 0xFF	; 255
     a9e:	c9 1a       	sub	r12, r25
     aa0:	d9 0a       	sbc	r13, r25
     aa2:	81 11       	cpse	r24, r1
     aa4:	24 c0       	rjmp	.+72     	; 0xaee <_Z10tubeAsModev+0x134>
     aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa8:	5f db       	rcall	.-2370   	; 0x168 <_Z15translitDecoderc>
     aaa:	8d 81       	ldd	r24, Y+5	; 0x05
     aac:	88 23       	and	r24, r24
     aae:	11 f0       	breq	.+4      	; 0xab4 <_Z10tubeAsModev+0xfa>
     ab0:	94 9a       	sbi	0x12, 4	; 18
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <_Z10tubeAsModev+0xfc>
     ab4:	94 98       	cbi	0x12, 4	; 18
     ab6:	f7 01       	movw	r30, r14
     ab8:	85 89       	ldd	r24, Z+21	; 0x15
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	11 f4       	brne	.+4      	; 0xac2 <_Z10tubeAsModev+0x108>
     abe:	96 9a       	sbi	0x12, 6	; 18
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <_Z10tubeAsModev+0x10a>
     ac2:	96 98       	cbi	0x12, 6	; 18
     ac4:	f7 01       	movw	r30, r14
     ac6:	84 89       	ldd	r24, Z+20	; 0x14
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	11 f4       	brne	.+4      	; 0xad0 <_Z10tubeAsModev+0x116>
     acc:	97 9a       	sbi	0x12, 7	; 18
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <_Z10tubeAsModev+0x118>
     ad0:	97 98       	cbi	0x12, 7	; 18
     ad2:	f7 01       	movw	r30, r14
     ad4:	83 89       	ldd	r24, Z+19	; 0x13
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	11 f4       	brne	.+4      	; 0xade <_Z10tubeAsModev+0x124>
     ada:	c0 9a       	sbi	0x18, 0	; 24
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <_Z10tubeAsModev+0x126>
     ade:	c0 98       	cbi	0x18, 0	; 24
     ae0:	f7 01       	movw	r30, r14
     ae2:	82 89       	ldd	r24, Z+18	; 0x12
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	11 f4       	brne	.+4      	; 0xaec <_Z10tubeAsModev+0x132>
     ae8:	c1 9a       	sbi	0x18, 1	; 24
     aea:	01 c0       	rjmp	.+2      	; 0xaee <_Z10tubeAsModev+0x134>
     aec:	c1 98       	cbi	0x18, 1	; 24
     aee:	8a 81       	ldd	r24, Y+2	; 0x02
     af0:	81 11       	cpse	r24, r1
     af2:	24 c0       	rjmp	.+72     	; 0xb3c <_Z10tubeAsModev+0x182>
     af4:	8a 89       	ldd	r24, Y+18	; 0x12
     af6:	38 db       	rcall	.-2448   	; 0x168 <_Z15translitDecoderc>
     af8:	88 85       	ldd	r24, Y+8	; 0x08
     afa:	88 23       	and	r24, r24
     afc:	11 f0       	breq	.+4      	; 0xb02 <_Z10tubeAsModev+0x148>
     afe:	ab 9a       	sbi	0x15, 3	; 21
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <_Z10tubeAsModev+0x14a>
     b02:	ab 98       	cbi	0x15, 3	; 21
     b04:	f7 01       	movw	r30, r14
     b06:	85 89       	ldd	r24, Z+21	; 0x15
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	11 f4       	brne	.+4      	; 0xb10 <_Z10tubeAsModev+0x156>
     b0c:	c7 9a       	sbi	0x18, 7	; 24
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <_Z10tubeAsModev+0x158>
     b10:	c7 98       	cbi	0x18, 7	; 24
     b12:	f7 01       	movw	r30, r14
     b14:	84 89       	ldd	r24, Z+20	; 0x14
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	11 f4       	brne	.+4      	; 0xb1e <_Z10tubeAsModev+0x164>
     b1a:	93 9a       	sbi	0x12, 3	; 18
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <_Z10tubeAsModev+0x166>
     b1e:	93 98       	cbi	0x12, 3	; 18
     b20:	f7 01       	movw	r30, r14
     b22:	83 89       	ldd	r24, Z+19	; 0x13
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	11 f4       	brne	.+4      	; 0xb2c <_Z10tubeAsModev+0x172>
     b28:	92 9a       	sbi	0x12, 2	; 18
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <_Z10tubeAsModev+0x174>
     b2c:	92 98       	cbi	0x12, 2	; 18
     b2e:	f7 01       	movw	r30, r14
     b30:	82 89       	ldd	r24, Z+18	; 0x12
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <_Z10tubeAsModev+0x180>
     b36:	c6 9a       	sbi	0x18, 6	; 24
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <_Z10tubeAsModev+0x182>
     b3a:	c6 98       	cbi	0x18, 6	; 24
     b3c:	01 30       	cpi	r16, 0x01	; 1
     b3e:	11 05       	cpc	r17, r1
     b40:	39 f0       	breq	.+14     	; 0xb50 <_Z10tubeAsModev+0x196>
     b42:	20 f0       	brcs	.+8      	; 0xb4c <_Z10tubeAsModev+0x192>
     b44:	02 30       	cpi	r16, 0x02	; 2
     b46:	11 05       	cpc	r17, r1
     b48:	29 f0       	breq	.+10     	; 0xb54 <_Z10tubeAsModev+0x19a>
     b4a:	07 c0       	rjmp	.+14     	; 0xb5a <_Z10tubeAsModev+0x1a0>
     b4c:	a8 98       	cbi	0x15, 0	; 21
     b4e:	17 c0       	rjmp	.+46     	; 0xb7e <_Z10tubeAsModev+0x1c4>
     b50:	a9 98       	cbi	0x15, 1	; 21
     b52:	15 c0       	rjmp	.+42     	; 0xb7e <_Z10tubeAsModev+0x1c4>
     b54:	aa 98       	cbi	0x15, 2	; 21
     b56:	18 db       	rcall	.-2512   	; 0x188 <_Z10tubeSwitchv>
     b58:	14 c0       	rjmp	.+40     	; 0xb82 <_Z10tubeAsModev+0x1c8>
     b5a:	16 db       	rcall	.-2516   	; 0x188 <_Z10tubeSwitchv>
     b5c:	f3 e0       	ldi	r31, 0x03	; 3
     b5e:	cf 16       	cp	r12, r31
     b60:	d1 04       	cpc	r13, r1
     b62:	0c f4       	brge	.+2      	; 0xb66 <_Z10tubeAsModev+0x1ac>
     b64:	98 cf       	rjmp	.-208    	; 0xa96 <_Z10tubeAsModev+0xdc>
     b66:	0d c0       	rjmp	.+26     	; 0xb82 <_Z10tubeAsModev+0x1c8>
     b68:	ca ea       	ldi	r28, 0xAA	; 170
     b6a:	d0 e0       	ldi	r29, 0x00	; 0
     b6c:	00 e0       	ldi	r16, 0x00	; 0
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	0f 2e       	mov	r0, r31
     b72:	f4 ea       	ldi	r31, 0xA4	; 164
     b74:	ef 2e       	mov	r14, r31
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	ff 2e       	mov	r15, r31
     b7a:	f0 2d       	mov	r31, r0
     b7c:	8d cf       	rjmp	.-230    	; 0xa98 <_Z10tubeAsModev+0xde>
     b7e:	04 db       	rcall	.-2552   	; 0x188 <_Z10tubeSwitchv>
     b80:	8a cf       	rjmp	.-236    	; 0xa96 <_Z10tubeAsModev+0xdc>
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	cf 90       	pop	r12
     b92:	08 95       	ret

00000b94 <_Z14ds1307_setdate8DateTime>:

void ds1307_setdate(DateTime dateTime) {
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	27 97       	sbiw	r28, 0x07	; 7
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	29 83       	std	Y+1, r18	; 0x01
     bac:	3a 83       	std	Y+2, r19	; 0x02
     bae:	4b 83       	std	Y+3, r20	; 0x03
     bb0:	5c 83       	std	Y+4, r21	; 0x04
     bb2:	6d 83       	std	Y+5, r22	; 0x05
     bb4:	7e 83       	std	Y+6, r23	; 0x06
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
     bb6:	80 ed       	ldi	r24, 0xD0	; 208
     bb8:	e6 d8       	rcall	.-3636   	; 0xfffffd86 <__eeprom_end+0xff7efd73>
	i2c_write(0x00);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0a d9       	rcall	.-3564   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_write(ds1307_dec2bcd(dateTime.sec));
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	1d ec       	ldi	r17, 0xCD	; 205
     bc2:	81 9f       	mul	r24, r17
     bc4:	91 2d       	mov	r25, r1
     bc6:	11 24       	eor	r1, r1
     bc8:	96 95       	lsr	r25
     bca:	96 95       	lsr	r25
     bcc:	96 95       	lsr	r25
     bce:	29 2f       	mov	r18, r25
     bd0:	22 0f       	add	r18, r18
     bd2:	92 0f       	add	r25, r18
     bd4:	99 0f       	add	r25, r25
     bd6:	89 0f       	add	r24, r25
     bd8:	fc d8       	rcall	.-3592   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_write(ds1307_dec2bcd(dateTime.min));
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	81 9f       	mul	r24, r17
     bde:	91 2d       	mov	r25, r1
     be0:	11 24       	eor	r1, r1
     be2:	96 95       	lsr	r25
     be4:	96 95       	lsr	r25
     be6:	96 95       	lsr	r25
     be8:	29 2f       	mov	r18, r25
     bea:	22 0f       	add	r18, r18
     bec:	92 0f       	add	r25, r18
     bee:	99 0f       	add	r25, r25
     bf0:	89 0f       	add	r24, r25
     bf2:	ef d8       	rcall	.-3618   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_write(ds1307_dec2bcd(dateTime.hour));
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	81 9f       	mul	r24, r17
     bf8:	91 2d       	mov	r25, r1
     bfa:	11 24       	eor	r1, r1
     bfc:	96 95       	lsr	r25
     bfe:	96 95       	lsr	r25
     c00:	96 95       	lsr	r25
     c02:	29 2f       	mov	r18, r25
     c04:	22 0f       	add	r18, r18
     c06:	92 0f       	add	r25, r18
     c08:	99 0f       	add	r25, r25
     c0a:	89 0f       	add	r24, r25
     c0c:	e2 d8       	rcall	.-3644   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_write(ds1307_dec2bcd(1));
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	e0 d8       	rcall	.-3648   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_write(ds1307_dec2bcd(dateTime.day));
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	81 9f       	mul	r24, r17
     c16:	91 2d       	mov	r25, r1
     c18:	11 24       	eor	r1, r1
     c1a:	96 95       	lsr	r25
     c1c:	96 95       	lsr	r25
     c1e:	96 95       	lsr	r25
     c20:	29 2f       	mov	r18, r25
     c22:	22 0f       	add	r18, r18
     c24:	92 0f       	add	r25, r18
     c26:	99 0f       	add	r25, r25
     c28:	89 0f       	add	r24, r25
     c2a:	d3 d8       	rcall	.-3674   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_write(ds1307_dec2bcd(dateTime.month));
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	81 9f       	mul	r24, r17
     c30:	91 2d       	mov	r25, r1
     c32:	11 24       	eor	r1, r1
     c34:	96 95       	lsr	r25
     c36:	96 95       	lsr	r25
     c38:	96 95       	lsr	r25
     c3a:	29 2f       	mov	r18, r25
     c3c:	22 0f       	add	r18, r18
     c3e:	92 0f       	add	r25, r18
     c40:	99 0f       	add	r25, r25
     c42:	89 0f       	add	r24, r25
     c44:	c6 d8       	rcall	.-3700   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_write(ds1307_dec2bcd(dateTime.year));
     c46:	8e 81       	ldd	r24, Y+6	; 0x06
     c48:	81 9f       	mul	r24, r17
     c4a:	11 2d       	mov	r17, r1
     c4c:	11 24       	eor	r1, r1
     c4e:	16 95       	lsr	r17
     c50:	16 95       	lsr	r17
     c52:	16 95       	lsr	r17
     c54:	91 2f       	mov	r25, r17
     c56:	99 0f       	add	r25, r25
     c58:	19 0f       	add	r17, r25
     c5a:	11 0f       	add	r17, r17
     c5c:	81 0f       	add	r24, r17
     c5e:	b9 d8       	rcall	.-3726   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_write(0x00);
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	b7 d8       	rcall	.-3730   	; 0xfffffdd2 <__eeprom_end+0xff7efdbf>
	i2c_stop();
     c64:	b0 d8       	rcall	.-3744   	; 0xfffffdc6 <__eeprom_end+0xff7efdb3>
}
     c66:	27 96       	adiw	r28, 0x07	; 7
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	08 95       	ret

00000c7a <_Z14timeCorrectionv>:
		}
	}
	return stamp;
}

void timeCorrection() {
     c7a:	3f 92       	push	r3
     c7c:	4f 92       	push	r4
     c7e:	5f 92       	push	r5
     c80:	6f 92       	push	r6
     c82:	7f 92       	push	r7
     c84:	8f 92       	push	r8
     c86:	9f 92       	push	r9
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
	if (correction.value == 0 || correction.interval == 0) {
     c9c:	c0 91 87 00 	lds	r28, 0x0087	; 0x800087 <correction+0x1>
     ca0:	cc 23       	and	r28, r28
     ca2:	09 f4       	brne	.+2      	; 0xca6 <_Z14timeCorrectionv+0x2c>
     ca4:	c3 c0       	rjmp	.+390    	; 0xe2c <_Z14timeCorrectionv+0x1b2>
     ca6:	d0 91 88 00 	lds	r29, 0x0088	; 0x800088 <correction+0x2>
     caa:	dd 23       	and	r29, r29
     cac:	09 f4       	brne	.+2      	; 0xcb0 <_Z14timeCorrectionv+0x36>
     cae:	be c0       	rjmp	.+380    	; 0xe2c <_Z14timeCorrectionv+0x1b2>
		return;
	}
	if (!(dateTime.min > 2 && dateTime.min < 58)) {
     cb0:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <dateTime+0x1>
     cb4:	8d ef       	ldi	r24, 0xFD	; 253
     cb6:	89 0d       	add	r24, r9
     cb8:	87 33       	cpi	r24, 0x37	; 55
     cba:	08 f0       	brcs	.+2      	; 0xcbe <_Z14timeCorrectionv+0x44>
     cbc:	b7 c0       	rjmp	.+366    	; 0xe2c <_Z14timeCorrectionv+0x1b2>
		return;
	}
	
	uint64_t stampDatetime = calcTimeStamp(dateTime.day, dateTime.month, dateTime.year);
     cbe:	e0 e1       	ldi	r30, 0x10	; 16
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	15 81       	ldd	r17, Z+5	; 0x05
     cc4:	41 2f       	mov	r20, r17
     cc6:	64 81       	ldd	r22, Z+4	; 0x04
     cc8:	83 81       	ldd	r24, Z+3	; 0x03
     cca:	12 db       	rcall	.-2524   	; 0x2f0 <_Z13calcTimeStamphhh>
     ccc:	42 2e       	mov	r4, r18
     cce:	53 2e       	mov	r5, r19
     cd0:	64 2e       	mov	r6, r20
     cd2:	75 2e       	mov	r7, r21
     cd4:	86 2e       	mov	r8, r22
     cd6:	b7 2f       	mov	r27, r23
     cd8:	a8 2f       	mov	r26, r24
     cda:	39 2e       	mov	r3, r25
	bool isCanCorrect = false;
	
	if (dateTime.year == correction.year) {
     cdc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <correction+0x3>
     ce0:	18 13       	cpse	r17, r24
     ce2:	21 c0       	rjmp	.+66     	; 0xd26 <_Z14timeCorrectionv+0xac>
		if (stampDatetime - correction.stamp >= correction.interval) {
     ce4:	e6 e8       	ldi	r30, 0x86	; 134
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	24 2d       	mov	r18, r4
     cea:	35 2d       	mov	r19, r5
     cec:	46 2d       	mov	r20, r6
     cee:	57 2d       	mov	r21, r7
     cf0:	68 2d       	mov	r22, r8
     cf2:	7b 2f       	mov	r23, r27
     cf4:	8a 2f       	mov	r24, r26
     cf6:	93 2d       	mov	r25, r3
     cf8:	a4 80       	ldd	r10, Z+4	; 0x04
     cfa:	b5 80       	ldd	r11, Z+5	; 0x05
     cfc:	c6 80       	ldd	r12, Z+6	; 0x06
     cfe:	d7 80       	ldd	r13, Z+7	; 0x07
     d00:	e0 84       	ldd	r14, Z+8	; 0x08
     d02:	f1 84       	ldd	r15, Z+9	; 0x09
     d04:	02 85       	ldd	r16, Z+10	; 0x0a
     d06:	13 85       	ldd	r17, Z+11	; 0x0b
     d08:	b3 d8       	rcall	.-3738   	; 0xfffffe70 <__eeprom_end+0xff7efe5d>
     d0a:	e1 e0       	ldi	r30, 0x01	; 1
     d0c:	ad 2e       	mov	r10, r29
     d0e:	b1 2c       	mov	r11, r1
     d10:	c1 2c       	mov	r12, r1
     d12:	d1 2c       	mov	r13, r1
     d14:	e1 2c       	mov	r14, r1
     d16:	f1 2c       	mov	r15, r1
     d18:	00 e0       	ldi	r16, 0x00	; 0
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	b2 d8       	rcall	.-3740   	; 0xfffffe82 <__eeprom_end+0xff7efe6f>
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <_Z14timeCorrectionv+0xa8>
     d20:	3e c0       	rjmp	.+124    	; 0xd9e <_Z14timeCorrectionv+0x124>
     d22:	e0 e0       	ldi	r30, 0x00	; 0
     d24:	3c c0       	rjmp	.+120    	; 0xd9e <_Z14timeCorrectionv+0x124>
			isCanCorrect = true;
		}
	} else {
		uint8_t daysInYear = correction.year % 4? 366: 365;
     d26:	83 70       	andi	r24, 0x03	; 3
     d28:	11 f4       	brne	.+4      	; 0xd2e <_Z14timeCorrectionv+0xb4>
     d2a:	2d e6       	ldi	r18, 0x6D	; 109
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <_Z14timeCorrectionv+0xb6>
     d2e:	2e e6       	ldi	r18, 0x6E	; 110
		correction.stamp = daysInYear - correction.stamp;
     d30:	e6 e8       	ldi	r30, 0x86	; 134
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a4 80       	ldd	r10, Z+4	; 0x04
     d44:	b5 80       	ldd	r11, Z+5	; 0x05
     d46:	c6 80       	ldd	r12, Z+6	; 0x06
     d48:	d7 80       	ldd	r13, Z+7	; 0x07
     d4a:	e0 84       	ldd	r14, Z+8	; 0x08
     d4c:	f1 84       	ldd	r15, Z+9	; 0x09
     d4e:	02 85       	ldd	r16, Z+10	; 0x0a
     d50:	13 85       	ldd	r17, Z+11	; 0x0b
     d52:	8e d8       	rcall	.-3812   	; 0xfffffe70 <__eeprom_end+0xff7efe5d>
     d54:	a2 2e       	mov	r10, r18
     d56:	b3 2e       	mov	r11, r19
     d58:	c4 2e       	mov	r12, r20
     d5a:	d5 2e       	mov	r13, r21
     d5c:	e6 2e       	mov	r14, r22
     d5e:	f7 2e       	mov	r15, r23
     d60:	08 2f       	mov	r16, r24
     d62:	19 2f       	mov	r17, r25
     d64:	24 83       	std	Z+4, r18	; 0x04
     d66:	35 83       	std	Z+5, r19	; 0x05
     d68:	46 83       	std	Z+6, r20	; 0x06
     d6a:	57 83       	std	Z+7, r21	; 0x07
     d6c:	60 87       	std	Z+8, r22	; 0x08
     d6e:	71 87       	std	Z+9, r23	; 0x09
     d70:	82 87       	std	Z+10, r24	; 0x0a
     d72:	93 87       	std	Z+11, r25	; 0x0b
		if (correction.stamp + stampDatetime >= correction.interval ) {
     d74:	24 2d       	mov	r18, r4
     d76:	35 2d       	mov	r19, r5
     d78:	46 2d       	mov	r20, r6
     d7a:	57 2d       	mov	r21, r7
     d7c:	68 2d       	mov	r22, r8
     d7e:	7b 2f       	mov	r23, r27
     d80:	8a 2f       	mov	r24, r26
     d82:	93 2d       	mov	r25, r3
     d84:	60 d8       	rcall	.-3904   	; 0xfffffe46 <__eeprom_end+0xff7efe33>
     d86:	e1 e0       	ldi	r30, 0x01	; 1
     d88:	ad 2e       	mov	r10, r29
     d8a:	b1 2c       	mov	r11, r1
     d8c:	c1 2c       	mov	r12, r1
     d8e:	d1 2c       	mov	r13, r1
     d90:	e1 2c       	mov	r14, r1
     d92:	f1 2c       	mov	r15, r1
     d94:	00 e0       	ldi	r16, 0x00	; 0
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	74 d8       	rcall	.-3864   	; 0xfffffe82 <__eeprom_end+0xff7efe6f>
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <_Z14timeCorrectionv+0x124>
     d9c:	e0 e0       	ldi	r30, 0x00	; 0
			isCanCorrect = true;
		}
	}
	if (!isCanCorrect) {
     d9e:	ee 23       	and	r30, r30
     da0:	09 f4       	brne	.+2      	; 0xda4 <_Z14timeCorrectionv+0x12a>
     da2:	44 c0       	rjmp	.+136    	; 0xe2c <_Z14timeCorrectionv+0x1b2>
		return;
	}
	
	uint16_t correctionStamp = dateTime.min * 60 + dateTime.sec;
     da4:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <dateTime>
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	8c e3       	ldi	r24, 0x3C	; 60
     dac:	98 9e       	mul	r9, r24
     dae:	40 0d       	add	r20, r0
     db0:	51 1d       	adc	r21, r1
     db2:	11 24       	eor	r1, r1
	if (correction.isForward) {
     db4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <correction>
     db8:	88 23       	and	r24, r24
     dba:	19 f0       	breq	.+6      	; 0xdc2 <_Z14timeCorrectionv+0x148>
		correctionStamp += correction.value;
     dbc:	4c 0f       	add	r20, r28
     dbe:	51 1d       	adc	r21, r1
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <_Z14timeCorrectionv+0x14c>
	} else {
		correctionStamp -= correction.value;
     dc2:	4c 1b       	sub	r20, r28
     dc4:	51 09       	sbc	r21, r1
	}
	
	dateTime.sec = correctionStamp % 60;
     dc6:	e0 e1       	ldi	r30, 0x10	; 16
     dc8:	f1 e0       	ldi	r31, 0x01	; 1
     dca:	9a 01       	movw	r18, r20
     dcc:	a9 e8       	ldi	r26, 0x89	; 137
     dce:	b8 e8       	ldi	r27, 0x88	; 136
     dd0:	2e d8       	rcall	.-4004   	; 0xfffffe2e <__eeprom_end+0xff7efe1b>
     dd2:	96 95       	lsr	r25
     dd4:	87 95       	ror	r24
     dd6:	92 95       	swap	r25
     dd8:	82 95       	swap	r24
     dda:	8f 70       	andi	r24, 0x0F	; 15
     ddc:	89 27       	eor	r24, r25
     dde:	9f 70       	andi	r25, 0x0F	; 15
     de0:	89 27       	eor	r24, r25
     de2:	6c e3       	ldi	r22, 0x3C	; 60
     de4:	68 9f       	mul	r22, r24
     de6:	90 01       	movw	r18, r0
     de8:	69 9f       	mul	r22, r25
     dea:	30 0d       	add	r19, r0
     dec:	11 24       	eor	r1, r1
     dee:	ca 01       	movw	r24, r20
     df0:	82 1b       	sub	r24, r18
     df2:	93 0b       	sbc	r25, r19
     df4:	80 83       	st	Z, r24
	dateTime.min = correctionStamp / 60;
     df6:	9a 01       	movw	r18, r20
     df8:	1a d8       	rcall	.-4044   	; 0xfffffe2e <__eeprom_end+0xff7efe1b>
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	92 95       	swap	r25
     e00:	82 95       	swap	r24
     e02:	8f 70       	andi	r24, 0x0F	; 15
     e04:	89 27       	eor	r24, r25
     e06:	9f 70       	andi	r25, 0x0F	; 15
     e08:	89 27       	eor	r24, r25
     e0a:	81 83       	std	Z+1, r24	; 0x01
	resetCorrectionParams();
     e0c:	65 db       	rcall	.-2358   	; 0x4d8 <_Z21resetCorrectionParamsv>
	ds1307_setdate(dateTime);
     e0e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <dateTime>
     e12:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <dateTime+0x1>
     e16:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <dateTime+0x2>
     e1a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <dateTime+0x3>
     e1e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dateTime+0x4>
     e22:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dateTime+0x5>
     e26:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dateTime+0x6>
     e2a:	b4 de       	rcall	.-664    	; 0xb94 <_Z14ds1307_setdate8DateTime>
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	9f 90       	pop	r9
     e42:	8f 90       	pop	r8
     e44:	7f 90       	pop	r7
     e46:	6f 90       	pop	r6
     e48:	5f 90       	pop	r5
     e4a:	4f 90       	pop	r4
     e4c:	3f 90       	pop	r3
     e4e:	08 95       	ret

00000e50 <_Z16buttonShortPressv>:
		}
		resetButtons();
	}
}

void buttonShortPress() {
     e50:	cf 93       	push	r28
	if (button.notInclude) {
     e52:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <button+0x1>
     e56:	88 23       	and	r24, r24
     e58:	19 f0       	breq	.+6      	; 0xe60 <_Z16buttonShortPressv+0x10>
		button.notInclude = false;
     e5a:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <button+0x1>
		return;
     e5e:	b9 c0       	rjmp	.+370    	; 0xfd2 <_Z16buttonShortPressv+0x182>
	}
	if (modeWork == mw_Clock) {
     e60:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <modeWork>
     e64:	61 11       	cpse	r22, r1
     e66:	3c c0       	rjmp	.+120    	; 0xee0 <_Z16buttonShortPressv+0x90>
		switch(button.num) {
     e68:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <button+0x2>
     e6c:	91 30       	cpi	r25, 0x01	; 1
     e6e:	19 f0       	breq	.+6      	; 0xe76 <_Z16buttonShortPressv+0x26>
     e70:	92 30       	cpi	r25, 0x02	; 2
     e72:	01 f1       	breq	.+64     	; 0xeb4 <_Z16buttonShortPressv+0x64>
     e74:	ae c0       	rjmp	.+348    	; 0xfd2 <_Z16buttonShortPressv+0x182>
			case 1:
				hourBeep.isActive = !hourBeep.isActive;
     e76:	e7 ef       	ldi	r30, 0xF7	; 247
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	60 81       	ld	r22, Z
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	69 27       	eor	r22, r25
     e80:	60 83       	st	Z, r22
				hourBeep.manualActivation = nightMode.isActive? false: hourBeep.isActive;
     e82:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <nightMode>
     e86:	91 11       	cpse	r25, r1
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <_Z16buttonShortPressv+0x3c>
     e8a:	86 2f       	mov	r24, r22
     e8c:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <hourBeep+0x1>
				eeprom_update_byte(&eeprom_isHourBeepActive, hourBeep.isActive);
     e90:	80 e1       	ldi	r24, 0x10	; 16
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	27 d8       	rcall	.-4018   	; 0xfffffee4 <__eeprom_end+0xff7efed1>
				if (nightMode.isActive) {
     e96:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <nightMode>
     e9a:	88 23       	and	r24, r24
     e9c:	31 f0       	breq	.+12     	; 0xeaa <_Z16buttonShortPressv+0x5a>
					ledBlinking.isCanInit = true;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ledBlinking>
					hourBeep.manualActivation = false;
     ea4:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <hourBeep+0x1>
     ea8:	94 c0       	rjmp	.+296    	; 0xfd2 <_Z16buttonShortPressv+0x182>
				} else {
					hourBeep.manualActivation = hourBeep.isActive;
     eaa:	e7 ef       	ldi	r30, 0xF7	; 247
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	81 83       	std	Z+1, r24	; 0x01
     eb2:	8f c0       	rjmp	.+286    	; 0xfd2 <_Z16buttonShortPressv+0x182>
				}
				break;
			case 2:
				if (!nightMode.isActive) {
     eb4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <nightMode>
     eb8:	81 11       	cpse	r24, r1
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <_Z16buttonShortPressv+0x88>
					bright.level = bright.level >= 3? 0: bright.level + 1;
     ebc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <bright>
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	10 f4       	brcc	.+4      	; 0xec8 <_Z16buttonShortPressv+0x78>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	68 0f       	add	r22, r24
     ec8:	e8 ec       	ldi	r30, 0xC8	; 200
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	60 83       	st	Z, r22
					bright.dayLevel = bright.level;
     ece:	61 83       	std	Z+1, r22	; 0x01
					eeprom_update_byte(&eeprom_bright, bright.level);					
     ed0:	82 e1       	ldi	r24, 0x12	; 18
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	07 d8       	rcall	.-4082   	; 0xfffffee4 <__eeprom_end+0xff7efed1>
     ed6:	7d c0       	rjmp	.+250    	; 0xfd2 <_Z16buttonShortPressv+0x182>
				} else {
					ledBlinking.isCanInit = true;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ledBlinking>
     ede:	79 c0       	rjmp	.+242    	; 0xfd2 <_Z16buttonShortPressv+0x182>
				break;
		}
		return;
	} 
	
	if (modeWork == mw_SetSec) {
     ee0:	61 30       	cpi	r22, 0x01	; 1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <_Z16buttonShortPressv+0x96>
     ee4:	55 c0       	rjmp	.+170    	; 0xf90 <_Z16buttonShortPressv+0x140>
		if (dateTime.sec >= 30) {
     ee6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dateTime>
     eea:	8e 31       	cpi	r24, 0x1E	; 30
     eec:	d8 f1       	brcs	.+118    	; 0xf64 <_Z16buttonShortPressv+0x114>
			alarm.lastDay = 0;
     eee:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm+0x2>
			if (dateTime.min == 59) {
     ef2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dateTime+0x1>
     ef6:	8b 33       	cpi	r24, 0x3B	; 59
     ef8:	71 f5       	brne	.+92     	; 0xf56 <_Z16buttonShortPressv+0x106>
				dateTime.min = 0;
     efa:	e0 e1       	ldi	r30, 0x10	; 16
     efc:	f1 e0       	ldi	r31, 0x01	; 1
     efe:	11 82       	std	Z+1, r1	; 0x01
				if (dateTime.hour == 23) {
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	87 31       	cpi	r24, 0x17	; 23
     f04:	01 f5       	brne	.+64     	; 0xf46 <_Z16buttonShortPressv+0xf6>
					dateTime.hour = 0;
     f06:	12 82       	std	Z+2, r1	; 0x02
					if (dateTime.day == getMaxMonthDay()) {
     f08:	c3 81       	ldd	r28, Z+3	; 0x03
     f0a:	ca db       	rcall	.-2156   	; 0x6a0 <_Z14getMaxMonthDayv>
     f0c:	c8 13       	cpse	r28, r24
     f0e:	17 c0       	rjmp	.+46     	; 0xf3e <_Z16buttonShortPressv+0xee>
						dateTime.day = 1;
     f10:	e0 e1       	ldi	r30, 0x10	; 16
     f12:	f1 e0       	ldi	r31, 0x01	; 1
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	83 83       	std	Z+3, r24	; 0x03
						if (dateTime.month == 12) {
     f18:	84 81       	ldd	r24, Z+4	; 0x04
     f1a:	8c 30       	cpi	r24, 0x0C	; 12
     f1c:	61 f4       	brne	.+24     	; 0xf36 <_Z16buttonShortPressv+0xe6>
							dateTime.month = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	84 83       	std	Z+4, r24	; 0x04
							if (dateTime.year == 99) {
     f22:	85 81       	ldd	r24, Z+5	; 0x05
     f24:	83 36       	cpi	r24, 0x63	; 99
     f26:	19 f4       	brne	.+6      	; 0xf2e <_Z16buttonShortPressv+0xde>
								dateTime.year = 00;
     f28:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <dateTime+0x5>
     f2c:	0f c0       	rjmp	.+30     	; 0xf4c <_Z16buttonShortPressv+0xfc>
							} else {
								dateTime.year++;
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <dateTime+0x5>
     f34:	0b c0       	rjmp	.+22     	; 0xf4c <_Z16buttonShortPressv+0xfc>
							}
						} else {
							dateTime.month++;
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <dateTime+0x4>
     f3c:	07 c0       	rjmp	.+14     	; 0xf4c <_Z16buttonShortPressv+0xfc>
						}
					} else {
						dateTime.day++;
     f3e:	cf 5f       	subi	r28, 0xFF	; 255
     f40:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <dateTime+0x3>
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <_Z16buttonShortPressv+0xfc>
					}
				} else {
					dateTime.hour++;
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <dateTime+0x2>
				}
				hourBeep.lastHour = dateTime.hour;
     f4c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <dateTime+0x2>
     f50:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <hourBeep+0x2>
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <_Z16buttonShortPressv+0x10c>
			} else {
				dateTime.min++;
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dateTime+0x1>
			}
			etching.lastMin = dateTime.min;
     f5c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dateTime+0x1>
     f60:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <etching+0x1>
		}
		dateTime.sec = 0;
     f64:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dateTime>
		editValue.value = 0;
     f68:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <editValue+0x1>
		prevSec = 0;
     f6c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		ds1307_setdate(dateTime);
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <dateTime+0x1>
     f76:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <dateTime+0x2>
     f7a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <dateTime+0x3>
     f7e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dateTime+0x4>
     f82:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dateTime+0x5>
     f86:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dateTime+0x6>
     f8a:	04 de       	rcall	.-1016   	; 0xb94 <_Z14ds1307_setdate8DateTime>
		resetCorrectionParams();
     f8c:	a5 da       	rcall	.-2742   	; 0x4d8 <_Z21resetCorrectionParamsv>
		return;
     f8e:	21 c0       	rjmp	.+66     	; 0xfd2 <_Z16buttonShortPressv+0x182>
	} 
	
	switch(button.num) {
     f90:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <button+0x2>
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	19 f0       	breq	.+6      	; 0xf9e <_Z16buttonShortPressv+0x14e>
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	39 f0       	breq	.+14     	; 0xfaa <_Z16buttonShortPressv+0x15a>
     f9c:	0b c0       	rjmp	.+22     	; 0xfb4 <_Z16buttonShortPressv+0x164>
		case 1: editValue.value++; break;
     f9e:	e2 e8       	ldi	r30, 0x82	; 130
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	81 81       	ldd	r24, Z+1	; 0x01
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	81 83       	std	Z+1, r24	; 0x01
     fa8:	05 c0       	rjmp	.+10     	; 0xfb4 <_Z16buttonShortPressv+0x164>
		case 2: editValue.value--; break;
     faa:	e2 e8       	ldi	r30, 0x82	; 130
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	81 81       	ldd	r24, Z+1	; 0x01
     fb0:	81 50       	subi	r24, 0x01	; 1
     fb2:	81 83       	std	Z+1, r24	; 0x01
	}
	
	if (editValue.value > editValue.max) {
     fb4:	e2 e8       	ldi	r30, 0x82	; 130
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	81 81       	ldd	r24, Z+1	; 0x01
     fba:	92 81       	ldd	r25, Z+2	; 0x02
     fbc:	98 17       	cp	r25, r24
     fbe:	1c f4       	brge	.+6      	; 0xfc6 <_Z16buttonShortPressv+0x176>
		editValue.value = editValue.min;
     fc0:	83 81       	ldd	r24, Z+3	; 0x03
     fc2:	81 83       	std	Z+1, r24	; 0x01
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <_Z16buttonShortPressv+0x182>
	} else if (editValue.value < editValue.min) {
     fc6:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <editValue+0x3>
     fca:	82 17       	cp	r24, r18
     fcc:	14 f4       	brge	.+4      	; 0xfd2 <_Z16buttonShortPressv+0x182>
		editValue.value = editValue.max;
     fce:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <editValue+0x1>
	}
}
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <_Z20firstButtonLongPressv>:

void firstButtonLongPress() {
	if (button.notInclude) {
     fd6:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <button+0x1>
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <_Z20firstButtonLongPressv+0xe>
		button.notInclude = false;
     fde:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <button+0x1>
		return;
     fe2:	08 95       	ret
	}
	switch(modeWork) {
     fe4:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <modeWork>
     fe8:	8e 2f       	mov	r24, r30
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	fc 01       	movw	r30, r24
     fee:	32 97       	sbiw	r30, 0x02	; 2
     ff0:	e4 31       	cpi	r30, 0x14	; 20
     ff2:	f1 05       	cpc	r31, r1
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <_Z20firstButtonLongPressv+0x22>
     ff6:	f8 c0       	rjmp	.+496    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
     ff8:	e5 5e       	subi	r30, 0xE5	; 229
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	09 94       	ijmp
		case mw_SetMin:
			dateTime.min = editValue.value;
     ffe:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
    1002:	38 2f       	mov	r19, r24
    1004:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dateTime+0x1>
			etching.lastMin = dateTime.min;
    1008:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <etching+0x1>
			ds1307_setdate(dateTime);
    100c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <dateTime>
    1010:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <dateTime+0x2>
    1014:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <dateTime+0x3>
    1018:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dateTime+0x4>
    101c:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dateTime+0x5>
    1020:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dateTime+0x6>
    1024:	b7 dd       	rcall	.-1170   	; 0xb94 <_Z14ds1307_setdate8DateTime>
			alarm.lastDay = 0;
    1026:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm+0x2>
			resetCorrectionParams();
    102a:	56 da       	rcall	.-2900   	; 0x4d8 <_Z21resetCorrectionParamsv>
			break;
    102c:	dd c0       	rjmp	.+442    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetHour:
			dateTime.hour = editValue.value;
    102e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
    1032:	48 2f       	mov	r20, r24
    1034:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <dateTime+0x2>
			hourBeep.lastHour = dateTime.hour;
    1038:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <hourBeep+0x2>
			ds1307_setdate(dateTime);
    103c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <dateTime>
    1040:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <dateTime+0x1>
    1044:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <dateTime+0x3>
    1048:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dateTime+0x4>
    104c:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dateTime+0x5>
    1050:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dateTime+0x6>
    1054:	9f dd       	rcall	.-1218   	; 0xb94 <_Z14ds1307_setdate8DateTime>
			alarm.lastDay = 0;
    1056:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm+0x2>
			resetCorrectionParams();
    105a:	3e da       	rcall	.-2948   	; 0x4d8 <_Z21resetCorrectionParamsv>
			break;
    105c:	c5 c0       	rjmp	.+394    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetYear:
			dateTime.year = editValue.value;
    105e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
    1062:	78 2f       	mov	r23, r24
    1064:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <dateTime+0x5>
			ds1307_setdate(dateTime);
    1068:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <dateTime>
    106c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <dateTime+0x1>
    1070:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <dateTime+0x2>
    1074:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <dateTime+0x3>
    1078:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dateTime+0x4>
    107c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dateTime+0x6>
    1080:	89 dd       	rcall	.-1262   	; 0xb94 <_Z14ds1307_setdate8DateTime>
			alarm.lastDay = 0;
    1082:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm+0x2>
			resetCorrectionParams();
    1086:	28 da       	rcall	.-2992   	; 0x4d8 <_Z21resetCorrectionParamsv>
			break;
    1088:	af c0       	rjmp	.+350    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetMonth:
			dateTime.month = editValue.value;
    108a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
    108e:	68 2f       	mov	r22, r24
    1090:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <dateTime+0x4>
			ds1307_setdate(dateTime);
    1094:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <dateTime>
    1098:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <dateTime+0x1>
    109c:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <dateTime+0x2>
    10a0:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <dateTime+0x3>
    10a4:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dateTime+0x5>
    10a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dateTime+0x6>
    10ac:	73 dd       	rcall	.-1306   	; 0xb94 <_Z14ds1307_setdate8DateTime>
			alarm.lastDay = 0;
    10ae:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm+0x2>
			resetCorrectionParams();
    10b2:	12 da       	rcall	.-3036   	; 0x4d8 <_Z21resetCorrectionParamsv>
			break;
    10b4:	99 c0       	rjmp	.+306    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetDay:
			dateTime.day = editValue.value;
    10b6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
    10ba:	58 2f       	mov	r21, r24
    10bc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <dateTime+0x3>
			alarm.lastDay = 0;
    10c0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm+0x2>
			ds1307_setdate(dateTime);
    10c4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <dateTime>
    10c8:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <dateTime+0x1>
    10cc:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <dateTime+0x2>
    10d0:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dateTime+0x4>
    10d4:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dateTime+0x5>
    10d8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dateTime+0x6>
    10dc:	5b dd       	rcall	.-1354   	; 0xb94 <_Z14ds1307_setdate8DateTime>
			resetCorrectionParams();
    10de:	fc d9       	rcall	.-3080   	; 0x4d8 <_Z21resetCorrectionParamsv>
			break;
    10e0:	83 c0       	rjmp	.+262    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetIsAlarmActive:
			alarm.isActive = editValue.value;
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
    10e8:	81 11       	cpse	r24, r1
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <_Z20firstButtonLongPressv+0x118>
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	ef ed       	ldi	r30, 0xDF	; 223
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	60 83       	st	Z, r22
			alarm.lastDay = 0;
    10f4:	12 82       	std	Z+2, r1	; 0x02
			eeprom_update_byte(&eeprom_isAlarmActive, alarm.isActive);
    10f6:	86 e0       	ldi	r24, 0x06	; 6
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	f4 d6       	rcall	.+3560   	; 0x1ee4 <eeprom_update_byte>
			break;
    10fc:	75 c0       	rjmp	.+234    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetAlarmMin:
			alarm.startMin = editValue.value;
    10fe:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    1102:	ef ed       	ldi	r30, 0xDF	; 223
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	64 83       	std	Z+4, r22	; 0x04
			alarm.lastDay = 0;
    1108:	12 82       	std	Z+2, r1	; 0x02
			eeprom_update_byte(&eeprom_alarmMin, alarm.startMin);
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	ea d6       	rcall	.+3540   	; 0x1ee4 <eeprom_update_byte>
			break;
    1110:	6b c0       	rjmp	.+214    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetAlarmHour:
			alarm.startHour = editValue.value;
    1112:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    1116:	ef ed       	ldi	r30, 0xDF	; 223
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	63 83       	std	Z+3, r22	; 0x03
			alarm.lastDay = 0;
    111c:	12 82       	std	Z+2, r1	; 0x02
			eeprom_update_byte(&eeprom_alarmHour, alarm.startHour);
    111e:	85 e0       	ldi	r24, 0x05	; 5
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	e0 d6       	rcall	.+3520   	; 0x1ee4 <eeprom_update_byte>
			break;
    1124:	61 c0       	rjmp	.+194    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetDateShow:
			showDate.isActive = editValue.value;
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
    112c:	81 11       	cpse	r24, r1
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <_Z20firstButtonLongPressv+0x15c>
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <showDate+0x2>
			eeprom_update_byte(&eeprom_showDateIsActive, showDate.isActive);
    1136:	89 e0       	ldi	r24, 0x09	; 9
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	d4 d6       	rcall	.+3496   	; 0x1ee4 <eeprom_update_byte>
			break;
    113c:	55 c0       	rjmp	.+170    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetDateShowStop:
			showDate.stop = editValue.value;
    113e:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    1142:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <showDate+0x1>
			eeprom_update_byte(&eeprom_showDateStop, showDate.stop);
    1146:	87 e0       	ldi	r24, 0x07	; 7
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	cc d6       	rcall	.+3480   	; 0x1ee4 <eeprom_update_byte>
			break;
    114c:	4d c0       	rjmp	.+154    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetDateShowStart:
			showDate.start = editValue.value;
    114e:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    1152:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <showDate>
			eeprom_update_byte(&eeprom_showDateStart, showDate.start);
    1156:	88 e0       	ldi	r24, 0x08	; 8
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	c4 d6       	rcall	.+3464   	; 0x1ee4 <eeprom_update_byte>
			break;
    115c:	45 c0       	rjmp	.+138    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetCorrectionTurn:
			correction.isForward = editValue.value;
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
    1164:	81 11       	cpse	r24, r1
    1166:	01 c0       	rjmp	.+2      	; 0x116a <_Z20firstButtonLongPressv+0x194>
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <correction>
			eeprom_update_byte(&eeprom_correctionIsForward, correction.isForward);
    116e:	8f e0       	ldi	r24, 0x0F	; 15
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	b8 d6       	rcall	.+3440   	; 0x1ee4 <eeprom_update_byte>
			resetCorrectionParams();
    1174:	b1 d9       	rcall	.-3230   	; 0x4d8 <_Z21resetCorrectionParamsv>
			break;
    1176:	38 c0       	rjmp	.+112    	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetCorrectionTime:
			correction.value = editValue.value;
    1178:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    117c:	60 93 87 00 	sts	0x0087, r22	; 0x800087 <correction+0x1>
			eeprom_update_byte(&eeprom_correctionValue, correction.value);
    1180:	8e e0       	ldi	r24, 0x0E	; 14
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	af d6       	rcall	.+3422   	; 0x1ee4 <eeprom_update_byte>
			resetCorrectionParams();
    1186:	a8 d9       	rcall	.-3248   	; 0x4d8 <_Z21resetCorrectionParamsv>
			break;
    1188:	2f c0       	rjmp	.+94     	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetCorrectionInterval:
			correction.interval = editValue.value;
    118a:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    118e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <correction+0x2>
			eeprom_update_byte(&eeprom_correctionInterval, correction.interval);
    1192:	8d e0       	ldi	r24, 0x0D	; 13
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a6 d6       	rcall	.+3404   	; 0x1ee4 <eeprom_update_byte>
			resetCorrectionParams();
    1198:	9f d9       	rcall	.-3266   	; 0x4d8 <_Z21resetCorrectionParamsv>
			break;
    119a:	26 c0       	rjmp	.+76     	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetIsNightModeActive:
			nightMode.modeType = editValue.value;
    119c:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    11a0:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <nightMode+0x2>
			eeprom_update_byte(&eeprom_nightMode, nightMode.modeType);
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9d d6       	rcall	.+3386   	; 0x1ee4 <eeprom_update_byte>
			break;
    11aa:	1e c0       	rjmp	.+60     	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetHourNightModeStop:
			nightMode.hourStop = editValue.value;
    11ac:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    11b0:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <nightMode+0x7>
			eeprom_update_byte(&eeprom_hourNightModeStop, nightMode.hourStop);
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	95 d6       	rcall	.+3370   	; 0x1ee4 <eeprom_update_byte>
			break;
    11ba:	16 c0       	rjmp	.+44     	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetHourNightModeStart:
			nightMode.hourStart = editValue.value;
    11bc:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    11c0:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <nightMode+0x6>
			eeprom_update_byte(&eeprom_hourNightModeStart, nightMode.hourStart);
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	8d d6       	rcall	.+3354   	; 0x1ee4 <eeprom_update_byte>
			break;
    11ca:	0e c0       	rjmp	.+28     	; 0x11e8 <_Z20firstButtonLongPressv+0x212>
		case mw_SetThrashhold:
			nightMode.thresholdInit = editValue.value;
    11cc:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
    11d0:	e2 e9       	ldi	r30, 0x92	; 146
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	65 83       	std	Z+5, r22	; 0x05
			nightMode.threshold =  20 * nightMode.thresholdInit;
    11d6:	24 e1       	ldi	r18, 0x14	; 20
    11d8:	62 9f       	mul	r22, r18
    11da:	c0 01       	movw	r24, r0
    11dc:	11 24       	eor	r1, r1
    11de:	94 83       	std	Z+4, r25	; 0x04
    11e0:	83 83       	std	Z+3, r24	; 0x03
			eeprom_update_byte(&eeprom_nightThreshold, nightMode.thresholdInit);
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	7e d6       	rcall	.+3324   	; 0x1ee4 <eeprom_update_byte>
			break;
	}
	
	if (modeWork == mw_SetThrashhold) {
    11e8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
    11ec:	80 31       	cpi	r24, 0x10	; 16
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <_Z20firstButtonLongPressv+0x222>
		modeWork = mw_SetCorrectionTurn;
    11f0:	83 e1       	ldi	r24, 0x13	; 19
    11f2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <modeWork>
    11f6:	11 c0       	rjmp	.+34     	; 0x121a <_Z20firstButtonLongPressv+0x244>
	} else {
		modeWork = modeWork < mw_LastMW? modeWork + 1 : 0;
    11f8:	85 31       	cpi	r24, 0x15	; 21
    11fa:	10 f4       	brcc	.+4      	; 0x1200 <_Z20firstButtonLongPressv+0x22a>
    11fc:	8f 5f       	subi	r24, 0xFF	; 255
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <_Z20firstButtonLongPressv+0x22c>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <modeWork>
    1206:	09 c0       	rjmp	.+18     	; 0x121a <_Z20firstButtonLongPressv+0x244>
	}
	
	for (uint8_t i = 0; i < 6; i++) {
		tube.isFlash[i] = false;
    1208:	11 92       	st	Z+, r1
		tube.isDisabled[i] = false;
    120a:	15 82       	std	Z+5, r1	; 0x05
		tube.isDoteActive[i] = false;
    120c:	13 86       	std	Z+11, r1	; 0x0b
		modeWork = mw_SetCorrectionTurn;
	} else {
		modeWork = modeWork < mw_LastMW? modeWork + 1 : 0;
	}
	
	for (uint8_t i = 0; i < 6; i++) {
    120e:	e8 17       	cp	r30, r24
    1210:	f9 07       	cpc	r31, r25
    1212:	d1 f7       	brne	.-12     	; 0x1208 <_Z20firstButtonLongPressv+0x232>
		tube.isFlash[i] = false;
		tube.isDisabled[i] = false;
		tube.isDoteActive[i] = false;
	}
		
	editValue.isGrabbed = false;
    1214:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <editValue>
    1218:	08 95       	ret
    121a:	e4 ea       	ldi	r30, 0xA4	; 164
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8a ea       	ldi	r24, 0xAA	; 170
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	f2 cf       	rjmp	.-28     	; 0x1208 <_Z20firstButtonLongPressv+0x232>

00001224 <_Z16buttonControllerv>:
	ADCSRA |= (1 << ADSC);
	while (ADCSRA & (1 << ADSC));
	return ADCW;
}

void buttonController() {
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
	if (etching.isWorking) {
    1236:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <etching>
    123a:	81 11       	cpse	r24, r1
    123c:	c2 c0       	rjmp	.+388    	; 0x13c2 <_Z16buttonControllerv+0x19e>
		return;
	}
	button.adc = getADC(6);
    123e:	86 e0       	ldi	r24, 0x06	; 6
    1240:	97 d9       	rcall	.-3282   	; 0x570 <_Z6getADCh>
    1242:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <button+0x4>
    1246:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <button+0x3>
	uint8_t curButtonNum = 0;

	if (button.adc < 581) {
    124a:	85 34       	cpi	r24, 0x45	; 69
    124c:	22 e0       	ldi	r18, 0x02	; 2
    124e:	92 07       	cpc	r25, r18
    1250:	34 f0       	brlt	.+12     	; 0x125e <_Z16buttonControllerv+0x3a>
		curButtonNum = 2;
	} else if (button.adc < 770) {
		curButtonNum = 1;
	} 
	
	if (curButtonNum > 0) {
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	93 40       	sbci	r25, 0x03	; 3
    1256:	0c f0       	brlt	.+2      	; 0x125a <_Z16buttonControllerv+0x36>
    1258:	a7 c0       	rjmp	.+334    	; 0x13a8 <_Z16buttonControllerv+0x184>
void buttonController() {
	if (etching.isWorking) {
		return;
	}
	button.adc = getADC(6);
	uint8_t curButtonNum = 0;
    125a:	c1 e0       	ldi	r28, 0x01	; 1
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <_Z16buttonControllerv+0x3c>

	if (button.adc < 581) {
		curButtonNum = 2;
    125e:	c2 e0       	ldi	r28, 0x02	; 2
	} else if (button.adc < 770) {
		curButtonNum = 1;
	} 
	
	if (curButtonNum > 0) {
		if (button.bounceTime == 0) {
    1260:	ea ec       	ldi	r30, 0xCA	; 202
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	25 81       	ldd	r18, Z+5	; 0x05
    1266:	36 81       	ldd	r19, Z+6	; 0x06
    1268:	47 81       	ldd	r20, Z+7	; 0x07
    126a:	50 85       	ldd	r21, Z+8	; 0x08
    126c:	61 85       	ldd	r22, Z+9	; 0x09
    126e:	72 85       	ldd	r23, Z+10	; 0x0a
    1270:	83 85       	ldd	r24, Z+11	; 0x0b
    1272:	94 85       	ldd	r25, Z+12	; 0x0c
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	0e d6       	rcall	.+3100   	; 0x1e94 <__cmpdi2_s8>
    1278:	69 f4       	brne	.+26     	; 0x1294 <_Z16buttonControllerv+0x70>
			button.bounceTime = millis();
    127a:	63 d7       	rcall	.+3782   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    127c:	ea ec       	ldi	r30, 0xCA	; 202
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	25 83       	std	Z+5, r18	; 0x05
    1282:	36 83       	std	Z+6, r19	; 0x06
    1284:	47 83       	std	Z+7, r20	; 0x07
    1286:	50 87       	std	Z+8, r21	; 0x08
    1288:	61 87       	std	Z+9, r22	; 0x09
    128a:	72 87       	std	Z+10, r23	; 0x0a
    128c:	83 87       	std	Z+11, r24	; 0x0b
    128e:	94 87       	std	Z+12, r25	; 0x0c
			button.num = curButtonNum;
    1290:	c2 83       	std	Z+2, r28	; 0x02
    1292:	97 c0       	rjmp	.+302    	; 0x13c2 <_Z16buttonControllerv+0x19e>
		} else if (millis() - button.bounceTime > 60) {
    1294:	56 d7       	rcall	.+3756   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    1296:	ea ec       	ldi	r30, 0xCA	; 202
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	a5 80       	ldd	r10, Z+5	; 0x05
    129c:	b6 80       	ldd	r11, Z+6	; 0x06
    129e:	c7 80       	ldd	r12, Z+7	; 0x07
    12a0:	d0 84       	ldd	r13, Z+8	; 0x08
    12a2:	e1 84       	ldd	r14, Z+9	; 0x09
    12a4:	f2 84       	ldd	r15, Z+10	; 0x0a
    12a6:	03 85       	ldd	r16, Z+11	; 0x0b
    12a8:	14 85       	ldd	r17, Z+12	; 0x0c
    12aa:	e2 d5       	rcall	.+3012   	; 0x1e70 <__subdi3>
    12ac:	ac e3       	ldi	r26, 0x3C	; 60
    12ae:	f2 d5       	rcall	.+3044   	; 0x1e94 <__cmpdi2_s8>
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <_Z16buttonControllerv+0x90>
    12b2:	08 f4       	brcc	.+2      	; 0x12b6 <_Z16buttonControllerv+0x92>
    12b4:	86 c0       	rjmp	.+268    	; 0x13c2 <_Z16buttonControllerv+0x19e>
			if (alarm.beeper.canBeep) {
    12b6:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <alarm+0x6>
    12ba:	88 23       	and	r24, r24
    12bc:	41 f0       	breq	.+16     	; 0x12ce <_Z16buttonControllerv+0xaa>
				alarm.isTurnedOff = true;
    12be:	ef ed       	ldi	r30, 0xDF	; 223
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	81 83       	std	Z+1, r24	; 0x01
				alarm.beeper.canBeep = false;
    12c6:	16 82       	std	Z+6, r1	; 0x06
				button.notInclude = true;
    12c8:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <button+0x1>
    12cc:	7a c0       	rjmp	.+244    	; 0x13c2 <_Z16buttonControllerv+0x19e>
			} else if (button.longPressTime == 0) {
    12ce:	ea ec       	ldi	r30, 0xCA	; 202
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	25 85       	ldd	r18, Z+13	; 0x0d
    12d4:	36 85       	ldd	r19, Z+14	; 0x0e
    12d6:	47 85       	ldd	r20, Z+15	; 0x0f
    12d8:	50 89       	ldd	r21, Z+16	; 0x10
    12da:	61 89       	ldd	r22, Z+17	; 0x11
    12dc:	72 89       	ldd	r23, Z+18	; 0x12
    12de:	83 89       	ldd	r24, Z+19	; 0x13
    12e0:	94 89       	ldd	r25, Z+20	; 0x14
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	d7 d5       	rcall	.+2990   	; 0x1e94 <__cmpdi2_s8>
    12e6:	61 f4       	brne	.+24     	; 0x1300 <_Z16buttonControllerv+0xdc>
				button.longPressTime = millis();
    12e8:	2c d7       	rcall	.+3672   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    12ea:	ea ec       	ldi	r30, 0xCA	; 202
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	25 87       	std	Z+13, r18	; 0x0d
    12f0:	36 87       	std	Z+14, r19	; 0x0e
    12f2:	47 87       	std	Z+15, r20	; 0x0f
    12f4:	50 8b       	std	Z+16, r21	; 0x10
    12f6:	61 8b       	std	Z+17, r22	; 0x11
    12f8:	72 8b       	std	Z+18, r23	; 0x12
    12fa:	83 8b       	std	Z+19, r24	; 0x13
    12fc:	94 8b       	std	Z+20, r25	; 0x14
    12fe:	61 c0       	rjmp	.+194    	; 0x13c2 <_Z16buttonControllerv+0x19e>
			} else if (millis() - button.longPressTime > 1300) {
    1300:	20 d7       	rcall	.+3648   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    1302:	ea ec       	ldi	r30, 0xCA	; 202
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	a5 84       	ldd	r10, Z+13	; 0x0d
    1308:	b6 84       	ldd	r11, Z+14	; 0x0e
    130a:	c7 84       	ldd	r12, Z+15	; 0x0f
    130c:	d0 88       	ldd	r13, Z+16	; 0x10
    130e:	e1 88       	ldd	r14, Z+17	; 0x11
    1310:	f2 88       	ldd	r15, Z+18	; 0x12
    1312:	03 89       	ldd	r16, Z+19	; 0x13
    1314:	14 89       	ldd	r17, Z+20	; 0x14
    1316:	ac d5       	rcall	.+2904   	; 0x1e70 <__subdi3>
    1318:	24 31       	cpi	r18, 0x14	; 20
    131a:	35 40       	sbci	r19, 0x05	; 5
    131c:	41 05       	cpc	r20, r1
    131e:	51 05       	cpc	r21, r1
    1320:	61 05       	cpc	r22, r1
    1322:	71 05       	cpc	r23, r1
    1324:	81 05       	cpc	r24, r1
    1326:	91 05       	cpc	r25, r1
    1328:	09 f0       	breq	.+2      	; 0x132c <_Z16buttonControllerv+0x108>
    132a:	08 f4       	brcc	.+2      	; 0x132e <_Z16buttonControllerv+0x10a>
    132c:	4a c0       	rjmp	.+148    	; 0x13c2 <_Z16buttonControllerv+0x19e>
				button.isLongPress = true;
    132e:	ea ec       	ldi	r30, 0xCA	; 202
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 83       	st	Z, r24
				returnTime = 10;
    1336:	8a e0       	ldi	r24, 0x0A	; 10
    1338:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <returnTime>
				switch(button.num) {
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	19 f0       	breq	.+6      	; 0x1348 <_Z16buttonControllerv+0x124>
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	19 f0       	breq	.+6      	; 0x134c <_Z16buttonControllerv+0x128>
    1346:	1a c0       	rjmp	.+52     	; 0x137c <_Z16buttonControllerv+0x158>
					case 1:
						firstButtonLongPress();
    1348:	46 de       	rcall	.-884    	; 0xfd6 <_Z20firstButtonLongPressv>
						break;
    134a:	18 c0       	rjmp	.+48     	; 0x137c <_Z16buttonControllerv+0x158>
					case 2:
						if (modeWork == mw_Clock && !nightMode.isActive) {
    134c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
    1350:	81 11       	cpse	r24, r1
    1352:	14 c0       	rjmp	.+40     	; 0x137c <_Z16buttonControllerv+0x158>
    1354:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <nightMode>
    1358:	81 11       	cpse	r24, r1
    135a:	10 c0       	rjmp	.+32     	; 0x137c <_Z16buttonControllerv+0x158>
							isLedActive = !isLedActive;
    135c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <isLedActive>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	89 27       	eor	r24, r25
    1364:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <isLedActive>
							switchPort(PORTB,ledPin, isLedActive);
    1368:	88 23       	and	r24, r24
    136a:	11 f0       	breq	.+4      	; 0x1370 <_Z16buttonControllerv+0x14c>
    136c:	c2 9a       	sbi	0x18, 2	; 24
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <_Z16buttonControllerv+0x14e>
    1370:	c2 98       	cbi	0x18, 2	; 24
							eeprom_update_byte(&eeprom_ledState, isLedActive);
    1372:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <isLedActive>
    1376:	81 e1       	ldi	r24, 0x11	; 17
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	b4 d5       	rcall	.+2920   	; 0x1ee4 <eeprom_update_byte>
						}
						break;
				}
				button.longPressTime = millis();
    137c:	e2 d6       	rcall	.+3524   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    137e:	ea ec       	ldi	r30, 0xCA	; 202
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	25 87       	std	Z+13, r18	; 0x0d
    1384:	36 87       	std	Z+14, r19	; 0x0e
    1386:	47 87       	std	Z+15, r20	; 0x0f
    1388:	50 8b       	std	Z+16, r21	; 0x10
    138a:	61 8b       	std	Z+17, r22	; 0x11
    138c:	72 8b       	std	Z+18, r23	; 0x12
    138e:	83 8b       	std	Z+19, r24	; 0x13
    1390:	94 8b       	std	Z+20, r25	; 0x14
    1392:	17 c0       	rjmp	.+46     	; 0x13c2 <_Z16buttonControllerv+0x19e>
			}
		}
	}
	
	if (curButtonNum == 0 && button.bounceTime != 0 ) {
		if (!button.isLongPress) {
    1394:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <button>
    1398:	81 11       	cpse	r24, r1
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <_Z16buttonControllerv+0x180>
			returnTime = 10;
    139c:	8a e0       	ldi	r24, 0x0A	; 10
    139e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <returnTime>
			buttonShortPress();
    13a2:	56 dd       	rcall	.-1364   	; 0xe50 <_Z16buttonShortPressv>
		}
		resetButtons();
    13a4:	cf d8       	rcall	.-3682   	; 0x544 <_Z12resetButtonsv>
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <_Z16buttonControllerv+0x19e>
				button.longPressTime = millis();
			}
		}
	}
	
	if (curButtonNum == 0 && button.bounceTime != 0 ) {
    13a8:	ea ec       	ldi	r30, 0xCA	; 202
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	25 81       	ldd	r18, Z+5	; 0x05
    13ae:	36 81       	ldd	r19, Z+6	; 0x06
    13b0:	47 81       	ldd	r20, Z+7	; 0x07
    13b2:	50 85       	ldd	r21, Z+8	; 0x08
    13b4:	61 85       	ldd	r22, Z+9	; 0x09
    13b6:	72 85       	ldd	r23, Z+10	; 0x0a
    13b8:	83 85       	ldd	r24, Z+11	; 0x0b
    13ba:	94 85       	ldd	r25, Z+12	; 0x0c
    13bc:	a0 e0       	ldi	r26, 0x00	; 0
    13be:	6a d5       	rcall	.+2772   	; 0x1e94 <__cmpdi2_s8>
    13c0:	49 f7       	brne	.-46     	; 0x1394 <_Z16buttonControllerv+0x170>
			returnTime = 10;
			buttonShortPress();
		}
		resetButtons();
	}
}
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	bf 90       	pop	r11
    13d2:	af 90       	pop	r10
    13d4:	08 95       	ret

000013d6 <_Z14ds1307_getdatev>:
	i2c_write(ds1307_dec2bcd(dateTime.year));
	i2c_write(0x00);
	i2c_stop();
}

DateTime ds1307_getdate() {
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	27 97       	sbiw	r28, 0x07	; 7
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
    13f6:	80 ed       	ldi	r24, 0xD0	; 208
    13f8:	c6 d4       	rcall	.+2444   	; 0x1d86 <_Z14i2c_start_waith>
	i2c_write(0x00);
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	ea d4       	rcall	.+2516   	; 0x1dd2 <_Z9i2c_writeh>
	i2c_stop();
    13fe:	e3 d4       	rcall	.+2502   	; 0x1dc6 <_Z8i2c_stopv>
	DateTime dateTime;
	i2c_rep_start(DS1307_ADDR | I2C_READ);
    1400:	81 ed       	ldi	r24, 0xD1	; 209
    1402:	df d4       	rcall	.+2494   	; 0x1dc2 <_Z13i2c_rep_starth>
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
    1404:	f3 d4       	rcall	.+2534   	; 0x1dec <_Z11i2c_readAckv>
    1406:	8f 77       	andi	r24, 0x7F	; 127
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	35 95       	asr	r19
    140e:	27 95       	ror	r18
    1410:	35 95       	asr	r19
    1412:	27 95       	ror	r18
    1414:	35 95       	asr	r19
    1416:	27 95       	ror	r18
    1418:	35 95       	asr	r19
    141a:	27 95       	ror	r18
    141c:	92 2f       	mov	r25, r18
    141e:	99 0f       	add	r25, r25
    1420:	29 0f       	add	r18, r25
    1422:	22 0f       	add	r18, r18
    1424:	f8 2e       	mov	r15, r24
    1426:	f2 1a       	sub	r15, r18
	i2c_write(0x00);
	i2c_stop();
	DateTime dateTime;
	i2c_rep_start(DS1307_ADDR | I2C_READ);
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
    1428:	e1 d4       	rcall	.+2498   	; 0x1dec <_Z11i2c_readAckv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	35 95       	asr	r19
    1430:	27 95       	ror	r18
    1432:	35 95       	asr	r19
    1434:	27 95       	ror	r18
    1436:	35 95       	asr	r19
    1438:	27 95       	ror	r18
    143a:	35 95       	asr	r19
    143c:	27 95       	ror	r18
    143e:	92 2f       	mov	r25, r18
    1440:	99 0f       	add	r25, r25
    1442:	29 0f       	add	r18, r25
    1444:	22 0f       	add	r18, r18
    1446:	08 2f       	mov	r16, r24
    1448:	02 1b       	sub	r16, r18
	i2c_stop();
	DateTime dateTime;
	i2c_rep_start(DS1307_ADDR | I2C_READ);
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
    144a:	d0 d4       	rcall	.+2464   	; 0x1dec <_Z11i2c_readAckv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	35 95       	asr	r19
    1452:	27 95       	ror	r18
    1454:	35 95       	asr	r19
    1456:	27 95       	ror	r18
    1458:	35 95       	asr	r19
    145a:	27 95       	ror	r18
    145c:	35 95       	asr	r19
    145e:	27 95       	ror	r18
    1460:	92 2f       	mov	r25, r18
    1462:	99 0f       	add	r25, r25
    1464:	29 0f       	add	r18, r25
    1466:	22 0f       	add	r18, r18
    1468:	18 2f       	mov	r17, r24
    146a:	12 1b       	sub	r17, r18
	DateTime dateTime;
	i2c_rep_start(DS1307_ADDR | I2C_READ);
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
    146c:	bf d4       	rcall	.+2430   	; 0x1dec <_Z11i2c_readAckv>
	dateTime.day = ds1307_bcd2dec(i2c_readAck());
    146e:	be d4       	rcall	.+2428   	; 0x1dec <_Z11i2c_readAckv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	35 95       	asr	r19
    1476:	27 95       	ror	r18
    1478:	35 95       	asr	r19
    147a:	27 95       	ror	r18
    147c:	35 95       	asr	r19
    147e:	27 95       	ror	r18
    1480:	35 95       	asr	r19
    1482:	27 95       	ror	r18
    1484:	92 2f       	mov	r25, r18
    1486:	99 0f       	add	r25, r25
    1488:	29 0f       	add	r18, r25
    148a:	22 0f       	add	r18, r18
    148c:	e8 2e       	mov	r14, r24
    148e:	e2 1a       	sub	r14, r18
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	dateTime.day = ds1307_bcd2dec(i2c_readAck());
	dateTime.month = ds1307_bcd2dec(i2c_readAck());
    1490:	ad d4       	rcall	.+2394   	; 0x1dec <_Z11i2c_readAckv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	35 95       	asr	r19
    1498:	27 95       	ror	r18
    149a:	35 95       	asr	r19
    149c:	27 95       	ror	r18
    149e:	35 95       	asr	r19
    14a0:	27 95       	ror	r18
    14a2:	35 95       	asr	r19
    14a4:	27 95       	ror	r18
    14a6:	92 2f       	mov	r25, r18
    14a8:	99 0f       	add	r25, r25
    14aa:	29 0f       	add	r18, r25
    14ac:	22 0f       	add	r18, r18
    14ae:	c8 2e       	mov	r12, r24
    14b0:	c2 1a       	sub	r12, r18
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	dateTime.day = ds1307_bcd2dec(i2c_readAck());
	dateTime.month = ds1307_bcd2dec(i2c_readAck());
	dateTime.year = ds1307_bcd2dec(i2c_readNak());
    14b2:	a3 d4       	rcall	.+2374   	; 0x1dfa <_Z11i2c_readNakv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	35 95       	asr	r19
    14ba:	27 95       	ror	r18
    14bc:	35 95       	asr	r19
    14be:	27 95       	ror	r18
    14c0:	35 95       	asr	r19
    14c2:	27 95       	ror	r18
    14c4:	35 95       	asr	r19
    14c6:	27 95       	ror	r18
    14c8:	92 2f       	mov	r25, r18
    14ca:	99 0f       	add	r25, r25
    14cc:	29 0f       	add	r18, r25
    14ce:	22 0f       	add	r18, r18
    14d0:	d8 2e       	mov	r13, r24
    14d2:	d2 1a       	sub	r13, r18
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	dateTime.day = ds1307_bcd2dec(i2c_readAck());
	dateTime.month = ds1307_bcd2dec(i2c_readAck());
	dateTime.year = ds1307_bcd2dec(i2c_readNak());
	i2c_stop();
    14d4:	78 d4       	rcall	.+2288   	; 0x1dc6 <_Z8i2c_stopv>
	return dateTime;
}
    14d6:	2f 2d       	mov	r18, r15
    14d8:	30 2f       	mov	r19, r16
    14da:	41 2f       	mov	r20, r17
    14dc:	5e 2d       	mov	r21, r14
    14de:	6c 2d       	mov	r22, r12
    14e0:	7d 2d       	mov	r23, r13
    14e2:	8f 81       	ldd	r24, Y+7	; 0x07
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	27 96       	adiw	r28, 0x07	; 7
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	08 95       	ret

00001504 <_Z4initv>:
#include "Utilities/main.h"

void init() {
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
	DDRD = 0xFC;
    150e:	8c ef       	ldi	r24, 0xFC	; 252
    1510:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xC7;
    1512:	87 ec       	ldi	r24, 0xC7	; 199
    1514:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0F;
    1516:	8f e0       	ldi	r24, 0x0F	; 15
    1518:	84 bb       	out	0x14, r24	; 20
	ADMUX = (1 << REFS0);
    151a:	80 e4       	ldi	r24, 0x40	; 64
    151c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    151e:	86 b1       	in	r24, 0x06	; 6
    1520:	87 68       	ori	r24, 0x87	; 135
    1522:	86 b9       	out	0x06, r24	; 6
	
	i2c_init();
    1524:	0e d4       	rcall	.+2076   	; 0x1d42 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1526:	87 ec       	ldi	r24, 0xC7	; 199
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <_Z4initv+0x26>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <_Z4initv+0x2c>
    1530:	00 00       	nop
	_delay_us(100);
	dateTime = ds1307_getdate();
    1532:	51 df       	rcall	.-350    	; 0x13d6 <_Z14ds1307_getdatev>
    1534:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <dateTime>
    1538:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <dateTime+0x1>
    153c:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <dateTime+0x2>
    1540:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <dateTime+0x3>
    1544:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dateTime+0x4>
    1548:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dateTime+0x5>
    154c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dateTime+0x6>
	
	bright.level = eeprom_read_byte(&eeprom_bright);
    1550:	82 e1       	ldi	r24, 0x12	; 18
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	bf d4       	rcall	.+2430   	; 0x1ed4 <eeprom_read_byte>
    1556:	e8 ec       	ldi	r30, 0xC8	; 200
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 83       	st	Z, r24
	bright.dayLevel = bright.level;
    155c:	81 83       	std	Z+1, r24	; 0x01
	
	hourBeep.isActive = eeprom_read_byte(&eeprom_isHourBeepActive);
    155e:	80 e1       	ldi	r24, 0x10	; 16
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	b8 d4       	rcall	.+2416   	; 0x1ed4 <eeprom_read_byte>
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	81 11       	cpse	r24, r1
    1568:	01 c0       	rjmp	.+2      	; 0x156c <_Z4initv+0x68>
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <hourBeep>
	hourBeep.lastHour = dateTime.hour;
    1570:	e7 ef       	ldi	r30, 0xF7	; 247
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <dateTime+0x2>
    1578:	82 83       	std	Z+2, r24	; 0x02
	hourBeep.manualActivation = false;
    157a:	11 82       	std	Z+1, r1	; 0x01
	hourBeep.beeper.initCount = 2;
    157c:	82 e0       	ldi	r24, 0x02	; 2
    157e:	87 83       	std	Z+7, r24	; 0x07
	hourBeep.beeper.durationActive = 90;
    1580:	8a e5       	ldi	r24, 0x5A	; 90
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	91 87       	std	Z+9, r25	; 0x09
    1586:	80 87       	std	Z+8, r24	; 0x08
	hourBeep.beeper.durationInactive = 50;
    1588:	82 e3       	ldi	r24, 0x32	; 50
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	93 87       	std	Z+11, r25	; 0x0b
    158e:	82 87       	std	Z+10, r24	; 0x0a
	hourBeep.beeper.waitingTime = 0;
    1590:	15 86       	std	Z+13, r1	; 0x0d
    1592:	14 86       	std	Z+12, r1	; 0x0c
	hourBeep.beeper.canBeep = false;
    1594:	14 82       	std	Z+4, r1	; 0x04
	hourBeep.beeper.isCanInit = false;
    1596:	13 82       	std	Z+3, r1	; 0x03
	hourBeep.beeper.isPinActive = false;
    1598:	15 82       	std	Z+5, r1	; 0x05
	
	alarm.isActive = eeprom_read_byte(&eeprom_isAlarmActive);
    159a:	86 e0       	ldi	r24, 0x06	; 6
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9a d4       	rcall	.+2356   	; 0x1ed4 <eeprom_read_byte>
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	81 11       	cpse	r24, r1
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <_Z4initv+0xa4>
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <alarm>
	alarm.startHour = eeprom_read_byte(&eeprom_alarmHour);
    15ac:	85 e0       	ldi	r24, 0x05	; 5
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	91 d4       	rcall	.+2338   	; 0x1ed4 <eeprom_read_byte>
    15b2:	cf ed       	ldi	r28, 0xDF	; 223
    15b4:	d0 e0       	ldi	r29, 0x00	; 0
    15b6:	8b 83       	std	Y+3, r24	; 0x03
	alarm.startMin = eeprom_read_byte(&eeprom_alarmMin);
    15b8:	84 e0       	ldi	r24, 0x04	; 4
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	8b d4       	rcall	.+2326   	; 0x1ed4 <eeprom_read_byte>
    15be:	8c 83       	std	Y+4, r24	; 0x04
	alarm.lastDay = 0;
    15c0:	1a 82       	std	Y+2, r1	; 0x02
	alarm.isTurnedOff = false;
    15c2:	19 82       	std	Y+1, r1	; 0x01
	alarm.beeper.initCount = 5;
    15c4:	85 e0       	ldi	r24, 0x05	; 5
    15c6:	89 87       	std	Y+9, r24	; 0x09
	alarm.beeper.durationActive = 70;
    15c8:	26 e4       	ldi	r18, 0x46	; 70
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3b 87       	std	Y+11, r19	; 0x0b
    15ce:	2a 87       	std	Y+10, r18	; 0x0a
	alarm.beeper.durationInactive = 40;
    15d0:	28 e2       	ldi	r18, 0x28	; 40
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3d 87       	std	Y+13, r19	; 0x0d
    15d6:	2c 87       	std	Y+12, r18	; 0x0c
	alarm.beeper.waitingTime = 700;
    15d8:	2c eb       	ldi	r18, 0xBC	; 188
    15da:	32 e0       	ldi	r19, 0x02	; 2
    15dc:	3f 87       	std	Y+15, r19	; 0x0f
    15de:	2e 87       	std	Y+14, r18	; 0x0e
	alarm.beeper.canBeep = false;
    15e0:	1e 82       	std	Y+6, r1	; 0x06
	alarm.beeper.isCanInit = false;
    15e2:	1d 82       	std	Y+5, r1	; 0x05
	alarm.beeper.isPinActive = false;
    15e4:	1f 82       	std	Y+7, r1	; 0x07
	
	ledBlinking.isCanInit = false;
    15e6:	e6 e6       	ldi	r30, 0x66	; 102
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	10 82       	st	Z, r1
	ledBlinking.durationActive = 100;
    15ec:	24 e6       	ldi	r18, 0x64	; 100
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	34 83       	std	Z+4, r19	; 0x04
    15f2:	23 83       	std	Z+3, r18	; 0x03
	ledBlinking.durationInactive = 50;
    15f4:	22 e3       	ldi	r18, 0x32	; 50
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	36 83       	std	Z+6, r19	; 0x06
    15fa:	25 83       	std	Z+5, r18	; 0x05
	ledBlinking.count = 0;
    15fc:	11 82       	std	Z+1, r1	; 0x01
	ledBlinking.startValue = 5;
    15fe:	82 83       	std	Z+2, r24	; 0x02
	isLedActive = eeprom_read_byte(&eeprom_ledState);
    1600:	81 e1       	ldi	r24, 0x11	; 17
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	67 d4       	rcall	.+2254   	; 0x1ed4 <eeprom_read_byte>
    1606:	18 2f       	mov	r17, r24
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	11 11       	cpse	r17, r1
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <_Z4initv+0x10c>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <isLedActive>

	correction.isForward = eeprom_read_byte(&eeprom_correctionIsForward);
    1614:	8f e0       	ldi	r24, 0x0F	; 15
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	5d d4       	rcall	.+2234   	; 0x1ed4 <eeprom_read_byte>
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	81 11       	cpse	r24, r1
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <_Z4initv+0x11e>
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <correction>
	correction.value = eeprom_read_byte(&eeprom_correctionValue);
    1626:	8e e0       	ldi	r24, 0x0E	; 14
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	54 d4       	rcall	.+2216   	; 0x1ed4 <eeprom_read_byte>
    162c:	c6 e8       	ldi	r28, 0x86	; 134
    162e:	d0 e0       	ldi	r29, 0x00	; 0
    1630:	89 83       	std	Y+1, r24	; 0x01
	correction.interval = eeprom_read_byte(&eeprom_correctionInterval);
    1632:	8d e0       	ldi	r24, 0x0D	; 13
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	4e d4       	rcall	.+2204   	; 0x1ed4 <eeprom_read_byte>
    1638:	8a 83       	std	Y+2, r24	; 0x02
	correction.year = eeprom_read_byte(&eeprom_correctionLastYear);
    163a:	8a e0       	ldi	r24, 0x0A	; 10
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	4a d4       	rcall	.+2196   	; 0x1ed4 <eeprom_read_byte>
    1640:	08 2f       	mov	r16, r24
    1642:	8b 83       	std	Y+3, r24	; 0x03
	correction.stamp = calcTimeStamp(eeprom_read_byte(&eeprom_correctionLastDay), eeprom_read_byte(&eeprom_correctionLastMonth),correction.year);
    1644:	8b e0       	ldi	r24, 0x0B	; 11
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	45 d4       	rcall	.+2186   	; 0x1ed4 <eeprom_read_byte>
    164a:	f8 2e       	mov	r15, r24
    164c:	8c e0       	ldi	r24, 0x0C	; 12
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	41 d4       	rcall	.+2178   	; 0x1ed4 <eeprom_read_byte>
    1652:	40 2f       	mov	r20, r16
    1654:	6f 2d       	mov	r22, r15
    1656:	4c d6       	rcall	.+3224   	; 0x22f0 <__TEXT_REGION_LENGTH__+0x2f0>
    1658:	2c 83       	std	Y+4, r18	; 0x04
    165a:	3d 83       	std	Y+5, r19	; 0x05
    165c:	4e 83       	std	Y+6, r20	; 0x06
    165e:	5f 83       	std	Y+7, r21	; 0x07
    1660:	68 87       	std	Y+8, r22	; 0x08
    1662:	79 87       	std	Y+9, r23	; 0x09
    1664:	8a 87       	std	Y+10, r24	; 0x0a
    1666:	9b 87       	std	Y+11, r25	; 0x0b
	
	nightMode.hourStart = eeprom_read_byte(&eeprom_hourNightModeStart);
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	33 d4       	rcall	.+2150   	; 0x1ed4 <eeprom_read_byte>
    166e:	c2 e9       	ldi	r28, 0x92	; 146
    1670:	d0 e0       	ldi	r29, 0x00	; 0
    1672:	8e 83       	std	Y+6, r24	; 0x06
	nightMode.hourStop = eeprom_read_byte(&eeprom_hourNightModeStop);
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	2d d4       	rcall	.+2138   	; 0x1ed4 <eeprom_read_byte>
    167a:	8f 83       	std	Y+7, r24	; 0x07
	nightMode.modeType = eeprom_read_byte(&eeprom_nightMode);
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	29 d4       	rcall	.+2130   	; 0x1ed4 <eeprom_read_byte>
    1682:	8a 83       	std	Y+2, r24	; 0x02
	nightMode.isActive = false;
    1684:	18 82       	st	Y, r1
	nightMode.thresholdInit = eeprom_read_byte(&eeprom_nightThreshold);
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	24 d4       	rcall	.+2120   	; 0x1ed4 <eeprom_read_byte>
    168c:	8d 83       	std	Y+5, r24	; 0x05
	nightMode.threshold =  20 * nightMode.thresholdInit;
    168e:	24 e1       	ldi	r18, 0x14	; 20
    1690:	82 9f       	mul	r24, r18
    1692:	c0 01       	movw	r24, r0
    1694:	11 24       	eor	r1, r1
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
	nightMode.isCanTryActivate = true;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
	nightMode.autoStamp = 0;
    169e:	1a 86       	std	Y+10, r1	; 0x0a
    16a0:	1b 86       	std	Y+11, r1	; 0x0b
    16a2:	1c 86       	std	Y+12, r1	; 0x0c
    16a4:	1d 86       	std	Y+13, r1	; 0x0d
    16a6:	1e 86       	std	Y+14, r1	; 0x0e
    16a8:	1f 86       	std	Y+15, r1	; 0x0f
    16aa:	18 8a       	std	Y+16, r1	; 0x10
    16ac:	19 8a       	std	Y+17, r1	; 0x11
	
	showDate.start = eeprom_read_byte(&eeprom_showDateStart);
    16ae:	88 e0       	ldi	r24, 0x08	; 8
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	10 d4       	rcall	.+2080   	; 0x1ed4 <eeprom_read_byte>
    16b4:	cd e0       	ldi	r28, 0x0D	; 13
    16b6:	d1 e0       	ldi	r29, 0x01	; 1
    16b8:	88 83       	st	Y, r24
	showDate.stop = eeprom_read_byte(&eeprom_showDateStop);
    16ba:	87 e0       	ldi	r24, 0x07	; 7
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0a d4       	rcall	.+2068   	; 0x1ed4 <eeprom_read_byte>
    16c0:	89 83       	std	Y+1, r24	; 0x01
	showDate.isActive = eeprom_read_byte(&eeprom_showDateIsActive);
    16c2:	89 e0       	ldi	r24, 0x09	; 9
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	06 d4       	rcall	.+2060   	; 0x1ed4 <eeprom_read_byte>
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	81 11       	cpse	r24, r1
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <_Z4initv+0x1cc>
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <showDate+0x2>
	
	switchPort(PORTB, ledPin, isLedActive);
    16d4:	11 23       	and	r17, r17
    16d6:	11 f0       	breq	.+4      	; 0x16dc <_Z4initv+0x1d8>
    16d8:	c2 9a       	sbi	0x18, 2	; 24
    16da:	01 c0       	rjmp	.+2      	; 0x16de <_Z4initv+0x1da>
    16dc:	c2 98       	cbi	0x18, 2	; 24
	tube.isDoteActive[4] = alarm.isActive;
    16de:	e4 ea       	ldi	r30, 0xA4	; 164
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <alarm>
    16e6:	80 8b       	std	Z+16, r24	; 0x10
	tube.isDoteActive[5] = hourBeep.isActive;
    16e8:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <hourBeep>
    16ec:	81 8b       	std	Z+17, r24	; 0x11

	etching.isWorking = false;
    16ee:	e5 e7       	ldi	r30, 0x75	; 117
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	10 82       	st	Z, r1
	etching.duration = 170;
    16f4:	8a ea       	ldi	r24, 0xAA	; 170
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	94 83       	std	Z+4, r25	; 0x04
    16fa:	83 83       	std	Z+3, r24	; 0x03
	etching.lastMin = dateTime.min;
    16fc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dateTime+0x1>
    1700:	81 83       	std	Z+1, r24	; 0x01
	
	button.isLongPress = false;
    1702:	ea ec       	ldi	r30, 0xCA	; 202
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	10 82       	st	Z, r1
	button.notInclude = false;
    1708:	11 82       	std	Z+1, r1	; 0x01
	button.num = 0;
    170a:	12 82       	std	Z+2, r1	; 0x02
	button.bounceTime = 0;
    170c:	15 82       	std	Z+5, r1	; 0x05
    170e:	16 82       	std	Z+6, r1	; 0x06
    1710:	17 82       	std	Z+7, r1	; 0x07
    1712:	10 86       	std	Z+8, r1	; 0x08
    1714:	11 86       	std	Z+9, r1	; 0x09
    1716:	12 86       	std	Z+10, r1	; 0x0a
    1718:	13 86       	std	Z+11, r1	; 0x0b
    171a:	14 86       	std	Z+12, r1	; 0x0c
	button.longPressTime = 0;
    171c:	15 86       	std	Z+13, r1	; 0x0d
    171e:	16 86       	std	Z+14, r1	; 0x0e
    1720:	17 86       	std	Z+15, r1	; 0x0f
    1722:	10 8a       	std	Z+16, r1	; 0x10
    1724:	11 8a       	std	Z+17, r1	; 0x11
    1726:	12 8a       	std	Z+18, r1	; 0x12
    1728:	13 8a       	std	Z+19, r1	; 0x13
    172a:	14 8a       	std	Z+20, r1	; 0x14
	resetCorrectionParams();
    172c:	d5 d6       	rcall	.+3498   	; 0x24d8 <__TEXT_REGION_LENGTH__+0x4d8>
	initMillis();
    172e:	a8 d4       	rcall	.+2384   	; 0x2080 <__TEXT_REGION_LENGTH__+0x80>
}
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	08 95       	ret

0000173c <_Z14beepControllerP6Beeper>:
	dateTime.year = ds1307_bcd2dec(i2c_readNak());
	i2c_stop();
	return dateTime;
}

void beepController(Beeper* beeper) {
    173c:	2f 92       	push	r2
    173e:	3f 92       	push	r3
    1740:	4f 92       	push	r4
    1742:	5f 92       	push	r5
    1744:	6f 92       	push	r6
    1746:	7f 92       	push	r7
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
	if (!beeper->canBeep) {
    1760:	fc 01       	movw	r30, r24
    1762:	21 81       	ldd	r18, Z+1	; 0x01
    1764:	21 11       	cpse	r18, r1
    1766:	03 c0       	rjmp	.+6      	; 0x176e <_Z14beepControllerP6Beeper+0x32>
		switchPort(PORTD, beepPin, 0);
    1768:	95 98       	cbi	0x12, 5	; 18
		beeper->isPinActive = false;
    176a:	12 82       	std	Z+2, r1	; 0x02
		return;
    176c:	80 c0       	rjmp	.+256    	; 0x186e <_Z14beepControllerP6Beeper+0x132>
    176e:	ec 01       	movw	r28, r24
	}
	if (beeper->isCanInit) {
    1770:	80 81       	ld	r24, Z
    1772:	88 23       	and	r24, r24
    1774:	89 f0       	breq	.+34     	; 0x1798 <_Z14beepControllerP6Beeper+0x5c>
		switchPort(PORTD, beepPin, 1);
    1776:	95 9a       	sbi	0x12, 5	; 18
		beeper->isPinActive = true;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	82 83       	std	Z+2, r24	; 0x02
		beeper->beepTime = millis();
    177c:	e2 d4       	rcall	.+2500   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    177e:	2b 87       	std	Y+11, r18	; 0x0b
    1780:	3c 87       	std	Y+12, r19	; 0x0c
    1782:	4d 87       	std	Y+13, r20	; 0x0d
    1784:	5e 87       	std	Y+14, r21	; 0x0e
    1786:	6f 87       	std	Y+15, r22	; 0x0f
    1788:	78 8b       	std	Y+16, r23	; 0x10
    178a:	89 8b       	std	Y+17, r24	; 0x11
    178c:	9a 8b       	std	Y+18, r25	; 0x12
		beeper->count = beeper->initCount - 1;
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	81 50       	subi	r24, 0x01	; 1
    1792:	8b 83       	std	Y+3, r24	; 0x03
		beeper->isCanInit = false;
    1794:	18 82       	st	Y, r1
    1796:	6b c0       	rjmp	.+214    	; 0x186e <_Z14beepControllerP6Beeper+0x132>
	} else {
		if (beeper->isPinActive) {
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	88 23       	and	r24, r24
    179c:	19 f1       	breq	.+70     	; 0x17e4 <_Z14beepControllerP6Beeper+0xa8>
			if (millis() - beeper->beepTime >= beeper->durationActive) {
    179e:	d1 d4       	rcall	.+2466   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    17a0:	ab 84       	ldd	r10, Y+11	; 0x0b
    17a2:	bc 84       	ldd	r11, Y+12	; 0x0c
    17a4:	cd 84       	ldd	r12, Y+13	; 0x0d
    17a6:	de 84       	ldd	r13, Y+14	; 0x0e
    17a8:	ef 84       	ldd	r14, Y+15	; 0x0f
    17aa:	f8 88       	ldd	r15, Y+16	; 0x10
    17ac:	09 89       	ldd	r16, Y+17	; 0x11
    17ae:	1a 89       	ldd	r17, Y+18	; 0x12
    17b0:	5f d3       	rcall	.+1726   	; 0x1e70 <__subdi3>
    17b2:	2d 80       	ldd	r2, Y+5	; 0x05
    17b4:	3e 80       	ldd	r3, Y+6	; 0x06
    17b6:	a2 2c       	mov	r10, r2
    17b8:	b3 2c       	mov	r11, r3
    17ba:	c1 2c       	mov	r12, r1
    17bc:	d1 2c       	mov	r13, r1
    17be:	e1 2c       	mov	r14, r1
    17c0:	f1 2c       	mov	r15, r1
    17c2:	00 e0       	ldi	r16, 0x00	; 0
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	5d d3       	rcall	.+1722   	; 0x1e82 <__cmpdi2>
    17c8:	08 f4       	brcc	.+2      	; 0x17cc <_Z14beepControllerP6Beeper+0x90>
    17ca:	51 c0       	rjmp	.+162    	; 0x186e <_Z14beepControllerP6Beeper+0x132>
				switchPort(PORTD, beepPin, 0);
    17cc:	95 98       	cbi	0x12, 5	; 18
				beeper->isPinActive = false;
    17ce:	1a 82       	std	Y+2, r1	; 0x02
				beeper->beepTime = millis();
    17d0:	b8 d4       	rcall	.+2416   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    17d2:	2b 87       	std	Y+11, r18	; 0x0b
    17d4:	3c 87       	std	Y+12, r19	; 0x0c
    17d6:	4d 87       	std	Y+13, r20	; 0x0d
    17d8:	5e 87       	std	Y+14, r21	; 0x0e
    17da:	6f 87       	std	Y+15, r22	; 0x0f
    17dc:	78 8b       	std	Y+16, r23	; 0x10
    17de:	89 8b       	std	Y+17, r24	; 0x11
    17e0:	9a 8b       	std	Y+18, r25	; 0x12
    17e2:	45 c0       	rjmp	.+138    	; 0x186e <_Z14beepControllerP6Beeper+0x132>
			}
		} else {
			if (beeper->count > 0) {
    17e4:	83 81       	ldd	r24, Z+3	; 0x03
    17e6:	88 23       	and	r24, r24
    17e8:	31 f1       	breq	.+76     	; 0x1836 <_Z14beepControllerP6Beeper+0xfa>
				if (millis() - beeper->beepTime >= beeper->durationInactive) {
    17ea:	ab d4       	rcall	.+2390   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    17ec:	ab 84       	ldd	r10, Y+11	; 0x0b
    17ee:	bc 84       	ldd	r11, Y+12	; 0x0c
    17f0:	cd 84       	ldd	r12, Y+13	; 0x0d
    17f2:	de 84       	ldd	r13, Y+14	; 0x0e
    17f4:	ef 84       	ldd	r14, Y+15	; 0x0f
    17f6:	f8 88       	ldd	r15, Y+16	; 0x10
    17f8:	09 89       	ldd	r16, Y+17	; 0x11
    17fa:	1a 89       	ldd	r17, Y+18	; 0x12
    17fc:	39 d3       	rcall	.+1650   	; 0x1e70 <__subdi3>
    17fe:	2f 80       	ldd	r2, Y+7	; 0x07
    1800:	38 84       	ldd	r3, Y+8	; 0x08
    1802:	a2 2c       	mov	r10, r2
    1804:	b3 2c       	mov	r11, r3
    1806:	c1 2c       	mov	r12, r1
    1808:	d1 2c       	mov	r13, r1
    180a:	e1 2c       	mov	r14, r1
    180c:	f1 2c       	mov	r15, r1
    180e:	00 e0       	ldi	r16, 0x00	; 0
    1810:	10 e0       	ldi	r17, 0x00	; 0
    1812:	37 d3       	rcall	.+1646   	; 0x1e82 <__cmpdi2>
    1814:	60 f1       	brcs	.+88     	; 0x186e <_Z14beepControllerP6Beeper+0x132>
					switchPort(PORTD, beepPin, 1);
    1816:	95 9a       	sbi	0x12, 5	; 18
					beeper->isPinActive = true;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	8a 83       	std	Y+2, r24	; 0x02
					beeper->beepTime = millis();
    181c:	92 d4       	rcall	.+2340   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    181e:	2b 87       	std	Y+11, r18	; 0x0b
    1820:	3c 87       	std	Y+12, r19	; 0x0c
    1822:	4d 87       	std	Y+13, r20	; 0x0d
    1824:	5e 87       	std	Y+14, r21	; 0x0e
    1826:	6f 87       	std	Y+15, r22	; 0x0f
    1828:	78 8b       	std	Y+16, r23	; 0x10
    182a:	89 8b       	std	Y+17, r24	; 0x11
    182c:	9a 8b       	std	Y+18, r25	; 0x12
					beeper->count--;
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	81 50       	subi	r24, 0x01	; 1
    1832:	8b 83       	std	Y+3, r24	; 0x03
    1834:	1c c0       	rjmp	.+56     	; 0x186e <_Z14beepControllerP6Beeper+0x132>
				}
			} else if (beeper->waitingTime != 0 && millis() - beeper->beepTime >= beeper->waitingTime){
    1836:	81 85       	ldd	r24, Z+9	; 0x09
    1838:	92 85       	ldd	r25, Z+10	; 0x0a
    183a:	89 2b       	or	r24, r25
    183c:	c1 f0       	breq	.+48     	; 0x186e <_Z14beepControllerP6Beeper+0x132>
    183e:	81 d4       	rcall	.+2306   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    1840:	ab 84       	ldd	r10, Y+11	; 0x0b
    1842:	bc 84       	ldd	r11, Y+12	; 0x0c
    1844:	cd 84       	ldd	r12, Y+13	; 0x0d
    1846:	de 84       	ldd	r13, Y+14	; 0x0e
    1848:	ef 84       	ldd	r14, Y+15	; 0x0f
    184a:	f8 88       	ldd	r15, Y+16	; 0x10
    184c:	09 89       	ldd	r16, Y+17	; 0x11
    184e:	1a 89       	ldd	r17, Y+18	; 0x12
    1850:	0f d3       	rcall	.+1566   	; 0x1e70 <__subdi3>
    1852:	29 84       	ldd	r2, Y+9	; 0x09
    1854:	3a 84       	ldd	r3, Y+10	; 0x0a
    1856:	a2 2c       	mov	r10, r2
    1858:	b3 2c       	mov	r11, r3
    185a:	c1 2c       	mov	r12, r1
    185c:	d1 2c       	mov	r13, r1
    185e:	e1 2c       	mov	r14, r1
    1860:	f1 2c       	mov	r15, r1
    1862:	00 e0       	ldi	r16, 0x00	; 0
    1864:	10 e0       	ldi	r17, 0x00	; 0
    1866:	0d d3       	rcall	.+1562   	; 0x1e82 <__cmpdi2>
    1868:	10 f0       	brcs	.+4      	; 0x186e <_Z14beepControllerP6Beeper+0x132>
				beeper->isCanInit = true;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	88 83       	st	Y, r24
			}
		}
	}
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	af 90       	pop	r10
    1882:	9f 90       	pop	r9
    1884:	8f 90       	pop	r8
    1886:	7f 90       	pop	r7
    1888:	6f 90       	pop	r6
    188a:	5f 90       	pop	r5
    188c:	4f 90       	pop	r4
    188e:	3f 90       	pop	r3
    1890:	2f 90       	pop	r2
    1892:	08 95       	ret

00001894 <_Z19showDissallowedTaskv>:


void showDissallowedTask() {
    1894:	2f 92       	push	r2
    1896:	3f 92       	push	r3
    1898:	4f 92       	push	r4
    189a:	5f 92       	push	r5
    189c:	6f 92       	push	r6
    189e:	7f 92       	push	r7
    18a0:	8f 92       	push	r8
    18a2:	9f 92       	push	r9
    18a4:	af 92       	push	r10
    18a6:	bf 92       	push	r11
    18a8:	cf 92       	push	r12
    18aa:	df 92       	push	r13
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
	if (!nightMode.isActive && !(alarm.beeper.canBeep && alarm.isActive)) {
    18b8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <nightMode>
    18bc:	81 11       	cpse	r24, r1
    18be:	10 c0       	rjmp	.+32     	; 0x18e0 <_Z19showDissallowedTaskv+0x4c>
    18c0:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <alarm+0x6>
    18c4:	88 23       	and	r24, r24
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <_Z19showDissallowedTaskv+0x3c>
    18c8:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <alarm>
    18cc:	81 11       	cpse	r24, r1
    18ce:	08 c0       	rjmp	.+16     	; 0x18e0 <_Z19showDissallowedTaskv+0x4c>
		switchPort(PORTB,ledPin, isLedActive);
    18d0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <isLedActive>
    18d4:	88 23       	and	r24, r24
    18d6:	11 f0       	breq	.+4      	; 0x18dc <_Z19showDissallowedTaskv+0x48>
    18d8:	c2 9a       	sbi	0x18, 2	; 24
    18da:	78 c0       	rjmp	.+240    	; 0x19cc <_Z19showDissallowedTaskv+0x138>
    18dc:	c2 98       	cbi	0x18, 2	; 24
    18de:	76 c0       	rjmp	.+236    	; 0x19cc <_Z19showDissallowedTaskv+0x138>
		return;
	} 
	
	if (ledBlinking.isCanInit && ledBlinking.count == 0) {
    18e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ledBlinking>
    18e4:	88 23       	and	r24, r24
    18e6:	a1 f0       	breq	.+40     	; 0x1910 <_Z19showDissallowedTaskv+0x7c>
    18e8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
    18ec:	81 11       	cpse	r24, r1
    18ee:	6b c0       	rjmp	.+214    	; 0x19c6 <_Z19showDissallowedTaskv+0x132>
		switchPort(PORTB,ledPin, true);
    18f0:	c2 9a       	sbi	0x18, 2	; 24
		ledBlinking.ledTime = millis();
    18f2:	27 d4       	rcall	.+2126   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    18f4:	e6 e6       	ldi	r30, 0x66	; 102
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	27 83       	std	Z+7, r18	; 0x07
    18fa:	30 87       	std	Z+8, r19	; 0x08
    18fc:	41 87       	std	Z+9, r20	; 0x09
    18fe:	52 87       	std	Z+10, r21	; 0x0a
    1900:	63 87       	std	Z+11, r22	; 0x0b
    1902:	74 87       	std	Z+12, r23	; 0x0c
    1904:	85 87       	std	Z+13, r24	; 0x0d
    1906:	96 87       	std	Z+14, r25	; 0x0e
		ledBlinking.count = ledBlinking.startValue;
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	81 83       	std	Z+1, r24	; 0x01
		ledBlinking.isCanInit = false;
    190c:	10 82       	st	Z, r1
    190e:	5e c0       	rjmp	.+188    	; 0x19cc <_Z19showDissallowedTaskv+0x138>
	} else {
		if (isPortHigh(PINB,ledPin) && ledBlinking.count > 0) {
    1910:	b2 9b       	sbis	0x16, 2	; 22
    1912:	54 c0       	rjmp	.+168    	; 0x19bc <_Z19showDissallowedTaskv+0x128>
    1914:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
    1918:	88 23       	and	r24, r24
    191a:	09 f4       	brne	.+2      	; 0x191e <_Z19showDissallowedTaskv+0x8a>
    191c:	57 c0       	rjmp	.+174    	; 0x19cc <_Z19showDissallowedTaskv+0x138>
    191e:	35 c0       	rjmp	.+106    	; 0x198a <_Z19showDissallowedTaskv+0xf6>
			if (millis() - ledBlinking.ledTime >= ledBlinking.durationActive) {
				switchPort(PORTB,ledPin, false);
    1920:	c2 98       	cbi	0x18, 2	; 24
				ledBlinking.count--;
    1922:	c6 e6       	ldi	r28, 0x66	; 102
    1924:	d0 e0       	ldi	r29, 0x00	; 0
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	81 50       	subi	r24, 0x01	; 1
    192a:	89 83       	std	Y+1, r24	; 0x01
				ledBlinking.ledTime = millis();
    192c:	0a d4       	rcall	.+2068   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    192e:	2f 83       	std	Y+7, r18	; 0x07
    1930:	38 87       	std	Y+8, r19	; 0x08
    1932:	49 87       	std	Y+9, r20	; 0x09
    1934:	5a 87       	std	Y+10, r21	; 0x0a
    1936:	6b 87       	std	Y+11, r22	; 0x0b
    1938:	7c 87       	std	Y+12, r23	; 0x0c
    193a:	8d 87       	std	Y+13, r24	; 0x0d
    193c:	9e 87       	std	Y+14, r25	; 0x0e
    193e:	46 c0       	rjmp	.+140    	; 0x19cc <_Z19showDissallowedTaskv+0x138>
			}
		} else {
			if (ledBlinking.count > 0) {
				if (millis() - ledBlinking.ledTime >= ledBlinking.durationInactive) {
    1940:	00 d4       	rcall	.+2048   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    1942:	e6 e6       	ldi	r30, 0x66	; 102
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	a7 80       	ldd	r10, Z+7	; 0x07
    1948:	b0 84       	ldd	r11, Z+8	; 0x08
    194a:	c1 84       	ldd	r12, Z+9	; 0x09
    194c:	d2 84       	ldd	r13, Z+10	; 0x0a
    194e:	e3 84       	ldd	r14, Z+11	; 0x0b
    1950:	f4 84       	ldd	r15, Z+12	; 0x0c
    1952:	05 85       	ldd	r16, Z+13	; 0x0d
    1954:	16 85       	ldd	r17, Z+14	; 0x0e
    1956:	8c d2       	rcall	.+1304   	; 0x1e70 <__subdi3>
    1958:	25 80       	ldd	r2, Z+5	; 0x05
    195a:	36 80       	ldd	r3, Z+6	; 0x06
    195c:	a2 2c       	mov	r10, r2
    195e:	b3 2c       	mov	r11, r3
    1960:	c1 2c       	mov	r12, r1
    1962:	d1 2c       	mov	r13, r1
    1964:	e1 2c       	mov	r14, r1
    1966:	f1 2c       	mov	r15, r1
    1968:	00 e0       	ldi	r16, 0x00	; 0
    196a:	10 e0       	ldi	r17, 0x00	; 0
    196c:	8a d2       	rcall	.+1300   	; 0x1e82 <__cmpdi2>
    196e:	70 f1       	brcs	.+92     	; 0x19cc <_Z19showDissallowedTaskv+0x138>
					switchPort(PORTB,ledPin, true);
    1970:	c2 9a       	sbi	0x18, 2	; 24
					ledBlinking.ledTime = millis();
    1972:	e7 d3       	rcall	.+1998   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    1974:	e6 e6       	ldi	r30, 0x66	; 102
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	27 83       	std	Z+7, r18	; 0x07
    197a:	30 87       	std	Z+8, r19	; 0x08
    197c:	41 87       	std	Z+9, r20	; 0x09
    197e:	52 87       	std	Z+10, r21	; 0x0a
    1980:	63 87       	std	Z+11, r22	; 0x0b
    1982:	74 87       	std	Z+12, r23	; 0x0c
    1984:	85 87       	std	Z+13, r24	; 0x0d
    1986:	96 87       	std	Z+14, r25	; 0x0e
    1988:	21 c0       	rjmp	.+66     	; 0x19cc <_Z19showDissallowedTaskv+0x138>
		ledBlinking.ledTime = millis();
		ledBlinking.count = ledBlinking.startValue;
		ledBlinking.isCanInit = false;
	} else {
		if (isPortHigh(PINB,ledPin) && ledBlinking.count > 0) {
			if (millis() - ledBlinking.ledTime >= ledBlinking.durationActive) {
    198a:	db d3       	rcall	.+1974   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    198c:	e6 e6       	ldi	r30, 0x66	; 102
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	a7 80       	ldd	r10, Z+7	; 0x07
    1992:	b0 84       	ldd	r11, Z+8	; 0x08
    1994:	c1 84       	ldd	r12, Z+9	; 0x09
    1996:	d2 84       	ldd	r13, Z+10	; 0x0a
    1998:	e3 84       	ldd	r14, Z+11	; 0x0b
    199a:	f4 84       	ldd	r15, Z+12	; 0x0c
    199c:	05 85       	ldd	r16, Z+13	; 0x0d
    199e:	16 85       	ldd	r17, Z+14	; 0x0e
    19a0:	67 d2       	rcall	.+1230   	; 0x1e70 <__subdi3>
    19a2:	23 80       	ldd	r2, Z+3	; 0x03
    19a4:	34 80       	ldd	r3, Z+4	; 0x04
    19a6:	a2 2c       	mov	r10, r2
    19a8:	b3 2c       	mov	r11, r3
    19aa:	c1 2c       	mov	r12, r1
    19ac:	d1 2c       	mov	r13, r1
    19ae:	e1 2c       	mov	r14, r1
    19b0:	f1 2c       	mov	r15, r1
    19b2:	00 e0       	ldi	r16, 0x00	; 0
    19b4:	10 e0       	ldi	r17, 0x00	; 0
    19b6:	65 d2       	rcall	.+1226   	; 0x1e82 <__cmpdi2>
    19b8:	48 f0       	brcs	.+18     	; 0x19cc <_Z19showDissallowedTaskv+0x138>
    19ba:	b2 cf       	rjmp	.-156    	; 0x1920 <_Z19showDissallowedTaskv+0x8c>
				switchPort(PORTB,ledPin, false);
				ledBlinking.count--;
				ledBlinking.ledTime = millis();
			}
		} else {
			if (ledBlinking.count > 0) {
    19bc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
    19c0:	81 11       	cpse	r24, r1
    19c2:	be cf       	rjmp	.-132    	; 0x1940 <_Z19showDissallowedTaskv+0xac>
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <_Z19showDissallowedTaskv+0x138>
		switchPort(PORTB,ledPin, true);
		ledBlinking.ledTime = millis();
		ledBlinking.count = ledBlinking.startValue;
		ledBlinking.isCanInit = false;
	} else {
		if (isPortHigh(PINB,ledPin) && ledBlinking.count > 0) {
    19c6:	b2 99       	sbic	0x16, 2	; 22
    19c8:	e0 cf       	rjmp	.-64     	; 0x198a <_Z19showDissallowedTaskv+0xf6>
    19ca:	f8 cf       	rjmp	.-16     	; 0x19bc <_Z19showDissallowedTaskv+0x128>
				}
			}
		}
	}
	
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	9f 90       	pop	r9
    19e2:	8f 90       	pop	r8
    19e4:	7f 90       	pop	r7
    19e6:	6f 90       	pop	r6
    19e8:	5f 90       	pop	r5
    19ea:	4f 90       	pop	r4
    19ec:	3f 90       	pop	r3
    19ee:	2f 90       	pop	r2
    19f0:	08 95       	ret

000019f2 <main>:
	button.longPressTime = 0;
	resetCorrectionParams();
	initMillis();
}

int main(void) {
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	28 97       	sbiw	r28, 0x08	; 8
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
	init();
    1a06:	7e dd       	rcall	.-1284   	; 0x1504 <_Z4initv>
					}
					tubeMode = tm_Etching;
				}
			}
		} else {
			if (prevSec != dateTime.sec) {
    1a08:	0f 2e       	mov	r0, r31
    1a0a:	f0 e1       	ldi	r31, 0x10	; 16
    1a0c:	8f 2e       	mov	r8, r31
    1a0e:	f1 e0       	ldi	r31, 0x01	; 1
    1a10:	9f 2e       	mov	r9, r31
    1a12:	f0 2d       	mov	r31, r0
    1a14:	0f 2e       	mov	r0, r31
    1a16:	fa ea       	ldi	r31, 0xAA	; 170
    1a18:	6f 2e       	mov	r6, r31
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	7f 2e       	mov	r7, r31
    1a1e:	f0 2d       	mov	r31, r0
			}
			if (etching.isWorking) {
				if (etching.value > 99) {
					etching.isWorking = false;
				} else { 
					if (millis() - etching.switchTime >= etching.duration) {
    1a20:	0f 2e       	mov	r0, r31
    1a22:	f5 e7       	ldi	r31, 0x75	; 117
    1a24:	4f 2e       	mov	r4, r31
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	5f 2e       	mov	r5, r31
    1a2a:	f0 2d       	mov	r31, r0
						alarm.beeper.canBeep = false;
						alarm.beeper.isCanInit = false;
					}
				}
			}
			if (hourBeep.isActive && !nightMode.isActive) {
    1a2c:	0f 2e       	mov	r0, r31
    1a2e:	f2 e9       	ldi	r31, 0x92	; 146
    1a30:	2f 2e       	mov	r2, r31
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	3f 2e       	mov	r3, r31
    1a36:	f0 2d       	mov	r31, r0
}

int main(void) {
	init();
	while (true) {
		dateTime = ds1307_getdate();
    1a38:	ce dc       	rcall	.-1636   	; 0x13d6 <_Z14ds1307_getdatev>
    1a3a:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <dateTime>
    1a3e:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <dateTime+0x1>
    1a42:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <dateTime+0x2>
    1a46:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <dateTime+0x3>
    1a4a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dateTime+0x4>
    1a4e:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dateTime+0x5>
    1a52:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dateTime+0x6>
		buttonController();
    1a56:	e6 db       	rcall	.-2100   	; 0x1224 <_Z16buttonControllerv>
		if (modeWork == mw_Clock) {
    1a58:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	0a c1       	rjmp	.+532    	; 0x1c74 <main+0x282>
			checkNightMode();
    1a60:	92 d5       	rcall	.+2852   	; 0x2586 <__TEXT_REGION_LENGTH__+0x586>
			timeCorrection();
    1a62:	0b d9       	rcall	.-3562   	; 0xc7a <_Z14timeCorrectionv>
			showDissallowedTask();
    1a64:	17 df       	rcall	.-466    	; 0x1894 <_Z19showDissallowedTaskv>
			if (alarm.isActive) {
    1a66:	af ed       	ldi	r26, 0xDF	; 223
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	8c 91       	ld	r24, X
    1a6c:	88 23       	and	r24, r24
    1a6e:	19 f1       	breq	.+70     	; 0x1ab6 <main+0xc4>
				if (dateTime.hour == alarm.startHour && dateTime.min == alarm.startMin && dateTime.day != alarm.lastDay) {
    1a70:	f4 01       	movw	r30, r8
    1a72:	22 81       	ldd	r18, Z+2	; 0x02
    1a74:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <alarm+0x3>
    1a78:	29 13       	cpse	r18, r25
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <main+0xb2>
    1a7c:	21 81       	ldd	r18, Z+1	; 0x01
    1a7e:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <alarm+0x4>
    1a82:	29 13       	cpse	r18, r25
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <main+0xbc>
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <alarm+0x2>
    1a8c:	92 17       	cp	r25, r18
    1a8e:	99 f0       	breq	.+38     	; 0x1ab6 <main+0xc4>
					alarm.lastDay = dateTime.day;
    1a90:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <alarm+0x2>
					alarm.beeper.canBeep = true;
    1a94:	f1 e0       	ldi	r31, 0x01	; 1
    1a96:	f0 93 e5 00 	sts	0x00E5, r31	; 0x8000e5 <alarm+0x6>
					alarm.isTurnedOff = false;
    1a9a:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <alarm+0x1>
					alarm.beeper.isCanInit = true;	
    1a9e:	f0 93 e4 00 	sts	0x00E4, r31	; 0x8000e4 <alarm+0x5>
    1aa2:	09 c0       	rjmp	.+18     	; 0x1ab6 <main+0xc4>
				} else {
					if (dateTime.min != alarm.startMin) {
    1aa4:	21 81       	ldd	r18, Z+1	; 0x01
    1aa6:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <alarm+0x4>
    1aaa:	29 17       	cp	r18, r25
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <main+0xc4>
						alarm.beeper.canBeep = false;
    1aae:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <alarm+0x6>
						alarm.beeper.isCanInit = false;
    1ab2:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <alarm+0x5>
					}
				}
			}
			if (hourBeep.isActive && !nightMode.isActive) {
    1ab6:	e7 ef       	ldi	r30, 0xF7	; 247
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	90 81       	ld	r25, Z
    1abc:	99 23       	and	r25, r25
    1abe:	11 f1       	breq	.+68     	; 0x1b04 <main+0x112>
    1ac0:	d1 01       	movw	r26, r2
    1ac2:	2c 91       	ld	r18, X
    1ac4:	21 11       	cpse	r18, r1
    1ac6:	1e c0       	rjmp	.+60     	; 0x1b04 <main+0x112>
				if (hourBeep.manualActivation || (hourBeep.lastHour != dateTime.hour && dateTime.min == 0 && alarm.startMin != 0)) 
    1ac8:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <hourBeep+0x1>
    1acc:	21 11       	cpse	r18, r1
    1ace:	0e c0       	rjmp	.+28     	; 0x1aec <main+0xfa>
    1ad0:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <hourBeep+0x2>
    1ad4:	f4 01       	movw	r30, r8
    1ad6:	22 81       	ldd	r18, Z+2	; 0x02
    1ad8:	32 17       	cp	r19, r18
    1ada:	a1 f0       	breq	.+40     	; 0x1b04 <main+0x112>
    1adc:	21 81       	ldd	r18, Z+1	; 0x01
    1ade:	21 11       	cpse	r18, r1
    1ae0:	11 c0       	rjmp	.+34     	; 0x1b04 <main+0x112>
    1ae2:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <alarm+0x4>
    1ae6:	22 23       	and	r18, r18
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <main+0xfa>
    1aea:	12 c1       	rjmp	.+548    	; 0x1d10 <main+0x31e>
				{
					hourBeep.manualActivation = false;
    1aec:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <hourBeep+0x1>
					hourBeep.lastHour = dateTime.hour;
    1af0:	d4 01       	movw	r26, r8
    1af2:	12 96       	adiw	r26, 0x02	; 2
    1af4:	2c 91       	ld	r18, X
    1af6:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <hourBeep+0x2>
					hourBeep.beeper.canBeep = true;
    1afa:	b1 e0       	ldi	r27, 0x01	; 1
    1afc:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <hourBeep+0x4>
					hourBeep.beeper.isCanInit = true;
    1b00:	b0 93 fa 00 	sts	0x00FA, r27	; 0x8000fa <hourBeep+0x3>
				} 
			}
			tube.isDoteActive[4] = alarm.isActive;
    1b04:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <tube+0x10>
			tube.isDoteActive[5] = hourBeep.isActive;
    1b08:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <tube+0x11>
			
			tubeMode = tm_ShowTime;
    1b0c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <tubeMode>
			if (showDate.isActive) {
    1b10:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <showDate+0x2>
    1b14:	88 23       	and	r24, r24
    1b16:	71 f0       	breq	.+28     	; 0x1b34 <main+0x142>
				if (dateTime.sec >= showDate.start && dateTime.sec <= showDate.stop) {
    1b18:	f4 01       	movw	r30, r8
    1b1a:	80 81       	ld	r24, Z
    1b1c:	ad e0       	ldi	r26, 0x0D	; 13
    1b1e:	b1 e0       	ldi	r27, 0x01	; 1
    1b20:	9c 91       	ld	r25, X
    1b22:	89 17       	cp	r24, r25
    1b24:	38 f0       	brcs	.+14     	; 0x1b34 <main+0x142>
    1b26:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <showDate+0x1>
    1b2a:	98 17       	cp	r25, r24
    1b2c:	18 f0       	brcs	.+6      	; 0x1b34 <main+0x142>
					tubeMode = tm_ShowDate;
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <tubeMode>
				}
			}
			
			if (dateTime.min % 10 == 0 && dateTime.sec < 3 && etching.lastMin != dateTime.min) {
    1b34:	f4 01       	movw	r30, r8
    1b36:	21 81       	ldd	r18, Z+1	; 0x01
    1b38:	fd ec       	ldi	r31, 0xCD	; 205
    1b3a:	2f 9f       	mul	r18, r31
    1b3c:	81 2d       	mov	r24, r1
    1b3e:	11 24       	eor	r1, r1
    1b40:	86 95       	lsr	r24
    1b42:	86 95       	lsr	r24
    1b44:	86 95       	lsr	r24
    1b46:	88 0f       	add	r24, r24
    1b48:	98 2f       	mov	r25, r24
    1b4a:	99 0f       	add	r25, r25
    1b4c:	99 0f       	add	r25, r25
    1b4e:	89 0f       	add	r24, r25
    1b50:	28 13       	cpse	r18, r24
    1b52:	2e c0       	rjmp	.+92     	; 0x1bb0 <main+0x1be>
    1b54:	d4 01       	movw	r26, r8
    1b56:	8c 91       	ld	r24, X
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	50 f5       	brcc	.+84     	; 0x1bb0 <main+0x1be>
    1b5c:	f2 01       	movw	r30, r4
    1b5e:	81 81       	ldd	r24, Z+1	; 0x01
    1b60:	82 17       	cp	r24, r18
    1b62:	31 f1       	breq	.+76     	; 0x1bb0 <main+0x1be>
				etching.lastMin = dateTime.min;
    1b64:	21 83       	std	Z+1, r18	; 0x01
				etching.isWorking = true;
    1b66:	aa 24       	eor	r10, r10
    1b68:	a3 94       	inc	r10
    1b6a:	a0 82       	st	Z, r10
				etching.switchTime = millis();
    1b6c:	ea d2       	rcall	.+1492   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    1b6e:	d2 01       	movw	r26, r4
    1b70:	15 96       	adiw	r26, 0x05	; 5
    1b72:	2c 93       	st	X, r18
    1b74:	15 97       	sbiw	r26, 0x05	; 5
    1b76:	16 96       	adiw	r26, 0x06	; 6
    1b78:	3c 93       	st	X, r19
    1b7a:	16 97       	sbiw	r26, 0x06	; 6
    1b7c:	17 96       	adiw	r26, 0x07	; 7
    1b7e:	4c 93       	st	X, r20
    1b80:	17 97       	sbiw	r26, 0x07	; 7
    1b82:	18 96       	adiw	r26, 0x08	; 8
    1b84:	5c 93       	st	X, r21
    1b86:	18 97       	sbiw	r26, 0x08	; 8
    1b88:	19 96       	adiw	r26, 0x09	; 9
    1b8a:	6c 93       	st	X, r22
    1b8c:	19 97       	sbiw	r26, 0x09	; 9
    1b8e:	1a 96       	adiw	r26, 0x0a	; 10
    1b90:	7c 93       	st	X, r23
    1b92:	1a 97       	sbiw	r26, 0x0a	; 10
    1b94:	1b 96       	adiw	r26, 0x0b	; 11
    1b96:	8c 93       	st	X, r24
    1b98:	1b 97       	sbiw	r26, 0x0b	; 11
    1b9a:	1c 96       	adiw	r26, 0x0c	; 12
    1b9c:	9c 93       	st	X, r25
    1b9e:	1c 97       	sbiw	r26, 0x0c	; 12
				etching.value = 0;
    1ba0:	12 96       	adiw	r26, 0x02	; 2
    1ba2:	1c 92       	st	X, r1
    1ba4:	12 97       	sbiw	r26, 0x02	; 2
			}
			if (etching.isWorking) {
    1ba6:	8c 91       	ld	r24, X
    1ba8:	88 23       	and	r24, r24
    1baa:	09 f4       	brne	.+2      	; 0x1bae <main+0x1bc>
    1bac:	84 c0       	rjmp	.+264    	; 0x1cb6 <main+0x2c4>
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <main+0x1d2>
    1bb0:	f2 01       	movw	r30, r4
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <main+0x1c8>
    1bb8:	7e c0       	rjmp	.+252    	; 0x1cb6 <main+0x2c4>
				if (etching.value > 99) {
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	84 36       	cpi	r24, 0x64	; 100
    1bbe:	10 f0       	brcs	.+4      	; 0x1bc4 <main+0x1d2>
					etching.isWorking = false;
    1bc0:	10 82       	st	Z, r1
    1bc2:	79 c0       	rjmp	.+242    	; 0x1cb6 <main+0x2c4>
				} else { 
					if (millis() - etching.switchTime >= etching.duration) {
    1bc4:	be d2       	rcall	.+1404   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    1bc6:	d2 01       	movw	r26, r4
    1bc8:	15 96       	adiw	r26, 0x05	; 5
    1bca:	ac 90       	ld	r10, X
    1bcc:	15 97       	sbiw	r26, 0x05	; 5
    1bce:	16 96       	adiw	r26, 0x06	; 6
    1bd0:	bc 90       	ld	r11, X
    1bd2:	16 97       	sbiw	r26, 0x06	; 6
    1bd4:	17 96       	adiw	r26, 0x07	; 7
    1bd6:	cc 90       	ld	r12, X
    1bd8:	17 97       	sbiw	r26, 0x07	; 7
    1bda:	18 96       	adiw	r26, 0x08	; 8
    1bdc:	dc 90       	ld	r13, X
    1bde:	18 97       	sbiw	r26, 0x08	; 8
    1be0:	19 96       	adiw	r26, 0x09	; 9
    1be2:	ec 90       	ld	r14, X
    1be4:	19 97       	sbiw	r26, 0x09	; 9
    1be6:	1a 96       	adiw	r26, 0x0a	; 10
    1be8:	fc 90       	ld	r15, X
    1bea:	1a 97       	sbiw	r26, 0x0a	; 10
    1bec:	1b 96       	adiw	r26, 0x0b	; 11
    1bee:	0c 91       	ld	r16, X
    1bf0:	1b 97       	sbiw	r26, 0x0b	; 11
    1bf2:	1c 96       	adiw	r26, 0x0c	; 12
    1bf4:	1c 91       	ld	r17, X
    1bf6:	1c 97       	sbiw	r26, 0x0c	; 12
    1bf8:	3b d1       	rcall	.+630    	; 0x1e70 <__subdi3>
    1bfa:	13 96       	adiw	r26, 0x03	; 3
    1bfc:	ed 91       	ld	r30, X+
    1bfe:	fc 91       	ld	r31, X
    1c00:	14 97       	sbiw	r26, 0x04	; 4
    1c02:	5f 01       	movw	r10, r30
    1c04:	c1 2c       	mov	r12, r1
    1c06:	d1 2c       	mov	r13, r1
    1c08:	e1 2c       	mov	r14, r1
    1c0a:	f1 2c       	mov	r15, r1
    1c0c:	87 01       	movw	r16, r14
    1c0e:	e9 83       	std	Y+1, r30	; 0x01
    1c10:	ba 82       	std	Y+2, r11	; 0x02
    1c12:	cb 82       	std	Y+3, r12	; 0x03
    1c14:	dc 82       	std	Y+4, r13	; 0x04
    1c16:	ed 82       	std	Y+5, r14	; 0x05
    1c18:	fe 82       	std	Y+6, r15	; 0x06
    1c1a:	0f 83       	std	Y+7, r16	; 0x07
    1c1c:	18 87       	std	Y+8, r17	; 0x08
    1c1e:	c1 2c       	mov	r12, r1
    1c20:	d1 2c       	mov	r13, r1
    1c22:	e1 2c       	mov	r14, r1
    1c24:	f1 2c       	mov	r15, r1
    1c26:	00 e0       	ldi	r16, 0x00	; 0
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	2b d1       	rcall	.+598    	; 0x1e82 <__cmpdi2>
    1c2c:	f8 f0       	brcs	.+62     	; 0x1c6c <main+0x27a>
						etching.value+=11;
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	8c 91       	ld	r24, X
    1c32:	12 97       	sbiw	r26, 0x02	; 2
    1c34:	85 5f       	subi	r24, 0xF5	; 245
    1c36:	12 96       	adiw	r26, 0x02	; 2
    1c38:	8c 93       	st	X, r24
						etching.switchTime = millis();
    1c3a:	83 d2       	rcall	.+1286   	; 0x2142 <__TEXT_REGION_LENGTH__+0x142>
    1c3c:	d2 01       	movw	r26, r4
    1c3e:	15 96       	adiw	r26, 0x05	; 5
    1c40:	2c 93       	st	X, r18
    1c42:	15 97       	sbiw	r26, 0x05	; 5
    1c44:	16 96       	adiw	r26, 0x06	; 6
    1c46:	3c 93       	st	X, r19
    1c48:	16 97       	sbiw	r26, 0x06	; 6
    1c4a:	17 96       	adiw	r26, 0x07	; 7
    1c4c:	4c 93       	st	X, r20
    1c4e:	17 97       	sbiw	r26, 0x07	; 7
    1c50:	18 96       	adiw	r26, 0x08	; 8
    1c52:	5c 93       	st	X, r21
    1c54:	18 97       	sbiw	r26, 0x08	; 8
    1c56:	19 96       	adiw	r26, 0x09	; 9
    1c58:	6c 93       	st	X, r22
    1c5a:	19 97       	sbiw	r26, 0x09	; 9
    1c5c:	1a 96       	adiw	r26, 0x0a	; 10
    1c5e:	7c 93       	st	X, r23
    1c60:	1a 97       	sbiw	r26, 0x0a	; 10
    1c62:	1b 96       	adiw	r26, 0x0b	; 11
    1c64:	8c 93       	st	X, r24
    1c66:	1b 97       	sbiw	r26, 0x0b	; 11
    1c68:	1c 96       	adiw	r26, 0x0c	; 12
    1c6a:	9c 93       	st	X, r25
					}
					tubeMode = tm_Etching;
    1c6c:	bf ef       	ldi	r27, 0xFF	; 255
    1c6e:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <tubeMode>
    1c72:	21 c0       	rjmp	.+66     	; 0x1cb6 <main+0x2c4>
				}
			}
		} else {
			if (prevSec != dateTime.sec) {
    1c74:	f4 01       	movw	r30, r8
    1c76:	80 81       	ld	r24, Z
    1c78:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
    1c7c:	89 17       	cp	r24, r25
    1c7e:	a9 f0       	breq	.+42     	; 0x1caa <main+0x2b8>
				prevSec = dateTime.sec;
    1c80:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				if (returnTime == 0) {
    1c84:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <returnTime>
    1c88:	81 11       	cpse	r24, r1
    1c8a:	0c c0       	rjmp	.+24     	; 0x1ca4 <main+0x2b2>
					modeWork = mw_Clock;
    1c8c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <modeWork>
    1c90:	e4 ea       	ldi	r30, 0xA4	; 164
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
					for (uint8_t i = 0; i < 6; i++) {
						tube.isFlash[i] = false;
    1c94:	11 92       	st	Z+, r1
						tube.isDisabled[i] = false;
    1c96:	15 82       	std	Z+5, r1	; 0x05
						tube.isDoteActive[i] = false;
    1c98:	13 86       	std	Z+11, r1	; 0x0b
		} else {
			if (prevSec != dateTime.sec) {
				prevSec = dateTime.sec;
				if (returnTime == 0) {
					modeWork = mw_Clock;
					for (uint8_t i = 0; i < 6; i++) {
    1c9a:	e6 15       	cp	r30, r6
    1c9c:	f7 05       	cpc	r31, r7
    1c9e:	d1 f7       	brne	.-12     	; 0x1c94 <main+0x2a2>
						tube.isFlash[i] = false;
						tube.isDisabled[i] = false;
						tube.isDoteActive[i] = false;
					}
					resetButtons();
    1ca0:	51 d4       	rcall	.+2210   	; 0x2544 <__TEXT_REGION_LENGTH__+0x544>
    1ca2:	03 c0       	rjmp	.+6      	; 0x1caa <main+0x2b8>
				} else {
					returnTime--;
    1ca4:	81 50       	subi	r24, 0x01	; 1
    1ca6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <returnTime>
				}
			}
			if (!editValue.isGrabbed) {
    1caa:	a2 e8       	ldi	r26, 0x82	; 130
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	8c 91       	ld	r24, X
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <main+0x2c4>
				assignEditDigit();
    1cb4:	0f d5       	rcall	.+2590   	; 0x26d4 <__TEXT_REGION_LENGTH__+0x6d4>
			}
		}
		

		if (!alarm.isTurnedOff) {
    1cb6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <alarm+0x1>
    1cba:	81 11       	cpse	r24, r1
    1cbc:	15 c0       	rjmp	.+42     	; 0x1ce8 <main+0x2f6>
			if (alarm.beeper.canBeep && alarm.isActive) {
    1cbe:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <alarm+0x6>
    1cc2:	88 23       	and	r24, r24
    1cc4:	49 f0       	breq	.+18     	; 0x1cd8 <main+0x2e6>
    1cc6:	ef ed       	ldi	r30, 0xDF	; 223
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 23       	and	r24, r24
    1cce:	21 f0       	breq	.+8      	; 0x1cd8 <main+0x2e6>
				ledBlinking.isCanInit = true;
    1cd0:	e1 e0       	ldi	r30, 0x01	; 1
    1cd2:	a6 e6       	ldi	r26, 0x66	; 102
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	ec 93       	st	X, r30
			}
			if (!hourBeep.beeper.canBeep) {
    1cd8:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <hourBeep+0x4>
    1cdc:	81 11       	cpse	r24, r1
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <main+0x304>
				beepController(&alarm.beeper);
    1ce0:	84 ee       	ldi	r24, 0xE4	; 228
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	2b dd       	rcall	.-1450   	; 0x173c <_Z14beepControllerP6Beeper>
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <main+0x304>
			}
		} else {
			alarm.beeper.canBeep = false;
    1ce8:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <alarm+0x6>
		}
		if (!nightMode.isActive && !alarm.beeper.canBeep) {
    1cec:	d1 01       	movw	r26, r2
    1cee:	8c 91       	ld	r24, X
    1cf0:	81 11       	cpse	r24, r1
    1cf2:	0c c0       	rjmp	.+24     	; 0x1d0c <main+0x31a>
    1cf4:	08 c0       	rjmp	.+16     	; 0x1d06 <main+0x314>
    1cf6:	f1 01       	movw	r30, r2
    1cf8:	80 81       	ld	r24, Z
    1cfa:	81 11       	cpse	r24, r1
    1cfc:	07 c0       	rjmp	.+14     	; 0x1d0c <main+0x31a>
    1cfe:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <alarm+0x6>
    1d02:	81 11       	cpse	r24, r1
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <main+0x31a>
			beepController(&hourBeep.beeper);
    1d06:	8a ef       	ldi	r24, 0xFA	; 250
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	18 dd       	rcall	.-1488   	; 0x173c <_Z14beepControllerP6Beeper>
		}
		tubeAsMode();
    1d0c:	56 d6       	rcall	.+3244   	; 0x29ba <__TEXT_REGION_LENGTH__+0x9ba>
	initMillis();
}

int main(void) {
	init();
	while (true) {
    1d0e:	94 ce       	rjmp	.-728    	; 0x1a38 <main+0x46>
					hourBeep.lastHour = dateTime.hour;
					hourBeep.beeper.canBeep = true;
					hourBeep.beeper.isCanInit = true;
				} 
			}
			tube.isDoteActive[4] = alarm.isActive;
    1d10:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <tube+0x10>
			tube.isDoteActive[5] = hourBeep.isActive;
    1d14:	f1 e0       	ldi	r31, 0x01	; 1
    1d16:	f0 93 b5 00 	sts	0x00B5, r31	; 0x8000b5 <tube+0x11>
			
			tubeMode = tm_ShowTime;
    1d1a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <tubeMode>
			if (showDate.isActive) {
    1d1e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <showDate+0x2>
    1d22:	81 11       	cpse	r24, r1
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <main+0x33e>
    1d26:	16 cf       	rjmp	.-468    	; 0x1b54 <main+0x162>
				if (dateTime.sec >= showDate.start && dateTime.sec <= showDate.stop) {
					tubeMode = tm_ShowDate;
				}
			}
			
			if (dateTime.min % 10 == 0 && dateTime.sec < 3 && etching.lastMin != dateTime.min) {
    1d28:	d4 01       	movw	r26, r8
    1d2a:	11 96       	adiw	r26, 0x01	; 1
    1d2c:	2c 91       	ld	r18, X
    1d2e:	12 cf       	rjmp	.-476    	; 0x1b54 <main+0x162>
			tube.isDoteActive[4] = alarm.isActive;
			tube.isDoteActive[5] = hourBeep.isActive;
			
			tubeMode = tm_ShowTime;
			if (showDate.isActive) {
				if (dateTime.sec >= showDate.start && dateTime.sec <= showDate.stop) {
    1d30:	f4 01       	movw	r30, r8
    1d32:	80 81       	ld	r24, Z
    1d34:	ad e0       	ldi	r26, 0x0D	; 13
    1d36:	b1 e0       	ldi	r27, 0x01	; 1
    1d38:	9c 91       	ld	r25, X
    1d3a:	89 17       	cp	r24, r25
    1d3c:	08 f0       	brcs	.+2      	; 0x1d40 <main+0x34e>
    1d3e:	f3 ce       	rjmp	.-538    	; 0x1b26 <main+0x134>
    1d40:	f3 cf       	rjmp	.-26     	; 0x1d28 <main+0x336>

00001d42 <_Z8i2c_initv>:
#include <compat/twi.h>

//#define SCL_CLOCK  ((F_CPU / 10000L)-16) / 2

void i2c_init(void) {
  TWSR = 0;                        
    1d42:	11 b8       	out	0x01, r1	; 1
  TWBR = 392; 
    1d44:	88 e8       	ldi	r24, 0x88	; 136
    1d46:	80 b9       	out	0x00, r24	; 0
    1d48:	08 95       	ret

00001d4a <_Z9i2c_starth>:
}

unsigned char i2c_start(unsigned char address) {
    uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1d4a:	94 ea       	ldi	r25, 0xA4	; 164
    1d4c:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)));
    1d4e:	06 b6       	in	r0, 0x36	; 54
    1d50:	07 fe       	sbrs	r0, 7
    1d52:	fd cf       	rjmp	.-6      	; 0x1d4e <_Z9i2c_starth+0x4>
	twst = TW_STATUS & 0xF8;
    1d54:	91 b1       	in	r25, 0x01	; 1
    1d56:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1d58:	98 30       	cpi	r25, 0x08	; 8
    1d5a:	11 f0       	breq	.+4      	; 0x1d60 <_Z9i2c_starth+0x16>
    1d5c:	90 31       	cpi	r25, 0x10	; 16
    1d5e:	79 f4       	brne	.+30     	; 0x1d7e <_Z9i2c_starth+0x34>
	TWDR = address;
    1d60:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d62:	84 e8       	ldi	r24, 0x84	; 132
    1d64:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
    1d66:	06 b6       	in	r0, 0x36	; 54
    1d68:	07 fe       	sbrs	r0, 7
    1d6a:	fd cf       	rjmp	.-6      	; 0x1d66 <_Z9i2c_starth+0x1c>
	twst = TW_STATUS & 0xF8;
    1d6c:	91 b1       	in	r25, 0x01	; 1
    1d6e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1d70:	98 31       	cpi	r25, 0x18	; 24
    1d72:	39 f0       	breq	.+14     	; 0x1d82 <_Z9i2c_starth+0x38>
unsigned char i2c_start(unsigned char address) {
    uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 34       	cpi	r25, 0x40	; 64
    1d78:	29 f4       	brne	.+10     	; 0x1d84 <_Z9i2c_starth+0x3a>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	08 95       	ret
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	08 95       	ret
	TWDR = address;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	return 0;
    1d82:	80 e0       	ldi	r24, 0x00	; 0
}
    1d84:	08 95       	ret

00001d86 <_Z14i2c_start_waith>:

void i2c_start_wait(unsigned char address) {
    uint8_t   twst;
	while ( 1 ) {
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1d86:	24 ea       	ldi	r18, 0xA4	; 164
    	while(!(TWCR & (1<<TWINT)));
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1d88:	34 e8       	ldi	r19, 0x84	; 132
    	while(!(TWCR & (1<<TWINT)));
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) {    	    
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1d8a:	44 e9       	ldi	r20, 0x94	; 148
}

void i2c_start_wait(unsigned char address) {
    uint8_t   twst;
	while ( 1 ) {
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1d8c:	26 bf       	out	0x36, r18	; 54
    	while(!(TWCR & (1<<TWINT)));
    1d8e:	06 b6       	in	r0, 0x36	; 54
    1d90:	07 fe       	sbrs	r0, 7
    1d92:	fd cf       	rjmp	.-6      	; 0x1d8e <_Z14i2c_start_waith+0x8>
    	twst = TW_STATUS & 0xF8;
    1d94:	91 b1       	in	r25, 0x01	; 1
    1d96:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1d98:	98 30       	cpi	r25, 0x08	; 8
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <_Z14i2c_start_waith+0x1a>
    1d9c:	90 31       	cpi	r25, 0x10	; 16
    1d9e:	b1 f7       	brne	.-20     	; 0x1d8c <_Z14i2c_start_waith+0x6>
    	TWDR = address;
    1da0:	83 b9       	out	0x03, r24	; 3
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1da2:	36 bf       	out	0x36, r19	; 54
    	while(!(TWCR & (1<<TWINT)));
    1da4:	06 b6       	in	r0, 0x36	; 54
    1da6:	07 fe       	sbrs	r0, 7
    1da8:	fd cf       	rjmp	.-6      	; 0x1da4 <_Z14i2c_start_waith+0x1e>
    	twst = TW_STATUS & 0xF8;
    1daa:	91 b1       	in	r25, 0x01	; 1
    1dac:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) {    	    
    1dae:	90 32       	cpi	r25, 0x20	; 32
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <_Z14i2c_start_waith+0x30>
    1db2:	98 35       	cpi	r25, 0x58	; 88
    1db4:	29 f4       	brne	.+10     	; 0x1dc0 <_Z14i2c_start_waith+0x3a>
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1db6:	46 bf       	out	0x36, r20	; 54
	        while(TWCR & (1<<TWSTO));
    1db8:	06 b6       	in	r0, 0x36	; 54
    1dba:	04 fc       	sbrc	r0, 4
    1dbc:	fd cf       	rjmp	.-6      	; 0x1db8 <_Z14i2c_start_waith+0x32>
    1dbe:	e6 cf       	rjmp	.-52     	; 0x1d8c <_Z14i2c_start_waith+0x6>
    1dc0:	08 95       	ret

00001dc2 <_Z13i2c_rep_starth>:
    	break;
     }
}

unsigned char i2c_rep_start(unsigned char address) {
    return i2c_start( address );
    1dc2:	c3 df       	rcall	.-122    	; 0x1d4a <_Z9i2c_starth>
}
    1dc4:	08 95       	ret

00001dc6 <_Z8i2c_stopv>:

void i2c_stop(void) {
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1dc6:	84 e9       	ldi	r24, 0x94	; 148
    1dc8:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));
    1dca:	06 b6       	in	r0, 0x36	; 54
    1dcc:	04 fc       	sbrc	r0, 4
    1dce:	fd cf       	rjmp	.-6      	; 0x1dca <_Z8i2c_stopv+0x4>
}
    1dd0:	08 95       	ret

00001dd2 <_Z9i2c_writeh>:

unsigned char i2c_write( unsigned char data ) {	
    uint8_t   twst;
	TWDR = data;
    1dd2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1dd4:	84 e8       	ldi	r24, 0x84	; 132
    1dd6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
    1dd8:	06 b6       	in	r0, 0x36	; 54
    1dda:	07 fe       	sbrs	r0, 7
    1ddc:	fd cf       	rjmp	.-6      	; 0x1dd8 <_Z9i2c_writeh+0x6>
	twst = TW_STATUS & 0xF8;
    1dde:	91 b1       	in	r25, 0x01	; 1
    1de0:	98 7f       	andi	r25, 0xF8	; 248
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	98 32       	cpi	r25, 0x28	; 40
    1de6:	09 f4       	brne	.+2      	; 0x1dea <_Z9i2c_writeh+0x18>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
    1dea:	08 95       	ret

00001dec <_Z11i2c_readAckv>:

unsigned char i2c_readAck(void) {
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1dec:	84 ec       	ldi	r24, 0xC4	; 196
    1dee:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
    1df0:	06 b6       	in	r0, 0x36	; 54
    1df2:	07 fe       	sbrs	r0, 7
    1df4:	fd cf       	rjmp	.-6      	; 0x1df0 <_Z11i2c_readAckv+0x4>
    return TWDR;
    1df6:	83 b1       	in	r24, 0x03	; 3
}
    1df8:	08 95       	ret

00001dfa <_Z11i2c_readNakv>:
unsigned char i2c_readNak(void) {
	TWCR = (1<<TWINT) | (1<<TWEN);
    1dfa:	84 e8       	ldi	r24, 0x84	; 132
    1dfc:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
    1dfe:	06 b6       	in	r0, 0x36	; 54
    1e00:	07 fe       	sbrs	r0, 7
    1e02:	fd cf       	rjmp	.-6      	; 0x1dfe <_Z11i2c_readNakv+0x4>
    return TWDR;
    1e04:	83 b1       	in	r24, 0x03	; 3
    1e06:	08 95       	ret

00001e08 <__divmodhi4>:
    1e08:	97 fb       	bst	r25, 7
    1e0a:	07 2e       	mov	r0, r23
    1e0c:	16 f4       	brtc	.+4      	; 0x1e12 <__divmodhi4+0xa>
    1e0e:	00 94       	com	r0
    1e10:	06 d0       	rcall	.+12     	; 0x1e1e <__divmodhi4_neg1>
    1e12:	77 fd       	sbrc	r23, 7
    1e14:	08 d0       	rcall	.+16     	; 0x1e26 <__divmodhi4_neg2>
    1e16:	4a d0       	rcall	.+148    	; 0x1eac <__udivmodhi4>
    1e18:	07 fc       	sbrc	r0, 7
    1e1a:	05 d0       	rcall	.+10     	; 0x1e26 <__divmodhi4_neg2>
    1e1c:	3e f4       	brtc	.+14     	; 0x1e2c <__divmodhi4_exit>

00001e1e <__divmodhi4_neg1>:
    1e1e:	90 95       	com	r25
    1e20:	81 95       	neg	r24
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	08 95       	ret

00001e26 <__divmodhi4_neg2>:
    1e26:	70 95       	com	r23
    1e28:	61 95       	neg	r22
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255

00001e2c <__divmodhi4_exit>:
    1e2c:	08 95       	ret

00001e2e <__umulhisi3>:
    1e2e:	a2 9f       	mul	r26, r18
    1e30:	b0 01       	movw	r22, r0
    1e32:	b3 9f       	mul	r27, r19
    1e34:	c0 01       	movw	r24, r0
    1e36:	a3 9f       	mul	r26, r19
    1e38:	01 d0       	rcall	.+2      	; 0x1e3c <__umulhisi3+0xe>
    1e3a:	b2 9f       	mul	r27, r18
    1e3c:	70 0d       	add	r23, r0
    1e3e:	81 1d       	adc	r24, r1
    1e40:	11 24       	eor	r1, r1
    1e42:	91 1d       	adc	r25, r1
    1e44:	08 95       	ret

00001e46 <__adddi3>:
    1e46:	2a 0d       	add	r18, r10
    1e48:	3b 1d       	adc	r19, r11
    1e4a:	4c 1d       	adc	r20, r12
    1e4c:	5d 1d       	adc	r21, r13
    1e4e:	6e 1d       	adc	r22, r14
    1e50:	7f 1d       	adc	r23, r15
    1e52:	80 1f       	adc	r24, r16
    1e54:	91 1f       	adc	r25, r17
    1e56:	08 95       	ret

00001e58 <__adddi3_s8>:
    1e58:	00 24       	eor	r0, r0
    1e5a:	a7 fd       	sbrc	r26, 7
    1e5c:	00 94       	com	r0
    1e5e:	2a 0f       	add	r18, r26
    1e60:	30 1d       	adc	r19, r0
    1e62:	40 1d       	adc	r20, r0
    1e64:	50 1d       	adc	r21, r0
    1e66:	60 1d       	adc	r22, r0
    1e68:	70 1d       	adc	r23, r0
    1e6a:	80 1d       	adc	r24, r0
    1e6c:	90 1d       	adc	r25, r0
    1e6e:	08 95       	ret

00001e70 <__subdi3>:
    1e70:	2a 19       	sub	r18, r10
    1e72:	3b 09       	sbc	r19, r11
    1e74:	4c 09       	sbc	r20, r12
    1e76:	5d 09       	sbc	r21, r13
    1e78:	6e 09       	sbc	r22, r14
    1e7a:	7f 09       	sbc	r23, r15
    1e7c:	80 0b       	sbc	r24, r16
    1e7e:	91 0b       	sbc	r25, r17
    1e80:	08 95       	ret

00001e82 <__cmpdi2>:
    1e82:	2a 15       	cp	r18, r10
    1e84:	3b 05       	cpc	r19, r11
    1e86:	4c 05       	cpc	r20, r12
    1e88:	5d 05       	cpc	r21, r13
    1e8a:	6e 05       	cpc	r22, r14
    1e8c:	7f 05       	cpc	r23, r15
    1e8e:	80 07       	cpc	r24, r16
    1e90:	91 07       	cpc	r25, r17
    1e92:	08 95       	ret

00001e94 <__cmpdi2_s8>:
    1e94:	00 24       	eor	r0, r0
    1e96:	a7 fd       	sbrc	r26, 7
    1e98:	00 94       	com	r0
    1e9a:	2a 17       	cp	r18, r26
    1e9c:	30 05       	cpc	r19, r0
    1e9e:	40 05       	cpc	r20, r0
    1ea0:	50 05       	cpc	r21, r0
    1ea2:	60 05       	cpc	r22, r0
    1ea4:	70 05       	cpc	r23, r0
    1ea6:	80 05       	cpc	r24, r0
    1ea8:	90 05       	cpc	r25, r0
    1eaa:	08 95       	ret

00001eac <__udivmodhi4>:
    1eac:	aa 1b       	sub	r26, r26
    1eae:	bb 1b       	sub	r27, r27
    1eb0:	51 e1       	ldi	r21, 0x11	; 17
    1eb2:	07 c0       	rjmp	.+14     	; 0x1ec2 <__udivmodhi4_ep>

00001eb4 <__udivmodhi4_loop>:
    1eb4:	aa 1f       	adc	r26, r26
    1eb6:	bb 1f       	adc	r27, r27
    1eb8:	a6 17       	cp	r26, r22
    1eba:	b7 07       	cpc	r27, r23
    1ebc:	10 f0       	brcs	.+4      	; 0x1ec2 <__udivmodhi4_ep>
    1ebe:	a6 1b       	sub	r26, r22
    1ec0:	b7 0b       	sbc	r27, r23

00001ec2 <__udivmodhi4_ep>:
    1ec2:	88 1f       	adc	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	5a 95       	dec	r21
    1ec8:	a9 f7       	brne	.-22     	; 0x1eb4 <__udivmodhi4_loop>
    1eca:	80 95       	com	r24
    1ecc:	90 95       	com	r25
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	08 95       	ret

00001ed4 <eeprom_read_byte>:
    1ed4:	e1 99       	sbic	0x1c, 1	; 28
    1ed6:	fe cf       	rjmp	.-4      	; 0x1ed4 <eeprom_read_byte>
    1ed8:	9f bb       	out	0x1f, r25	; 31
    1eda:	8e bb       	out	0x1e, r24	; 30
    1edc:	e0 9a       	sbi	0x1c, 0	; 28
    1ede:	99 27       	eor	r25, r25
    1ee0:	8d b3       	in	r24, 0x1d	; 29
    1ee2:	08 95       	ret

00001ee4 <eeprom_update_byte>:
    1ee4:	26 2f       	mov	r18, r22

00001ee6 <eeprom_update_r18>:
    1ee6:	e1 99       	sbic	0x1c, 1	; 28
    1ee8:	fe cf       	rjmp	.-4      	; 0x1ee6 <eeprom_update_r18>
    1eea:	9f bb       	out	0x1f, r25	; 31
    1eec:	8e bb       	out	0x1e, r24	; 30
    1eee:	e0 9a       	sbi	0x1c, 0	; 28
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	0d b2       	in	r0, 0x1d	; 29
    1ef4:	02 16       	cp	r0, r18
    1ef6:	31 f0       	breq	.+12     	; 0x1f04 <eeprom_update_r18+0x1e>
    1ef8:	2d bb       	out	0x1d, r18	; 29
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	e2 9a       	sbi	0x1c, 2	; 28
    1f00:	e1 9a       	sbi	0x1c, 1	; 28
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	08 95       	ret

00001f06 <_exit>:
    1f06:	f8 94       	cli

00001f08 <__stop_program>:
    1f08:	ff cf       	rjmp	.-2      	; 0x1f08 <__stop_program>
