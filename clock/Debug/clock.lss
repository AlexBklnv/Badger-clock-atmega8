
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001861  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b5  00800060  00800060  0000185a  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  0000185a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000170  00000000  00000000  000018d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ea9  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008f5  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001814  00000000  00000000  000041de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000474  00000000  00000000  000059f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b5c  00000000  00000000  00005e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001126  00000000  00000000  000069c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  00007aea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__vector_9>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
      22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
      24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>
      26:	05 c5       	rjmp	.+2570   	; 0xa32 <_Z20firstButtonLongPressv+0x28>
      28:	1b c5       	rjmp	.+2614   	; 0xa60 <_Z20firstButtonLongPressv+0x56>
      2a:	70 c5       	rjmp	.+2784   	; 0xb0c <_Z20firstButtonLongPressv+0x102>
      2c:	7d c5       	rjmp	.+2810   	; 0xb28 <_Z20firstButtonLongPressv+0x11e>
      2e:	86 c5       	rjmp	.+2828   	; 0xb3c <_Z20firstButtonLongPressv+0x132>
      30:	2e c5       	rjmp	.+2652   	; 0xa8e <_Z20firstButtonLongPressv+0x84>
      32:	42 c5       	rjmp	.+2692   	; 0xab8 <_Z20firstButtonLongPressv+0xae>
      34:	56 c5       	rjmp	.+2732   	; 0xae2 <_Z20firstButtonLongPressv+0xd8>
      36:	8c c5       	rjmp	.+2840   	; 0xb50 <_Z20firstButtonLongPressv+0x146>

00000038 <__ctors_end>:
      38:	11 24       	eor	r1, r1
      3a:	1f be       	out	0x3f, r1	; 63
      3c:	cf e5       	ldi	r28, 0x5F	; 95
      3e:	d4 e0       	ldi	r29, 0x04	; 4
      40:	de bf       	out	0x3e, r29	; 62
      42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_clear_bss>:
      44:	21 e0       	ldi	r18, 0x01	; 1
      46:	a0 e6       	ldi	r26, 0x60	; 96
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	a5 31       	cpi	r26, 0x15	; 21
      50:	b2 07       	cpc	r27, r18
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	41 d9       	rcall	.-3454   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d1>
      56:	b5 cb       	rjmp	.-2198   	; 0xfffff7c2 <__eeprom_end+0xff7ef7bb>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z10initMillisv>:
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
}
      5a:	83 b7       	in	r24, 0x33	; 51
      5c:	82 60       	ori	r24, 0x02	; 2
      5e:	83 bf       	out	0x33, r24	; 51
      60:	89 b7       	in	r24, 0x39	; 57
      62:	81 60       	ori	r24, 0x01	; 1
      64:	89 bf       	out	0x39, r24	; 57
      66:	78 94       	sei
      68:	08 95       	ret

0000006a <__vector_9>:
      6a:	1f 92       	push	r1
      6c:	0f 92       	push	r0
      6e:	0f b6       	in	r0, 0x3f	; 63
      70:	0f 92       	push	r0
      72:	11 24       	eor	r1, r1
      74:	2f 93       	push	r18
      76:	3f 93       	push	r19
      78:	4f 93       	push	r20
      7a:	5f 93       	push	r21
      7c:	6f 93       	push	r22
      7e:	7f 93       	push	r23
      80:	8f 93       	push	r24
      82:	9f 93       	push	r25
      84:	af 93       	push	r26
      86:	ef 93       	push	r30
      88:	ff 93       	push	r31
      8a:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <_1000us>
      8e:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <_1000us+0x1>
      92:	f3 95       	inc	r31
      94:	f0 93 0c 01 	sts	0x010C, r31	; 0x80010c <_1000us+0x1>
      98:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <_1000us>
      9c:	e8 3e       	cpi	r30, 0xE8	; 232
      9e:	83 e0       	ldi	r24, 0x03	; 3
      a0:	f8 07       	cpc	r31, r24
      a2:	60 f1       	brcs	.+88     	; 0xfc <__vector_9+0x92>
      a4:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <_millis>
      a8:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <_millis+0x1>
      ac:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <_millis+0x2>
      b0:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <_millis+0x3>
      b4:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <_millis+0x4>
      b8:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <_millis+0x5>
      bc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_millis+0x6>
      c0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_millis+0x7>
      c4:	a1 e0       	ldi	r26, 0x01	; 1
      c6:	26 db       	rcall	.-2484   	; 0xfffff714 <__eeprom_end+0xff7ef70d>
      c8:	e8 5e       	subi	r30, 0xE8	; 232
      ca:	f3 40       	sbci	r31, 0x03	; 3
      cc:	e8 3e       	cpi	r30, 0xE8	; 232
      ce:	a3 e0       	ldi	r26, 0x03	; 3
      d0:	fa 07       	cpc	r31, r26
      d2:	c0 f7       	brcc	.-16     	; 0xc4 <__vector_9+0x5a>
      d4:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <_millis>
      d8:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <_millis+0x1>
      dc:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <_millis+0x2>
      e0:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <_millis+0x3>
      e4:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_millis+0x4>
      e8:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_millis+0x5>
      ec:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_millis+0x6>
      f0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_millis+0x7>
      f4:	f0 93 0c 01 	sts	0x010C, r31	; 0x80010c <_1000us+0x1>
      f8:	e0 93 0b 01 	sts	0x010B, r30	; 0x80010b <_1000us>
      fc:	ff 91       	pop	r31
      fe:	ef 91       	pop	r30
     100:	af 91       	pop	r26
     102:	9f 91       	pop	r25
     104:	8f 91       	pop	r24
     106:	7f 91       	pop	r23
     108:	6f 91       	pop	r22
     10a:	5f 91       	pop	r21
     10c:	4f 91       	pop	r20
     10e:	3f 91       	pop	r19
     110:	2f 91       	pop	r18
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <_Z6millisv>:
     11c:	f8 94       	cli
     11e:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <_millis>
     122:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <_millis+0x1>
     126:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <_millis+0x2>
     12a:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <_millis+0x3>
     12e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <_millis+0x4>
     132:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <_millis+0x5>
     136:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_millis+0x6>
     13a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_millis+0x7>
     13e:	78 94       	sei
     140:	08 95       	ret

00000142 <_Z15translitDecoderc>:
     142:	e8 e9       	ldi	r30, 0x98	; 152
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	12 8a       	std	Z+18, r1	; 0x12
     148:	13 8a       	std	Z+19, r1	; 0x13
     14a:	14 8a       	std	Z+20, r1	; 0x14
     14c:	15 8a       	std	Z+21, r1	; 0x15
     14e:	88 23       	and	r24, r24
     150:	39 f0       	breq	.+14     	; 0x160 <_Z15translitDecoderc+0x1e>
     152:	ee ea       	ldi	r30, 0xAE	; 174
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	98 2f       	mov	r25, r24
     158:	91 70       	andi	r25, 0x01	; 1
     15a:	92 93       	st	-Z, r25
     15c:	86 95       	lsr	r24
     15e:	d9 f7       	brne	.-10     	; 0x156 <_Z15translitDecoderc+0x14>
     160:	08 95       	ret

00000162 <_Z10tubeSwitchv>:
     162:	5f 92       	push	r5
     164:	6f 92       	push	r6
     166:	7f 92       	push	r7
     168:	8f 92       	push	r8
     16a:	9f 92       	push	r9
     16c:	af 92       	push	r10
     16e:	bf 92       	push	r11
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <bright>
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	59 f0       	breq	.+22     	; 0x19e <_Z10tubeSwitchv+0x3c>
     188:	28 f0       	brcs	.+10     	; 0x194 <_Z10tubeSwitchv+0x32>
     18a:	82 30       	cpi	r24, 0x02	; 2
     18c:	79 f0       	breq	.+30     	; 0x1ac <_Z10tubeSwitchv+0x4a>
     18e:	83 30       	cpi	r24, 0x03	; 3
     190:	a1 f0       	breq	.+40     	; 0x1ba <_Z10tubeSwitchv+0x58>
     192:	1a c0       	rjmp	.+52     	; 0x1c8 <_Z10tubeSwitchv+0x66>
     194:	82 e0       	ldi	r24, 0x02	; 2
     196:	8a 95       	dec	r24
     198:	f1 f7       	brne	.-4      	; 0x196 <_Z10tubeSwitchv+0x34>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <_Z10tubeSwitchv+0x3a>
     19c:	7e c0       	rjmp	.+252    	; 0x29a <_Z10tubeSwitchv+0x138>
     19e:	e3 e1       	ldi	r30, 0x13	; 19
     1a0:	f2 e0       	ldi	r31, 0x02	; 2
     1a2:	31 97       	sbiw	r30, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <_Z10tubeSwitchv+0x40>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <_Z10tubeSwitchv+0x46>
     1a8:	00 00       	nop
     1aa:	77 c0       	rjmp	.+238    	; 0x29a <_Z10tubeSwitchv+0x138>
     1ac:	89 e2       	ldi	r24, 0x29	; 41
     1ae:	94 e0       	ldi	r25, 0x04	; 4
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_Z10tubeSwitchv+0x4e>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_Z10tubeSwitchv+0x54>
     1b6:	00 00       	nop
     1b8:	70 c0       	rjmp	.+224    	; 0x29a <_Z10tubeSwitchv+0x138>
     1ba:	ef e3       	ldi	r30, 0x3F	; 63
     1bc:	f6 e0       	ldi	r31, 0x06	; 6
     1be:	31 97       	sbiw	r30, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z10tubeSwitchv+0x5c>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_Z10tubeSwitchv+0x62>
     1c4:	00 00       	nop
     1c6:	69 c0       	rjmp	.+210    	; 0x29a <_Z10tubeSwitchv+0x138>
     1c8:	a8 9a       	sbi	0x15, 0	; 21
     1ca:	a9 9a       	sbi	0x15, 1	; 21
     1cc:	aa 9a       	sbi	0x15, 2	; 21
     1ce:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     1d2:	88 23       	and	r24, r24
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <_Z10tubeSwitchv+0x76>
     1d6:	4a c0       	rjmp	.+148    	; 0x26c <_Z10tubeSwitchv+0x10a>
     1d8:	c8 e9       	ldi	r28, 0x98	; 152
     1da:	d0 e0       	ldi	r29, 0x00	; 0
     1dc:	0f 2e       	mov	r0, r31
     1de:	fe e9       	ldi	r31, 0x9E	; 158
     1e0:	6f 2e       	mov	r6, r31
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	7f 2e       	mov	r7, r31
     1e6:	f0 2d       	mov	r31, r0
     1e8:	4e 01       	movw	r8, r28
     1ea:	55 24       	eor	r5, r5
     1ec:	53 94       	inc	r5
     1ee:	89 91       	ld	r24, Y+
     1f0:	88 23       	and	r24, r24
     1f2:	c1 f1       	breq	.+112    	; 0x264 <_Z10tubeSwitchv+0x102>
     1f4:	93 df       	rcall	.-218    	; 0x11c <_Z6millisv>
     1f6:	f4 01       	movw	r30, r8
     1f8:	a4 8c       	ldd	r10, Z+28	; 0x1c
     1fa:	b5 8c       	ldd	r11, Z+29	; 0x1d
     1fc:	c6 8c       	ldd	r12, Z+30	; 0x1e
     1fe:	d7 8c       	ldd	r13, Z+31	; 0x1f
     200:	e0 a0       	ldd	r14, Z+32	; 0x20
     202:	f1 a0       	ldd	r15, Z+33	; 0x21
     204:	02 a1       	ldd	r16, Z+34	; 0x22
     206:	13 a1       	ldd	r17, Z+35	; 0x23
     208:	91 da       	rcall	.-2782   	; 0xfffff72c <__eeprom_end+0xff7ef725>
     20a:	25 39       	cpi	r18, 0x95	; 149
     20c:	31 05       	cpc	r19, r1
     20e:	41 05       	cpc	r20, r1
     210:	51 05       	cpc	r21, r1
     212:	61 05       	cpc	r22, r1
     214:	71 05       	cpc	r23, r1
     216:	81 05       	cpc	r24, r1
     218:	91 05       	cpc	r25, r1
     21a:	11 f1       	breq	.+68     	; 0x260 <_Z10tubeSwitchv+0xfe>
     21c:	08 f1       	brcs	.+66     	; 0x260 <_Z10tubeSwitchv+0xfe>
     21e:	5d 82       	std	Y+5, r5	; 0x05
     220:	7d df       	rcall	.-262    	; 0x11c <_Z6millisv>
     222:	f4 01       	movw	r30, r8
     224:	a4 8c       	ldd	r10, Z+28	; 0x1c
     226:	b5 8c       	ldd	r11, Z+29	; 0x1d
     228:	c6 8c       	ldd	r12, Z+30	; 0x1e
     22a:	d7 8c       	ldd	r13, Z+31	; 0x1f
     22c:	e0 a0       	ldd	r14, Z+32	; 0x20
     22e:	f1 a0       	ldd	r15, Z+33	; 0x21
     230:	02 a1       	ldd	r16, Z+34	; 0x22
     232:	13 a1       	ldd	r17, Z+35	; 0x23
     234:	7b da       	rcall	.-2826   	; 0xfffff72c <__eeprom_end+0xff7ef725>
     236:	25 32       	cpi	r18, 0x25	; 37
     238:	32 40       	sbci	r19, 0x02	; 2
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	61 05       	cpc	r22, r1
     240:	71 05       	cpc	r23, r1
     242:	81 05       	cpc	r24, r1
     244:	91 05       	cpc	r25, r1
     246:	79 f0       	breq	.+30     	; 0x266 <_Z10tubeSwitchv+0x104>
     248:	70 f0       	brcs	.+28     	; 0x266 <_Z10tubeSwitchv+0x104>
     24a:	68 df       	rcall	.-304    	; 0x11c <_Z6millisv>
     24c:	f4 01       	movw	r30, r8
     24e:	24 8f       	std	Z+28, r18	; 0x1c
     250:	35 8f       	std	Z+29, r19	; 0x1d
     252:	46 8f       	std	Z+30, r20	; 0x1e
     254:	57 8f       	std	Z+31, r21	; 0x1f
     256:	60 a3       	std	Z+32, r22	; 0x20
     258:	71 a3       	std	Z+33, r23	; 0x21
     25a:	82 a3       	std	Z+34, r24	; 0x22
     25c:	93 a3       	std	Z+35, r25	; 0x23
     25e:	03 c0       	rjmp	.+6      	; 0x266 <_Z10tubeSwitchv+0x104>
     260:	1d 82       	std	Y+5, r1	; 0x05
     262:	01 c0       	rjmp	.+2      	; 0x266 <_Z10tubeSwitchv+0x104>
     264:	1d 82       	std	Y+5, r1	; 0x05
     266:	c6 15       	cp	r28, r6
     268:	d7 05       	cpc	r29, r7
     26a:	09 f6       	brne	.-126    	; 0x1ee <_Z10tubeSwitchv+0x8c>
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	96 e0       	ldi	r25, 0x06	; 6
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <_Z10tubeSwitchv+0x10e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <_Z10tubeSwitchv+0x114>
     276:	00 00       	nop
     278:	c7 9a       	sbi	0x18, 7	; 24
     27a:	93 9a       	sbi	0x12, 3	; 18
     27c:	92 9a       	sbi	0x12, 2	; 18
     27e:	c6 9a       	sbi	0x18, 6	; 24
     280:	96 9a       	sbi	0x12, 6	; 18
     282:	97 9a       	sbi	0x12, 7	; 18
     284:	c0 9a       	sbi	0x18, 0	; 24
     286:	c1 9a       	sbi	0x18, 1	; 24
     288:	ab 98       	cbi	0x15, 3	; 21
     28a:	94 98       	cbi	0x12, 4	; 18
     28c:	ef e1       	ldi	r30, 0x1F	; 31
     28e:	f3 e0       	ldi	r31, 0x03	; 3
     290:	31 97       	sbiw	r30, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <_Z10tubeSwitchv+0x12e>
     294:	00 c0       	rjmp	.+0      	; 0x296 <_Z10tubeSwitchv+0x134>
     296:	00 00       	nop
     298:	08 c0       	rjmp	.+16     	; 0x2aa <_Z10tubeSwitchv+0x148>
     29a:	a8 9a       	sbi	0x15, 0	; 21
     29c:	a9 9a       	sbi	0x15, 1	; 21
     29e:	aa 9a       	sbi	0x15, 2	; 21
     2a0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     2a4:	81 11       	cpse	r24, r1
     2a6:	98 cf       	rjmp	.-208    	; 0x1d8 <_Z10tubeSwitchv+0x76>
     2a8:	e1 cf       	rjmp	.-62     	; 0x26c <_Z10tubeSwitchv+0x10a>
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	bf 90       	pop	r11
     2bc:	af 90       	pop	r10
     2be:	9f 90       	pop	r9
     2c0:	8f 90       	pop	r8
     2c2:	7f 90       	pop	r7
     2c4:	6f 90       	pop	r6
     2c6:	5f 90       	pop	r5
     2c8:	08 95       	ret

000002ca <_Z12resetButtonsv>:
     2ca:	ee eb       	ldi	r30, 0xBE	; 190
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	10 82       	st	Z, r1
     2d0:	12 82       	std	Z+2, r1	; 0x02
     2d2:	11 82       	std	Z+1, r1	; 0x01
     2d4:	15 82       	std	Z+5, r1	; 0x05
     2d6:	16 82       	std	Z+6, r1	; 0x06
     2d8:	17 82       	std	Z+7, r1	; 0x07
     2da:	10 86       	std	Z+8, r1	; 0x08
     2dc:	11 86       	std	Z+9, r1	; 0x09
     2de:	12 86       	std	Z+10, r1	; 0x0a
     2e0:	13 86       	std	Z+11, r1	; 0x0b
     2e2:	14 86       	std	Z+12, r1	; 0x0c
     2e4:	15 86       	std	Z+13, r1	; 0x0d
     2e6:	16 86       	std	Z+14, r1	; 0x0e
     2e8:	17 86       	std	Z+15, r1	; 0x0f
     2ea:	10 8a       	std	Z+16, r1	; 0x10
     2ec:	11 8a       	std	Z+17, r1	; 0x11
     2ee:	12 8a       	std	Z+18, r1	; 0x12
     2f0:	13 8a       	std	Z+19, r1	; 0x13
     2f2:	14 8a       	std	Z+20, r1	; 0x14
     2f4:	08 95       	ret

000002f6 <_Z6getADCh>:
     2f6:	97 b1       	in	r25, 0x07	; 7
     2f8:	90 7e       	andi	r25, 0xE0	; 224
     2fa:	8f 71       	andi	r24, 0x1F	; 31
     2fc:	89 2b       	or	r24, r25
     2fe:	87 b9       	out	0x07, r24	; 7
     300:	36 9a       	sbi	0x06, 6	; 6
     302:	36 99       	sbic	0x06, 6	; 6
     304:	fe cf       	rjmp	.-4      	; 0x302 <_Z6getADCh+0xc>
     306:	84 b1       	in	r24, 0x04	; 4
     308:	95 b1       	in	r25, 0x05	; 5
     30a:	08 95       	ret

0000030c <_Z14checkNightModev>:
     30c:	af 92       	push	r10
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	87 e0       	ldi	r24, 0x07	; 7
     322:	e9 df       	rcall	.-46     	; 0x2f6 <_Z6getADCh>
     324:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <nightMode+0x3>
     328:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <nightMode+0x4>
     32c:	82 17       	cp	r24, r18
     32e:	93 07       	cpc	r25, r19
     330:	4c f1       	brlt	.+82     	; 0x384 <_Z14checkNightModev+0x78>
     332:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <nightMode+0x1>
     336:	88 23       	and	r24, r24
     338:	29 f1       	breq	.+74     	; 0x384 <_Z14checkNightModev+0x78>
     33a:	f0 de       	rcall	.-544    	; 0x11c <_Z6millisv>
     33c:	e6 e8       	ldi	r30, 0x86	; 134
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	a2 84       	ldd	r10, Z+10	; 0x0a
     342:	b3 84       	ldd	r11, Z+11	; 0x0b
     344:	c4 84       	ldd	r12, Z+12	; 0x0c
     346:	d5 84       	ldd	r13, Z+13	; 0x0d
     348:	e6 84       	ldd	r14, Z+14	; 0x0e
     34a:	f7 84       	ldd	r15, Z+15	; 0x0f
     34c:	00 89       	ldd	r16, Z+16	; 0x10
     34e:	11 89       	ldd	r17, Z+17	; 0x11
     350:	ed d9       	rcall	.-3110   	; 0xfffff72c <__eeprom_end+0xff7ef725>
     352:	27 38       	cpi	r18, 0x87	; 135
     354:	33 41       	sbci	r19, 0x13	; 19
     356:	41 05       	cpc	r20, r1
     358:	51 05       	cpc	r21, r1
     35a:	61 05       	cpc	r22, r1
     35c:	71 05       	cpc	r23, r1
     35e:	81 05       	cpc	r24, r1
     360:	91 05       	cpc	r25, r1
     362:	61 f0       	breq	.+24     	; 0x37c <_Z14checkNightModev+0x70>
     364:	58 f0       	brcs	.+22     	; 0x37c <_Z14checkNightModev+0x70>
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <nightMode>
     36c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <bright>
     370:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
     374:	81 11       	cpse	r24, r1
     376:	28 c0       	rjmp	.+80     	; 0x3c8 <_Z14checkNightModev+0xbc>
     378:	c2 98       	cbi	0x18, 2	; 24
     37a:	26 c0       	rjmp	.+76     	; 0x3c8 <_Z14checkNightModev+0xbc>
     37c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <nightMode+0x1>
     380:	81 11       	cpse	r24, r1
     382:	0d c0       	rjmp	.+26     	; 0x39e <_Z14checkNightModev+0x92>
     384:	c6 e8       	ldi	r28, 0x86	; 134
     386:	d0 e0       	ldi	r29, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	89 83       	std	Y+1, r24	; 0x01
     38c:	c7 de       	rcall	.-626    	; 0x11c <_Z6millisv>
     38e:	2a 87       	std	Y+10, r18	; 0x0a
     390:	3b 87       	std	Y+11, r19	; 0x0b
     392:	4c 87       	std	Y+12, r20	; 0x0c
     394:	5d 87       	std	Y+13, r21	; 0x0d
     396:	6e 87       	std	Y+14, r22	; 0x0e
     398:	7f 87       	std	Y+15, r23	; 0x0f
     39a:	88 8b       	std	Y+16, r24	; 0x10
     39c:	99 8b       	std	Y+17, r25	; 0x11
     39e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <nightMode>
     3a2:	88 23       	and	r24, r24
     3a4:	89 f0       	breq	.+34     	; 0x3c8 <_Z14checkNightModev+0xbc>
     3a6:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <nightMode>
     3aa:	ec eb       	ldi	r30, 0xBC	; 188
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	81 81       	ldd	r24, Z+1	; 0x01
     3b0:	80 83       	st	Z, r24
     3b2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
     3b6:	81 11       	cpse	r24, r1
     3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <_Z14checkNightModev+0xbc>
     3ba:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <isLedActive>
     3be:	88 23       	and	r24, r24
     3c0:	11 f0       	breq	.+4      	; 0x3c6 <_Z14checkNightModev+0xba>
     3c2:	c2 9a       	sbi	0x18, 2	; 24
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <_Z14checkNightModev+0xbc>
     3c6:	c2 98       	cbi	0x18, 2	; 24
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	df 90       	pop	r13
     3d6:	cf 90       	pop	r12
     3d8:	bf 90       	pop	r11
     3da:	af 90       	pop	r10
     3dc:	08 95       	ret

000003de <_Z14getMaxMonthDayv>:
     3de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dateTime+0x4>
     3e2:	82 30       	cpi	r24, 0x02	; 2
     3e4:	31 f4       	brne	.+12     	; 0x3f2 <_Z14getMaxMonthDayv+0x14>
     3e6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <dateTime+0x5>
     3ea:	83 70       	andi	r24, 0x03	; 3
     3ec:	61 f0       	breq	.+24     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3ee:	8c e1       	ldi	r24, 0x1C	; 28
     3f0:	08 95       	ret
     3f2:	88 30       	cpi	r24, 0x08	; 8
     3f4:	20 f4       	brcc	.+8      	; 0x3fe <_Z14getMaxMonthDayv+0x20>
     3f6:	80 ff       	sbrs	r24, 0
     3f8:	08 c0       	rjmp	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fa:	8f e1       	ldi	r24, 0x1F	; 31
     3fc:	08 95       	ret
     3fe:	80 fd       	sbrc	r24, 0
     400:	06 c0       	rjmp	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     402:	8f e1       	ldi	r24, 0x1F	; 31
     404:	08 95       	ret
     406:	8d e1       	ldi	r24, 0x1D	; 29
     408:	08 95       	ret
     40a:	8e e1       	ldi	r24, 0x1E	; 30
     40c:	08 95       	ret
     40e:	8e e1       	ldi	r24, 0x1E	; 30
     410:	08 95       	ret

00000412 <_Z15assignEditDigitv>:
     412:	cf 93       	push	r28
     414:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     418:	9f ef       	ldi	r25, 0xFF	; 255
     41a:	98 0f       	add	r25, r24
     41c:	93 30       	cpi	r25, 0x03	; 3
     41e:	18 f4       	brcc	.+6      	; 0x426 <_Z15assignEditDigitv+0x14>
     420:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <tubeMode>
     424:	21 c0       	rjmp	.+66     	; 0x468 <__stack+0x9>
     426:	9c ef       	ldi	r25, 0xFC	; 252
     428:	98 0f       	add	r25, r24
     42a:	93 30       	cpi	r25, 0x03	; 3
     42c:	20 f4       	brcc	.+8      	; 0x436 <_Z15assignEditDigitv+0x24>
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <tubeMode>
     434:	19 c0       	rjmp	.+50     	; 0x468 <__stack+0x9>
     436:	99 ef       	ldi	r25, 0xF9	; 249
     438:	98 0f       	add	r25, r24
     43a:	93 30       	cpi	r25, 0x03	; 3
     43c:	20 f4       	brcc	.+8      	; 0x446 <_Z15assignEditDigitv+0x34>
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <tubeMode>
     444:	11 c0       	rjmp	.+34     	; 0x468 <__stack+0x9>
     446:	8a 30       	cpi	r24, 0x0A	; 10
     448:	79 f4       	brne	.+30     	; 0x468 <__stack+0x9>
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <tubeMode>
     450:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <rank>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <editValue>
     45a:	46 e0       	ldi	r20, 0x06	; 6
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	24 e0       	ldi	r18, 0x04	; 4
     464:	c3 e0       	ldi	r28, 0x03	; 3
     466:	18 c0       	rjmp	.+48     	; 0x498 <__stack+0x39>
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	02 96       	adiw	r24, 0x02	; 2
     46c:	63 e0       	ldi	r22, 0x03	; 3
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	3e d9       	rcall	.-3460   	; 0xfffff6ee <__eeprom_end+0xff7ef6e7>
     472:	c3 e0       	ldi	r28, 0x03	; 3
     474:	c8 1b       	sub	r28, r24
     476:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <rank>
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <editValue>
     480:	4c 2f       	mov	r20, r28
     482:	44 0f       	add	r20, r20
     484:	2e ef       	ldi	r18, 0xFE	; 254
     486:	24 0f       	add	r18, r20
     488:	82 2f       	mov	r24, r18
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	04 2e       	mov	r0, r20
     48e:	00 0c       	add	r0, r0
     490:	55 0b       	sbc	r21, r21
     492:	84 17       	cp	r24, r20
     494:	95 07       	cpc	r25, r21
     496:	5c f4       	brge	.+22     	; 0x4ae <__stack+0x4f>
     498:	31 e0       	ldi	r19, 0x01	; 1
     49a:	fc 01       	movw	r30, r24
     49c:	e8 56       	subi	r30, 0x68	; 104
     49e:	ff 4f       	sbci	r31, 0xFF	; 255
     4a0:	30 83       	st	Z, r19
     4a2:	2f 5f       	subi	r18, 0xFF	; 255
     4a4:	82 2f       	mov	r24, r18
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	84 17       	cp	r24, r20
     4aa:	95 07       	cpc	r25, r21
     4ac:	b4 f3       	brlt	.-20     	; 0x49a <__stack+0x3b>
     4ae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <tubeMode>
     4b2:	81 11       	cpse	r24, r1
     4b4:	20 c0       	rjmp	.+64     	; 0x4f6 <__stack+0x97>
     4b6:	c2 30       	cpi	r28, 0x02	; 2
     4b8:	71 f0       	breq	.+28     	; 0x4d6 <__stack+0x77>
     4ba:	c3 30       	cpi	r28, 0x03	; 3
     4bc:	a9 f0       	breq	.+42     	; 0x4e8 <__stack+0x89>
     4be:	c1 30       	cpi	r28, 0x01	; 1
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <__stack+0x65>
     4c2:	70 c0       	rjmp	.+224    	; 0x5a4 <__stack+0x145>
     4c4:	e2 e8       	ldi	r30, 0x82	; 130
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dateTime+0x2>
     4cc:	81 83       	std	Z+1, r24	; 0x01
     4ce:	87 e1       	ldi	r24, 0x17	; 23
     4d0:	82 83       	std	Z+2, r24	; 0x02
     4d2:	13 82       	std	Z+3, r1	; 0x03
     4d4:	67 c0       	rjmp	.+206    	; 0x5a4 <__stack+0x145>
     4d6:	e2 e8       	ldi	r30, 0x82	; 130
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <dateTime+0x1>
     4de:	81 83       	std	Z+1, r24	; 0x01
     4e0:	8b e3       	ldi	r24, 0x3B	; 59
     4e2:	82 83       	std	Z+2, r24	; 0x02
     4e4:	13 82       	std	Z+3, r1	; 0x03
     4e6:	5e c0       	rjmp	.+188    	; 0x5a4 <__stack+0x145>
     4e8:	e2 e8       	ldi	r30, 0x82	; 130
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dateTime>
     4f0:	81 83       	std	Z+1, r24	; 0x01
     4f2:	10 82       	st	Z, r1
     4f4:	57 c0       	rjmp	.+174    	; 0x5a4 <__stack+0x145>
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	31 f5       	brne	.+76     	; 0x546 <__stack+0xe7>
     4fa:	71 df       	rcall	.-286    	; 0x3de <_Z14getMaxMonthDayv>
     4fc:	c2 30       	cpi	r28, 0x02	; 2
     4fe:	81 f0       	breq	.+32     	; 0x520 <__stack+0xc1>
     500:	c3 30       	cpi	r28, 0x03	; 3
     502:	c1 f0       	breq	.+48     	; 0x534 <__stack+0xd5>
     504:	c1 30       	cpi	r28, 0x01	; 1
     506:	09 f0       	breq	.+2      	; 0x50a <__stack+0xab>
     508:	4d c0       	rjmp	.+154    	; 0x5a4 <__stack+0x145>
     50a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dateTime+0x3>
     50e:	89 17       	cp	r24, r25
     510:	08 f4       	brcc	.+2      	; 0x514 <__stack+0xb5>
     512:	98 2f       	mov	r25, r24
     514:	e2 e8       	ldi	r30, 0x82	; 130
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	91 83       	std	Z+1, r25	; 0x01
     51a:	82 83       	std	Z+2, r24	; 0x02
     51c:	13 82       	std	Z+3, r1	; 0x03
     51e:	42 c0       	rjmp	.+132    	; 0x5a4 <__stack+0x145>
     520:	e2 e8       	ldi	r30, 0x82	; 130
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dateTime+0x4>
     528:	81 83       	std	Z+1, r24	; 0x01
     52a:	8c e0       	ldi	r24, 0x0C	; 12
     52c:	82 83       	std	Z+2, r24	; 0x02
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	83 83       	std	Z+3, r24	; 0x03
     532:	38 c0       	rjmp	.+112    	; 0x5a4 <__stack+0x145>
     534:	e2 e8       	ldi	r30, 0x82	; 130
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <dateTime+0x5>
     53c:	81 83       	std	Z+1, r24	; 0x01
     53e:	83 e6       	ldi	r24, 0x63	; 99
     540:	82 83       	std	Z+2, r24	; 0x02
     542:	13 82       	std	Z+3, r1	; 0x03
     544:	2f c0       	rjmp	.+94     	; 0x5a4 <__stack+0x145>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	19 f5       	brne	.+70     	; 0x590 <__stack+0x131>
     54a:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <alarm>
     54e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <tube+0x10>
     552:	c2 30       	cpi	r28, 0x02	; 2
     554:	69 f0       	breq	.+26     	; 0x570 <__stack+0x111>
     556:	c3 30       	cpi	r28, 0x03	; 3
     558:	a1 f0       	breq	.+40     	; 0x582 <__stack+0x123>
     55a:	c1 30       	cpi	r28, 0x01	; 1
     55c:	19 f5       	brne	.+70     	; 0x5a4 <__stack+0x145>
     55e:	e2 e8       	ldi	r30, 0x82	; 130
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <alarm+0x3>
     566:	81 83       	std	Z+1, r24	; 0x01
     568:	87 e1       	ldi	r24, 0x17	; 23
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	13 82       	std	Z+3, r1	; 0x03
     56e:	1a c0       	rjmp	.+52     	; 0x5a4 <__stack+0x145>
     570:	e2 e8       	ldi	r30, 0x82	; 130
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <alarm+0x4>
     578:	81 83       	std	Z+1, r24	; 0x01
     57a:	8b e3       	ldi	r24, 0x3B	; 59
     57c:	82 83       	std	Z+2, r24	; 0x02
     57e:	13 82       	std	Z+3, r1	; 0x03
     580:	11 c0       	rjmp	.+34     	; 0x5a4 <__stack+0x145>
     582:	e2 e8       	ldi	r30, 0x82	; 130
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	81 83       	std	Z+1, r24	; 0x01
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	82 83       	std	Z+2, r24	; 0x02
     58c:	13 82       	std	Z+3, r1	; 0x03
     58e:	0a c0       	rjmp	.+20     	; 0x5a4 <__stack+0x145>
     590:	83 30       	cpi	r24, 0x03	; 3
     592:	41 f4       	brne	.+16     	; 0x5a4 <__stack+0x145>
     594:	e2 e8       	ldi	r30, 0x82	; 130
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <nightMode+0x5>
     59c:	81 83       	std	Z+1, r24	; 0x01
     59e:	82 e3       	ldi	r24, 0x32	; 50
     5a0:	82 83       	std	Z+2, r24	; 0x02
     5a2:	13 82       	std	Z+3, r1	; 0x03
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <_Z22fillTubeValueFromIndexhh>:
     5a8:	88 0f       	add	r24, r24
     5aa:	82 50       	subi	r24, 0x02	; 2
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	6a 30       	cpi	r22, 0x0A	; 10
     5b0:	b8 f0       	brcs	.+46     	; 0x5e0 <_Z22fillTubeValueFromIndexhh+0x38>
     5b2:	fc 01       	movw	r30, r24
     5b4:	e8 56       	subi	r30, 0x68	; 104
     5b6:	ff 4f       	sbci	r31, 0xFF	; 255
     5b8:	2d ec       	ldi	r18, 0xCD	; 205
     5ba:	62 9f       	mul	r22, r18
     5bc:	21 2d       	mov	r18, r1
     5be:	11 24       	eor	r1, r1
     5c0:	26 95       	lsr	r18
     5c2:	26 95       	lsr	r18
     5c4:	26 95       	lsr	r18
     5c6:	26 8b       	std	Z+22, r18	; 0x16
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	22 0f       	add	r18, r18
     5cc:	32 2f       	mov	r19, r18
     5ce:	33 0f       	add	r19, r19
     5d0:	33 0f       	add	r19, r19
     5d2:	23 0f       	add	r18, r19
     5d4:	62 1b       	sub	r22, r18
     5d6:	fc 01       	movw	r30, r24
     5d8:	e8 56       	subi	r30, 0x68	; 104
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	66 8b       	std	Z+22, r22	; 0x16
     5de:	08 95       	ret
     5e0:	fc 01       	movw	r30, r24
     5e2:	e8 56       	subi	r30, 0x68	; 104
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	16 8a       	std	Z+22, r1	; 0x16
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	f5 cf       	rjmp	.-22     	; 0x5d6 <_Z22fillTubeValueFromIndexhh+0x2e>

000005ec <_Z10tubeAsModev>:
     5ec:	cf 92       	push	r12
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <tubeMode>
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	b9 f0       	breq	.+46     	; 0x632 <_Z10tubeAsModev+0x46>
     604:	2c f4       	brge	.+10     	; 0x610 <_Z10tubeAsModev+0x24>
     606:	8f 3f       	cpi	r24, 0xFF	; 255
     608:	e1 f0       	breq	.+56     	; 0x642 <_Z10tubeAsModev+0x56>
     60a:	88 23       	and	r24, r24
     60c:	31 f0       	breq	.+12     	; 0x61a <_Z10tubeAsModev+0x2e>
     60e:	33 c0       	rjmp	.+102    	; 0x676 <_Z10tubeAsModev+0x8a>
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	49 f0       	breq	.+18     	; 0x626 <_Z10tubeAsModev+0x3a>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	d1 f0       	breq	.+52     	; 0x64c <_Z10tubeAsModev+0x60>
     618:	2e c0       	rjmp	.+92     	; 0x676 <_Z10tubeAsModev+0x8a>
     61a:	e4 e0       	ldi	r30, 0x04	; 4
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	62 81       	ldd	r22, Z+2	; 0x02
     620:	d1 81       	ldd	r29, Z+1	; 0x01
     622:	c0 81       	ld	r28, Z
     624:	2b c0       	rjmp	.+86     	; 0x67c <_Z10tubeAsModev+0x90>
     626:	e4 e0       	ldi	r30, 0x04	; 4
     628:	f1 e0       	ldi	r31, 0x01	; 1
     62a:	63 81       	ldd	r22, Z+3	; 0x03
     62c:	d4 81       	ldd	r29, Z+4	; 0x04
     62e:	c5 81       	ldd	r28, Z+5	; 0x05
     630:	25 c0       	rjmp	.+74     	; 0x67c <_Z10tubeAsModev+0x90>
     632:	e3 ed       	ldi	r30, 0xD3	; 211
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	63 81       	ldd	r22, Z+3	; 0x03
     638:	d4 81       	ldd	r29, Z+4	; 0x04
     63a:	c0 81       	ld	r28, Z
     63c:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <tube+0x10>
     640:	1d c0       	rjmp	.+58     	; 0x67c <_Z10tubeAsModev+0x90>
     642:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <etching+0x2>
     646:	c6 2f       	mov	r28, r22
     648:	d6 2f       	mov	r29, r22
     64a:	18 c0       	rjmp	.+48     	; 0x67c <_Z10tubeAsModev+0x90>
     64c:	c0 91 8b 00 	lds	r28, 0x008B	; 0x80008b <nightMode+0x5>
     650:	00 91 83 00 	lds	r16, 0x0083	; 0x800083 <editValue+0x1>
     654:	84 e1       	ldi	r24, 0x14	; 20
     656:	08 02       	muls	r16, r24
     658:	80 01       	movw	r16, r0
     65a:	11 24       	eor	r1, r1
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	4b de       	rcall	.-874    	; 0x2f6 <_Z6getADCh>
     660:	80 17       	cp	r24, r16
     662:	91 07       	cpc	r25, r17
     664:	24 f4       	brge	.+8      	; 0x66e <_Z10tubeAsModev+0x82>
     666:	c2 9a       	sbi	0x18, 2	; 24
     668:	d0 e0       	ldi	r29, 0x00	; 0
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	07 c0       	rjmp	.+14     	; 0x67c <_Z10tubeAsModev+0x90>
     66e:	c2 98       	cbi	0x18, 2	; 24
     670:	d0 e0       	ldi	r29, 0x00	; 0
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	03 c0       	rjmp	.+6      	; 0x67c <_Z10tubeAsModev+0x90>
     676:	c0 e0       	ldi	r28, 0x00	; 0
     678:	d0 e0       	ldi	r29, 0x00	; 0
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	94 df       	rcall	.-216    	; 0x5a8 <_Z22fillTubeValueFromIndexhh>
     680:	6d 2f       	mov	r22, r29
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	91 df       	rcall	.-222    	; 0x5a8 <_Z22fillTubeValueFromIndexhh>
     686:	6c 2f       	mov	r22, r28
     688:	83 e0       	ldi	r24, 0x03	; 3
     68a:	8e df       	rcall	.-228    	; 0x5a8 <_Z22fillTubeValueFromIndexhh>
     68c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     690:	88 23       	and	r24, r24
     692:	09 f4       	brne	.+2      	; 0x696 <_Z10tubeAsModev+0xaa>
     694:	6f c0       	rjmp	.+222    	; 0x774 <_Z10tubeAsModev+0x188>
     696:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
     69a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <rank>
     69e:	84 df       	rcall	.-248    	; 0x5a8 <_Z22fillTubeValueFromIndexhh>
     6a0:	69 c0       	rjmp	.+210    	; 0x774 <_Z10tubeAsModev+0x188>
     6a2:	86 01       	movw	r16, r12
     6a4:	89 91       	ld	r24, Y+
     6a6:	68 01       	movw	r12, r16
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	c9 1a       	sub	r12, r25
     6ac:	d9 0a       	sbc	r13, r25
     6ae:	81 11       	cpse	r24, r1
     6b0:	24 c0       	rjmp	.+72     	; 0x6fa <_Z10tubeAsModev+0x10e>
     6b2:	8f 85       	ldd	r24, Y+15	; 0x0f
     6b4:	46 dd       	rcall	.-1396   	; 0x142 <_Z15translitDecoderc>
     6b6:	8d 81       	ldd	r24, Y+5	; 0x05
     6b8:	88 23       	and	r24, r24
     6ba:	11 f0       	breq	.+4      	; 0x6c0 <_Z10tubeAsModev+0xd4>
     6bc:	94 9a       	sbi	0x12, 4	; 18
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <_Z10tubeAsModev+0xd6>
     6c0:	94 98       	cbi	0x12, 4	; 18
     6c2:	f7 01       	movw	r30, r14
     6c4:	85 89       	ldd	r24, Z+21	; 0x15
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	11 f4       	brne	.+4      	; 0x6ce <_Z10tubeAsModev+0xe2>
     6ca:	96 9a       	sbi	0x12, 6	; 18
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <_Z10tubeAsModev+0xe4>
     6ce:	96 98       	cbi	0x12, 6	; 18
     6d0:	f7 01       	movw	r30, r14
     6d2:	84 89       	ldd	r24, Z+20	; 0x14
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	11 f4       	brne	.+4      	; 0x6dc <_Z10tubeAsModev+0xf0>
     6d8:	97 9a       	sbi	0x12, 7	; 18
     6da:	01 c0       	rjmp	.+2      	; 0x6de <_Z10tubeAsModev+0xf2>
     6dc:	97 98       	cbi	0x12, 7	; 18
     6de:	f7 01       	movw	r30, r14
     6e0:	83 89       	ldd	r24, Z+19	; 0x13
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	11 f4       	brne	.+4      	; 0x6ea <_Z10tubeAsModev+0xfe>
     6e6:	c0 9a       	sbi	0x18, 0	; 24
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <_Z10tubeAsModev+0x100>
     6ea:	c0 98       	cbi	0x18, 0	; 24
     6ec:	f7 01       	movw	r30, r14
     6ee:	82 89       	ldd	r24, Z+18	; 0x12
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	11 f4       	brne	.+4      	; 0x6f8 <_Z10tubeAsModev+0x10c>
     6f4:	c1 9a       	sbi	0x18, 1	; 24
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <_Z10tubeAsModev+0x10e>
     6f8:	c1 98       	cbi	0x18, 1	; 24
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	81 11       	cpse	r24, r1
     6fe:	24 c0       	rjmp	.+72     	; 0x748 <_Z10tubeAsModev+0x15c>
     700:	8a 89       	ldd	r24, Y+18	; 0x12
     702:	1f dd       	rcall	.-1474   	; 0x142 <_Z15translitDecoderc>
     704:	88 85       	ldd	r24, Y+8	; 0x08
     706:	88 23       	and	r24, r24
     708:	11 f0       	breq	.+4      	; 0x70e <_Z10tubeAsModev+0x122>
     70a:	ab 9a       	sbi	0x15, 3	; 21
     70c:	01 c0       	rjmp	.+2      	; 0x710 <_Z10tubeAsModev+0x124>
     70e:	ab 98       	cbi	0x15, 3	; 21
     710:	f7 01       	movw	r30, r14
     712:	85 89       	ldd	r24, Z+21	; 0x15
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	11 f4       	brne	.+4      	; 0x71c <_Z10tubeAsModev+0x130>
     718:	c7 9a       	sbi	0x18, 7	; 24
     71a:	01 c0       	rjmp	.+2      	; 0x71e <_Z10tubeAsModev+0x132>
     71c:	c7 98       	cbi	0x18, 7	; 24
     71e:	f7 01       	movw	r30, r14
     720:	84 89       	ldd	r24, Z+20	; 0x14
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	11 f4       	brne	.+4      	; 0x72a <_Z10tubeAsModev+0x13e>
     726:	93 9a       	sbi	0x12, 3	; 18
     728:	01 c0       	rjmp	.+2      	; 0x72c <_Z10tubeAsModev+0x140>
     72a:	93 98       	cbi	0x12, 3	; 18
     72c:	f7 01       	movw	r30, r14
     72e:	83 89       	ldd	r24, Z+19	; 0x13
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	11 f4       	brne	.+4      	; 0x738 <_Z10tubeAsModev+0x14c>
     734:	92 9a       	sbi	0x12, 2	; 18
     736:	01 c0       	rjmp	.+2      	; 0x73a <_Z10tubeAsModev+0x14e>
     738:	92 98       	cbi	0x12, 2	; 18
     73a:	f7 01       	movw	r30, r14
     73c:	82 89       	ldd	r24, Z+18	; 0x12
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	11 f4       	brne	.+4      	; 0x746 <_Z10tubeAsModev+0x15a>
     742:	c6 9a       	sbi	0x18, 6	; 24
     744:	01 c0       	rjmp	.+2      	; 0x748 <_Z10tubeAsModev+0x15c>
     746:	c6 98       	cbi	0x18, 6	; 24
     748:	01 30       	cpi	r16, 0x01	; 1
     74a:	11 05       	cpc	r17, r1
     74c:	39 f0       	breq	.+14     	; 0x75c <_Z10tubeAsModev+0x170>
     74e:	20 f0       	brcs	.+8      	; 0x758 <_Z10tubeAsModev+0x16c>
     750:	02 30       	cpi	r16, 0x02	; 2
     752:	11 05       	cpc	r17, r1
     754:	29 f0       	breq	.+10     	; 0x760 <_Z10tubeAsModev+0x174>
     756:	07 c0       	rjmp	.+14     	; 0x766 <_Z10tubeAsModev+0x17a>
     758:	a8 98       	cbi	0x15, 0	; 21
     75a:	17 c0       	rjmp	.+46     	; 0x78a <_Z10tubeAsModev+0x19e>
     75c:	a9 98       	cbi	0x15, 1	; 21
     75e:	15 c0       	rjmp	.+42     	; 0x78a <_Z10tubeAsModev+0x19e>
     760:	aa 98       	cbi	0x15, 2	; 21
     762:	ff dc       	rcall	.-1538   	; 0x162 <_Z10tubeSwitchv>
     764:	14 c0       	rjmp	.+40     	; 0x78e <_Z10tubeAsModev+0x1a2>
     766:	fd dc       	rcall	.-1542   	; 0x162 <_Z10tubeSwitchv>
     768:	f3 e0       	ldi	r31, 0x03	; 3
     76a:	cf 16       	cp	r12, r31
     76c:	d1 04       	cpc	r13, r1
     76e:	0c f4       	brge	.+2      	; 0x772 <_Z10tubeAsModev+0x186>
     770:	98 cf       	rjmp	.-208    	; 0x6a2 <_Z10tubeAsModev+0xb6>
     772:	0d c0       	rjmp	.+26     	; 0x78e <_Z10tubeAsModev+0x1a2>
     774:	ce e9       	ldi	r28, 0x9E	; 158
     776:	d0 e0       	ldi	r29, 0x00	; 0
     778:	00 e0       	ldi	r16, 0x00	; 0
     77a:	10 e0       	ldi	r17, 0x00	; 0
     77c:	0f 2e       	mov	r0, r31
     77e:	f8 e9       	ldi	r31, 0x98	; 152
     780:	ef 2e       	mov	r14, r31
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ff 2e       	mov	r15, r31
     786:	f0 2d       	mov	r31, r0
     788:	8d cf       	rjmp	.-230    	; 0x6a4 <_Z10tubeAsModev+0xb8>
     78a:	eb dc       	rcall	.-1578   	; 0x162 <_Z10tubeSwitchv>
     78c:	8a cf       	rjmp	.-236    	; 0x6a2 <_Z10tubeAsModev+0xb6>
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	08 95       	ret

000007a0 <_Z14ds1307_setdate8DateTime>:

void ds1307_setdate(DateTime dateTime) {
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	27 97       	sbiw	r28, 0x07	; 7
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	29 83       	std	Y+1, r18	; 0x01
     7b8:	3a 83       	std	Y+2, r19	; 0x02
     7ba:	4b 83       	std	Y+3, r20	; 0x03
     7bc:	5c 83       	std	Y+4, r21	; 0x04
     7be:	6d 83       	std	Y+5, r22	; 0x05
     7c0:	7e 83       	std	Y+6, r23	; 0x06
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
     7c2:	80 ed       	ldi	r24, 0xD0	; 208
     7c4:	53 d7       	rcall	.+3750   	; 0x166c <_Z14i2c_start_waith>
	i2c_write(0x00);
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	77 d7       	rcall	.+3822   	; 0x16b8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dateTime.sec));
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	1d ec       	ldi	r17, 0xCD	; 205
     7ce:	81 9f       	mul	r24, r17
     7d0:	91 2d       	mov	r25, r1
     7d2:	11 24       	eor	r1, r1
     7d4:	96 95       	lsr	r25
     7d6:	96 95       	lsr	r25
     7d8:	96 95       	lsr	r25
     7da:	29 2f       	mov	r18, r25
     7dc:	22 0f       	add	r18, r18
     7de:	92 0f       	add	r25, r18
     7e0:	99 0f       	add	r25, r25
     7e2:	89 0f       	add	r24, r25
     7e4:	69 d7       	rcall	.+3794   	; 0x16b8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dateTime.min));
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	81 9f       	mul	r24, r17
     7ea:	91 2d       	mov	r25, r1
     7ec:	11 24       	eor	r1, r1
     7ee:	96 95       	lsr	r25
     7f0:	96 95       	lsr	r25
     7f2:	96 95       	lsr	r25
     7f4:	29 2f       	mov	r18, r25
     7f6:	22 0f       	add	r18, r18
     7f8:	92 0f       	add	r25, r18
     7fa:	99 0f       	add	r25, r25
     7fc:	89 0f       	add	r24, r25
     7fe:	5c d7       	rcall	.+3768   	; 0x16b8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dateTime.hour));
     800:	8b 81       	ldd	r24, Y+3	; 0x03
     802:	81 9f       	mul	r24, r17
     804:	91 2d       	mov	r25, r1
     806:	11 24       	eor	r1, r1
     808:	96 95       	lsr	r25
     80a:	96 95       	lsr	r25
     80c:	96 95       	lsr	r25
     80e:	29 2f       	mov	r18, r25
     810:	22 0f       	add	r18, r18
     812:	92 0f       	add	r25, r18
     814:	99 0f       	add	r25, r25
     816:	89 0f       	add	r24, r25
     818:	4f d7       	rcall	.+3742   	; 0x16b8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(1));
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	4d d7       	rcall	.+3738   	; 0x16b8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dateTime.day));
     81e:	8c 81       	ldd	r24, Y+4	; 0x04
     820:	81 9f       	mul	r24, r17
     822:	91 2d       	mov	r25, r1
     824:	11 24       	eor	r1, r1
     826:	96 95       	lsr	r25
     828:	96 95       	lsr	r25
     82a:	96 95       	lsr	r25
     82c:	29 2f       	mov	r18, r25
     82e:	22 0f       	add	r18, r18
     830:	92 0f       	add	r25, r18
     832:	99 0f       	add	r25, r25
     834:	89 0f       	add	r24, r25
     836:	40 d7       	rcall	.+3712   	; 0x16b8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dateTime.month));
     838:	8d 81       	ldd	r24, Y+5	; 0x05
     83a:	81 9f       	mul	r24, r17
     83c:	91 2d       	mov	r25, r1
     83e:	11 24       	eor	r1, r1
     840:	96 95       	lsr	r25
     842:	96 95       	lsr	r25
     844:	96 95       	lsr	r25
     846:	29 2f       	mov	r18, r25
     848:	22 0f       	add	r18, r18
     84a:	92 0f       	add	r25, r18
     84c:	99 0f       	add	r25, r25
     84e:	89 0f       	add	r24, r25
     850:	33 d7       	rcall	.+3686   	; 0x16b8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dateTime.year));
     852:	8e 81       	ldd	r24, Y+6	; 0x06
     854:	81 9f       	mul	r24, r17
     856:	11 2d       	mov	r17, r1
     858:	11 24       	eor	r1, r1
     85a:	16 95       	lsr	r17
     85c:	16 95       	lsr	r17
     85e:	16 95       	lsr	r17
     860:	91 2f       	mov	r25, r17
     862:	99 0f       	add	r25, r25
     864:	19 0f       	add	r17, r25
     866:	11 0f       	add	r17, r17
     868:	81 0f       	add	r24, r17
     86a:	26 d7       	rcall	.+3660   	; 0x16b8 <_Z9i2c_writeh>
	i2c_write(0x00);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	24 d7       	rcall	.+3656   	; 0x16b8 <_Z9i2c_writeh>
	i2c_stop();
     870:	1d d7       	rcall	.+3642   	; 0x16ac <_Z8i2c_stopv>
}
     872:	27 96       	adiw	r28, 0x07	; 7
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	08 95       	ret

00000886 <_Z16buttonShortPressv>:
		}
		resetButtons();
	}
}

void buttonShortPress() {
     886:	cf 93       	push	r28
	if (button.notInclude) {
     888:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <button+0x1>
     88c:	88 23       	and	r24, r24
     88e:	19 f0       	breq	.+6      	; 0x896 <_Z16buttonShortPressv+0x10>
		button.notInclude = false;
     890:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <button+0x1>
		return;
     894:	b8 c0       	rjmp	.+368    	; 0xa06 <_Z16buttonShortPressv+0x180>
	}
	if (modeWork == mw_Clock) {
     896:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <modeWork>
     89a:	61 11       	cpse	r22, r1
     89c:	3c c0       	rjmp	.+120    	; 0x916 <_Z16buttonShortPressv+0x90>
		switch(button.num) {
     89e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <button+0x2>
     8a2:	91 30       	cpi	r25, 0x01	; 1
     8a4:	19 f0       	breq	.+6      	; 0x8ac <_Z16buttonShortPressv+0x26>
     8a6:	92 30       	cpi	r25, 0x02	; 2
     8a8:	01 f1       	breq	.+64     	; 0x8ea <_Z16buttonShortPressv+0x64>
     8aa:	ad c0       	rjmp	.+346    	; 0xa06 <_Z16buttonShortPressv+0x180>
			case 1:
				hourBeep.isActive = !hourBeep.isActive;
     8ac:	eb ee       	ldi	r30, 0xEB	; 235
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	60 81       	ld	r22, Z
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	69 27       	eor	r22, r25
     8b6:	60 83       	st	Z, r22
				hourBeep.manualActivation = nightMode.isActive? false: hourBeep.isActive;
     8b8:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <nightMode>
     8bc:	91 11       	cpse	r25, r1
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <_Z16buttonShortPressv+0x3c>
     8c0:	86 2f       	mov	r24, r22
     8c2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <hourBeep+0x1>
				eeprom_update_byte(&eeprom_isHourBeepActive, hourBeep.isActive);
     8c6:	84 e0       	ldi	r24, 0x04	; 4
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	6a d7       	rcall	.+3796   	; 0x17a0 <eeprom_update_byte>
				if (nightMode.isActive) {
     8cc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <nightMode>
     8d0:	88 23       	and	r24, r24
     8d2:	31 f0       	breq	.+12     	; 0x8e0 <_Z16buttonShortPressv+0x5a>
					ledBlinking.isCanInit = true;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ledBlinking>
					hourBeep.manualActivation = false;
     8da:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <hourBeep+0x1>
     8de:	93 c0       	rjmp	.+294    	; 0xa06 <_Z16buttonShortPressv+0x180>
				} else {
					hourBeep.manualActivation = hourBeep.isActive;
     8e0:	eb ee       	ldi	r30, 0xEB	; 235
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	81 83       	std	Z+1, r24	; 0x01
     8e8:	8e c0       	rjmp	.+284    	; 0xa06 <_Z16buttonShortPressv+0x180>
				}
				break;
			case 2:
				if (!nightMode.isActive) {
     8ea:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <nightMode>
     8ee:	81 11       	cpse	r24, r1
     8f0:	0e c0       	rjmp	.+28     	; 0x90e <_Z16buttonShortPressv+0x88>
					bright.level = bright.level >= 3? 0: bright.level + 1;
     8f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <bright>
     8f6:	83 30       	cpi	r24, 0x03	; 3
     8f8:	10 f4       	brcc	.+4      	; 0x8fe <_Z16buttonShortPressv+0x78>
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	68 0f       	add	r22, r24
     8fe:	ec eb       	ldi	r30, 0xBC	; 188
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	60 83       	st	Z, r22
					bright.dayLevel = bright.level;
     904:	61 83       	std	Z+1, r22	; 0x01
					eeprom_update_byte(&eeprom_bright, bright.level);					
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	4a d7       	rcall	.+3732   	; 0x17a0 <eeprom_update_byte>
     90c:	7c c0       	rjmp	.+248    	; 0xa06 <_Z16buttonShortPressv+0x180>
				} else {
					ledBlinking.isCanInit = true;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ledBlinking>
     914:	78 c0       	rjmp	.+240    	; 0xa06 <_Z16buttonShortPressv+0x180>
				break;
		}
		return;
	} 
	
	if (modeWork == mw_SetSec) {
     916:	61 30       	cpi	r22, 0x01	; 1
     918:	09 f0       	breq	.+2      	; 0x91c <_Z16buttonShortPressv+0x96>
     91a:	54 c0       	rjmp	.+168    	; 0x9c4 <_Z16buttonShortPressv+0x13e>
		if (dateTime.sec >= 30) {
     91c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dateTime>
     920:	8e 31       	cpi	r24, 0x1E	; 30
     922:	d8 f1       	brcs	.+118    	; 0x99a <_Z16buttonShortPressv+0x114>
			alarm.lastDay = 0;
     924:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <alarm+0x2>
			if (dateTime.min == 59) {
     928:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <dateTime+0x1>
     92c:	8b 33       	cpi	r24, 0x3B	; 59
     92e:	71 f5       	brne	.+92     	; 0x98c <_Z16buttonShortPressv+0x106>
				dateTime.min = 0;
     930:	e4 e0       	ldi	r30, 0x04	; 4
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	11 82       	std	Z+1, r1	; 0x01
				if (dateTime.hour == 23) {
     936:	82 81       	ldd	r24, Z+2	; 0x02
     938:	87 31       	cpi	r24, 0x17	; 23
     93a:	01 f5       	brne	.+64     	; 0x97c <_Z16buttonShortPressv+0xf6>
					dateTime.hour = 0;
     93c:	12 82       	std	Z+2, r1	; 0x02
					if (dateTime.day == getMaxMonthDay()) {
     93e:	c3 81       	ldd	r28, Z+3	; 0x03
     940:	4e dd       	rcall	.-1380   	; 0x3de <_Z14getMaxMonthDayv>
     942:	c8 13       	cpse	r28, r24
     944:	17 c0       	rjmp	.+46     	; 0x974 <_Z16buttonShortPressv+0xee>
						dateTime.day = 1;
     946:	e4 e0       	ldi	r30, 0x04	; 4
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	83 83       	std	Z+3, r24	; 0x03
						if (dateTime.month == 12) {
     94e:	84 81       	ldd	r24, Z+4	; 0x04
     950:	8c 30       	cpi	r24, 0x0C	; 12
     952:	61 f4       	brne	.+24     	; 0x96c <_Z16buttonShortPressv+0xe6>
							dateTime.month = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	84 83       	std	Z+4, r24	; 0x04
							if (dateTime.year == 99) {
     958:	85 81       	ldd	r24, Z+5	; 0x05
     95a:	83 36       	cpi	r24, 0x63	; 99
     95c:	19 f4       	brne	.+6      	; 0x964 <_Z16buttonShortPressv+0xde>
								dateTime.year = 00;
     95e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <dateTime+0x5>
     962:	0f c0       	rjmp	.+30     	; 0x982 <_Z16buttonShortPressv+0xfc>
							} else {
								dateTime.year++;
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <dateTime+0x5>
     96a:	0b c0       	rjmp	.+22     	; 0x982 <_Z16buttonShortPressv+0xfc>
							}
						} else {
							dateTime.month++;
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <dateTime+0x4>
     972:	07 c0       	rjmp	.+14     	; 0x982 <_Z16buttonShortPressv+0xfc>
						}
					} else {
						dateTime.day++;
     974:	cf 5f       	subi	r28, 0xFF	; 255
     976:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <dateTime+0x3>
     97a:	03 c0       	rjmp	.+6      	; 0x982 <_Z16buttonShortPressv+0xfc>
					}
				} else {
					dateTime.hour++;
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dateTime+0x2>
				}
				hourBeep.lastHour = dateTime.hour;
     982:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dateTime+0x2>
     986:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <hourBeep+0x2>
     98a:	03 c0       	rjmp	.+6      	; 0x992 <_Z16buttonShortPressv+0x10c>
			} else {
				dateTime.min++;
     98c:	8f 5f       	subi	r24, 0xFF	; 255
     98e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <dateTime+0x1>
			}
			etching.lastMin = dateTime.min;
     992:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <dateTime+0x1>
     996:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <etching+0x1>
		}
		dateTime.sec = 0;
     99a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dateTime>
		editValue.value = 0;
     99e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <editValue+0x1>
		prevSec = 0;
     9a2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		ds1307_setdate(dateTime);
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dateTime+0x1>
     9ac:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <dateTime+0x2>
     9b0:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <dateTime+0x3>
     9b4:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <dateTime+0x4>
     9b8:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <dateTime+0x5>
     9bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dateTime+0x6>
     9c0:	ef de       	rcall	.-546    	; 0x7a0 <_Z14ds1307_setdate8DateTime>
		return;
     9c2:	21 c0       	rjmp	.+66     	; 0xa06 <_Z16buttonShortPressv+0x180>
	} 
	
	switch(button.num) {
     9c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <button+0x2>
     9c8:	81 30       	cpi	r24, 0x01	; 1
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <_Z16buttonShortPressv+0x14c>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	39 f0       	breq	.+14     	; 0x9de <_Z16buttonShortPressv+0x158>
     9d0:	0b c0       	rjmp	.+22     	; 0x9e8 <_Z16buttonShortPressv+0x162>
		case 1: editValue.value++; break;
     9d2:	e2 e8       	ldi	r30, 0x82	; 130
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	81 81       	ldd	r24, Z+1	; 0x01
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	81 83       	std	Z+1, r24	; 0x01
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <_Z16buttonShortPressv+0x162>
		case 2: editValue.value--; break;
     9de:	e2 e8       	ldi	r30, 0x82	; 130
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	81 81       	ldd	r24, Z+1	; 0x01
     9e4:	81 50       	subi	r24, 0x01	; 1
     9e6:	81 83       	std	Z+1, r24	; 0x01
	}
	
	if (editValue.value > editValue.max) {
     9e8:	e2 e8       	ldi	r30, 0x82	; 130
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	81 81       	ldd	r24, Z+1	; 0x01
     9ee:	92 81       	ldd	r25, Z+2	; 0x02
     9f0:	98 17       	cp	r25, r24
     9f2:	1c f4       	brge	.+6      	; 0x9fa <_Z16buttonShortPressv+0x174>
		editValue.value = editValue.min;
     9f4:	83 81       	ldd	r24, Z+3	; 0x03
     9f6:	81 83       	std	Z+1, r24	; 0x01
     9f8:	06 c0       	rjmp	.+12     	; 0xa06 <_Z16buttonShortPressv+0x180>
	} else if (editValue.value < editValue.min) {
     9fa:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <editValue+0x3>
     9fe:	82 17       	cp	r24, r18
     a00:	14 f4       	brge	.+4      	; 0xa06 <_Z16buttonShortPressv+0x180>
		editValue.value = editValue.max;
     a02:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <editValue+0x1>
	}
}
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <_Z20firstButtonLongPressv>:

void firstButtonLongPress() {
	if (button.notInclude) {
     a0a:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <button+0x1>
     a0e:	88 23       	and	r24, r24
     a10:	19 f0       	breq	.+6      	; 0xa18 <_Z20firstButtonLongPressv+0xe>
		button.notInclude = false;
     a12:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <button+0x1>
		return;
     a16:	08 95       	ret
	}
	switch(modeWork) {
     a18:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <modeWork>
     a1c:	8e 2f       	mov	r24, r30
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	fc 01       	movw	r30, r24
     a22:	32 97       	sbiw	r30, 0x02	; 2
     a24:	e9 30       	cpi	r30, 0x09	; 9
     a26:	f1 05       	cpc	r31, r1
     a28:	08 f0       	brcs	.+2      	; 0xa2c <_Z20firstButtonLongPressv+0x22>
     a2a:	a0 c0       	rjmp	.+320    	; 0xb6c <_Z20firstButtonLongPressv+0x162>
     a2c:	ed 5e       	subi	r30, 0xED	; 237
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	09 94       	ijmp
		case mw_SetMin:
			dateTime.min = editValue.value;
     a32:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
     a36:	38 2f       	mov	r19, r24
     a38:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <dateTime+0x1>
			etching.lastMin = dateTime.min;
     a3c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <etching+0x1>
			ds1307_setdate(dateTime);
     a40:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dateTime>
     a44:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <dateTime+0x2>
     a48:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <dateTime+0x3>
     a4c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <dateTime+0x4>
     a50:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <dateTime+0x5>
     a54:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dateTime+0x6>
     a58:	a3 de       	rcall	.-698    	; 0x7a0 <_Z14ds1307_setdate8DateTime>
			alarm.lastDay = 0;
     a5a:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <alarm+0x2>
			break;
     a5e:	86 c0       	rjmp	.+268    	; 0xb6c <_Z20firstButtonLongPressv+0x162>
		case mw_SetHour:
			dateTime.hour = editValue.value;
     a60:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
     a64:	48 2f       	mov	r20, r24
     a66:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dateTime+0x2>
			hourBeep.lastHour = dateTime.hour;
     a6a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <hourBeep+0x2>
			ds1307_setdate(dateTime);
     a6e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dateTime>
     a72:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dateTime+0x1>
     a76:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <dateTime+0x3>
     a7a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <dateTime+0x4>
     a7e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <dateTime+0x5>
     a82:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dateTime+0x6>
     a86:	8c de       	rcall	.-744    	; 0x7a0 <_Z14ds1307_setdate8DateTime>
			alarm.lastDay = 0;
     a88:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <alarm+0x2>
			break;
     a8c:	6f c0       	rjmp	.+222    	; 0xb6c <_Z20firstButtonLongPressv+0x162>
		case mw_SetYear:
			dateTime.year = editValue.value;
     a8e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
     a92:	78 2f       	mov	r23, r24
     a94:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <dateTime+0x5>
			ds1307_setdate(dateTime);
     a98:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dateTime>
     a9c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dateTime+0x1>
     aa0:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <dateTime+0x2>
     aa4:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <dateTime+0x3>
     aa8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <dateTime+0x4>
     aac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dateTime+0x6>
     ab0:	77 de       	rcall	.-786    	; 0x7a0 <_Z14ds1307_setdate8DateTime>
			alarm.lastDay = 0;
     ab2:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <alarm+0x2>
			break;
     ab6:	5a c0       	rjmp	.+180    	; 0xb6c <_Z20firstButtonLongPressv+0x162>
		case mw_SetMonth:
			dateTime.month = editValue.value;
     ab8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
     abc:	68 2f       	mov	r22, r24
     abe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <dateTime+0x4>
			ds1307_setdate(dateTime);
     ac2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dateTime>
     ac6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dateTime+0x1>
     aca:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <dateTime+0x2>
     ace:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <dateTime+0x3>
     ad2:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <dateTime+0x5>
     ad6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dateTime+0x6>
     ada:	62 de       	rcall	.-828    	; 0x7a0 <_Z14ds1307_setdate8DateTime>
			alarm.lastDay = 0;
     adc:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <alarm+0x2>
			break;
     ae0:	45 c0       	rjmp	.+138    	; 0xb6c <_Z20firstButtonLongPressv+0x162>
		case mw_SetDay:
			dateTime.day = editValue.value;
     ae2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
     ae6:	58 2f       	mov	r21, r24
     ae8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <dateTime+0x3>
			alarm.lastDay = 0;
     aec:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <alarm+0x2>
			ds1307_setdate(dateTime);
     af0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dateTime>
     af4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dateTime+0x1>
     af8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <dateTime+0x2>
     afc:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <dateTime+0x4>
     b00:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <dateTime+0x5>
     b04:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dateTime+0x6>
     b08:	4b de       	rcall	.-874    	; 0x7a0 <_Z14ds1307_setdate8DateTime>
			break;
     b0a:	30 c0       	rjmp	.+96     	; 0xb6c <_Z20firstButtonLongPressv+0x162>
		case mw_SetIsAlarmActive:
			alarm.isActive = editValue.value;
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <editValue+0x1>
     b12:	81 11       	cpse	r24, r1
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <_Z20firstButtonLongPressv+0x10e>
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	e3 ed       	ldi	r30, 0xD3	; 211
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	60 83       	st	Z, r22
			alarm.lastDay = 0;
     b1e:	12 82       	std	Z+2, r1	; 0x02
			eeprom_update_byte(&eeprom_isAlarmActive, alarm.isActive);
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	3d d6       	rcall	.+3194   	; 0x17a0 <eeprom_update_byte>
			break;
     b26:	22 c0       	rjmp	.+68     	; 0xb6c <_Z20firstButtonLongPressv+0x162>
		case mw_SetAlarmMin:
			alarm.startMin = editValue.value;
     b28:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
     b2c:	e3 ed       	ldi	r30, 0xD3	; 211
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	64 83       	std	Z+4, r22	; 0x04
			alarm.lastDay = 0;
     b32:	12 82       	std	Z+2, r1	; 0x02
			eeprom_update_byte(&eeprom_alarmMin, alarm.startMin);
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	33 d6       	rcall	.+3174   	; 0x17a0 <eeprom_update_byte>
			break;
     b3a:	18 c0       	rjmp	.+48     	; 0xb6c <_Z20firstButtonLongPressv+0x162>
		case mw_SetAlarmHour:
			alarm.startHour = editValue.value;
     b3c:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
     b40:	e3 ed       	ldi	r30, 0xD3	; 211
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	63 83       	std	Z+3, r22	; 0x03
			alarm.lastDay = 0;
     b46:	12 82       	std	Z+2, r1	; 0x02
			eeprom_update_byte(&eeprom_alarmHour, alarm.startHour);
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	29 d6       	rcall	.+3154   	; 0x17a0 <eeprom_update_byte>
			break;
     b4e:	0e c0       	rjmp	.+28     	; 0xb6c <_Z20firstButtonLongPressv+0x162>
		case mw_SetThrashhold:
			nightMode.thresholdInit = editValue.value;
     b50:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <editValue+0x1>
     b54:	e6 e8       	ldi	r30, 0x86	; 134
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	65 83       	std	Z+5, r22	; 0x05
			nightMode.threshold =  20 * nightMode.thresholdInit;
     b5a:	24 e1       	ldi	r18, 0x14	; 20
     b5c:	62 9f       	mul	r22, r18
     b5e:	c0 01       	movw	r24, r0
     b60:	11 24       	eor	r1, r1
     b62:	94 83       	std	Z+4, r25	; 0x04
     b64:	83 83       	std	Z+3, r24	; 0x03
			eeprom_update_byte(&eeprom_nightThreshold, nightMode.thresholdInit);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	1a d6       	rcall	.+3124   	; 0x17a0 <eeprom_update_byte>
			break;
	}
	
	modeWork = modeWork < mw_LastMW? modeWork + 1 : 0;
     b6c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     b70:	8a 30       	cpi	r24, 0x0A	; 10
     b72:	10 f4       	brcc	.+4      	; 0xb78 <_Z20firstButtonLongPressv+0x16e>
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <_Z20firstButtonLongPressv+0x170>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <modeWork>
     b7e:	e8 e9       	ldi	r30, 0x98	; 152
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	8e e9       	ldi	r24, 0x9E	; 158
     b84:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i = 0; i < 6; i++) {
		tube.isFlash[i] = false;
     b86:	11 92       	st	Z+, r1
		tube.isDisabled[i] = false;
     b88:	15 82       	std	Z+5, r1	; 0x05
		tube.isDoteActive[i] = false;
     b8a:	13 86       	std	Z+11, r1	; 0x0b
			break;
	}
	
	modeWork = modeWork < mw_LastMW? modeWork + 1 : 0;
	
	for (uint8_t i = 0; i < 6; i++) {
     b8c:	e8 17       	cp	r30, r24
     b8e:	f9 07       	cpc	r31, r25
     b90:	d1 f7       	brne	.-12     	; 0xb86 <_Z20firstButtonLongPressv+0x17c>
		tube.isFlash[i] = false;
		tube.isDisabled[i] = false;
		tube.isDoteActive[i] = false;
	}
		
	editValue.isGrabbed = false;
     b92:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <editValue>
     b96:	08 95       	ret

00000b98 <_Z16buttonControllerv>:
	ADCSRA |= (1 << ADSC);
	while (ADCSRA & (1 << ADSC));
	return ADCW;
}

void buttonController() {
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	cf 92       	push	r12
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
	if (etching.isWorking) {
     baa:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <etching>
     bae:	81 11       	cpse	r24, r1
     bb0:	c2 c0       	rjmp	.+388    	; 0xd36 <_Z16buttonControllerv+0x19e>
		return;
	}
	button.adc = getADC(6);
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	a0 db       	rcall	.-2240   	; 0x2f6 <_Z6getADCh>
     bb6:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <button+0x4>
     bba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <button+0x3>
	uint8_t curButtonNum = 0;

	if (button.adc < 581) {
     bbe:	85 34       	cpi	r24, 0x45	; 69
     bc0:	22 e0       	ldi	r18, 0x02	; 2
     bc2:	92 07       	cpc	r25, r18
     bc4:	34 f0       	brlt	.+12     	; 0xbd2 <_Z16buttonControllerv+0x3a>
		curButtonNum = 2;
	} else if (button.adc < 770) {
		curButtonNum = 1;
	} 
	
	if (curButtonNum > 0) {
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	93 40       	sbci	r25, 0x03	; 3
     bca:	0c f0       	brlt	.+2      	; 0xbce <_Z16buttonControllerv+0x36>
     bcc:	a7 c0       	rjmp	.+334    	; 0xd1c <_Z16buttonControllerv+0x184>
void buttonController() {
	if (etching.isWorking) {
		return;
	}
	button.adc = getADC(6);
	uint8_t curButtonNum = 0;
     bce:	c1 e0       	ldi	r28, 0x01	; 1
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <_Z16buttonControllerv+0x3c>

	if (button.adc < 581) {
		curButtonNum = 2;
     bd2:	c2 e0       	ldi	r28, 0x02	; 2
	} else if (button.adc < 770) {
		curButtonNum = 1;
	} 
	
	if (curButtonNum > 0) {
		if (button.bounceTime == 0) {
     bd4:	ee eb       	ldi	r30, 0xBE	; 190
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	25 81       	ldd	r18, Z+5	; 0x05
     bda:	36 81       	ldd	r19, Z+6	; 0x06
     bdc:	47 81       	ldd	r20, Z+7	; 0x07
     bde:	50 85       	ldd	r21, Z+8	; 0x08
     be0:	61 85       	ldd	r22, Z+9	; 0x09
     be2:	72 85       	ldd	r23, Z+10	; 0x0a
     be4:	83 85       	ldd	r24, Z+11	; 0x0b
     be6:	94 85       	ldd	r25, Z+12	; 0x0c
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	b2 d5       	rcall	.+2916   	; 0x1750 <__cmpdi2_s8>
     bec:	69 f4       	brne	.+26     	; 0xc08 <_Z16buttonControllerv+0x70>
			button.bounceTime = millis();
     bee:	96 da       	rcall	.-2772   	; 0x11c <_Z6millisv>
     bf0:	ee eb       	ldi	r30, 0xBE	; 190
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	25 83       	std	Z+5, r18	; 0x05
     bf6:	36 83       	std	Z+6, r19	; 0x06
     bf8:	47 83       	std	Z+7, r20	; 0x07
     bfa:	50 87       	std	Z+8, r21	; 0x08
     bfc:	61 87       	std	Z+9, r22	; 0x09
     bfe:	72 87       	std	Z+10, r23	; 0x0a
     c00:	83 87       	std	Z+11, r24	; 0x0b
     c02:	94 87       	std	Z+12, r25	; 0x0c
			button.num = curButtonNum;
     c04:	c2 83       	std	Z+2, r28	; 0x02
     c06:	97 c0       	rjmp	.+302    	; 0xd36 <_Z16buttonControllerv+0x19e>
		} else if (millis() - button.bounceTime > 60) {
     c08:	89 da       	rcall	.-2798   	; 0x11c <_Z6millisv>
     c0a:	ee eb       	ldi	r30, 0xBE	; 190
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	a5 80       	ldd	r10, Z+5	; 0x05
     c10:	b6 80       	ldd	r11, Z+6	; 0x06
     c12:	c7 80       	ldd	r12, Z+7	; 0x07
     c14:	d0 84       	ldd	r13, Z+8	; 0x08
     c16:	e1 84       	ldd	r14, Z+9	; 0x09
     c18:	f2 84       	ldd	r15, Z+10	; 0x0a
     c1a:	03 85       	ldd	r16, Z+11	; 0x0b
     c1c:	14 85       	ldd	r17, Z+12	; 0x0c
     c1e:	86 d5       	rcall	.+2828   	; 0x172c <__subdi3>
     c20:	ac e3       	ldi	r26, 0x3C	; 60
     c22:	96 d5       	rcall	.+2860   	; 0x1750 <__cmpdi2_s8>
     c24:	09 f0       	breq	.+2      	; 0xc28 <_Z16buttonControllerv+0x90>
     c26:	08 f4       	brcc	.+2      	; 0xc2a <_Z16buttonControllerv+0x92>
     c28:	86 c0       	rjmp	.+268    	; 0xd36 <_Z16buttonControllerv+0x19e>
			if (alarm.beeper.canBeep) {
     c2a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <alarm+0x6>
     c2e:	88 23       	and	r24, r24
     c30:	41 f0       	breq	.+16     	; 0xc42 <_Z16buttonControllerv+0xaa>
				alarm.isTurnedOff = true;
     c32:	e3 ed       	ldi	r30, 0xD3	; 211
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	81 83       	std	Z+1, r24	; 0x01
				alarm.beeper.canBeep = false;
     c3a:	16 82       	std	Z+6, r1	; 0x06
				button.notInclude = true;
     c3c:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <button+0x1>
     c40:	7a c0       	rjmp	.+244    	; 0xd36 <_Z16buttonControllerv+0x19e>
			} else if (button.longPressTime == 0) {
     c42:	ee eb       	ldi	r30, 0xBE	; 190
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	25 85       	ldd	r18, Z+13	; 0x0d
     c48:	36 85       	ldd	r19, Z+14	; 0x0e
     c4a:	47 85       	ldd	r20, Z+15	; 0x0f
     c4c:	50 89       	ldd	r21, Z+16	; 0x10
     c4e:	61 89       	ldd	r22, Z+17	; 0x11
     c50:	72 89       	ldd	r23, Z+18	; 0x12
     c52:	83 89       	ldd	r24, Z+19	; 0x13
     c54:	94 89       	ldd	r25, Z+20	; 0x14
     c56:	a0 e0       	ldi	r26, 0x00	; 0
     c58:	7b d5       	rcall	.+2806   	; 0x1750 <__cmpdi2_s8>
     c5a:	61 f4       	brne	.+24     	; 0xc74 <_Z16buttonControllerv+0xdc>
				button.longPressTime = millis();
     c5c:	5f da       	rcall	.-2882   	; 0x11c <_Z6millisv>
     c5e:	ee eb       	ldi	r30, 0xBE	; 190
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	25 87       	std	Z+13, r18	; 0x0d
     c64:	36 87       	std	Z+14, r19	; 0x0e
     c66:	47 87       	std	Z+15, r20	; 0x0f
     c68:	50 8b       	std	Z+16, r21	; 0x10
     c6a:	61 8b       	std	Z+17, r22	; 0x11
     c6c:	72 8b       	std	Z+18, r23	; 0x12
     c6e:	83 8b       	std	Z+19, r24	; 0x13
     c70:	94 8b       	std	Z+20, r25	; 0x14
     c72:	61 c0       	rjmp	.+194    	; 0xd36 <_Z16buttonControllerv+0x19e>
			} else if (millis() - button.longPressTime > 1300) {
     c74:	53 da       	rcall	.-2906   	; 0x11c <_Z6millisv>
     c76:	ee eb       	ldi	r30, 0xBE	; 190
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	a5 84       	ldd	r10, Z+13	; 0x0d
     c7c:	b6 84       	ldd	r11, Z+14	; 0x0e
     c7e:	c7 84       	ldd	r12, Z+15	; 0x0f
     c80:	d0 88       	ldd	r13, Z+16	; 0x10
     c82:	e1 88       	ldd	r14, Z+17	; 0x11
     c84:	f2 88       	ldd	r15, Z+18	; 0x12
     c86:	03 89       	ldd	r16, Z+19	; 0x13
     c88:	14 89       	ldd	r17, Z+20	; 0x14
     c8a:	50 d5       	rcall	.+2720   	; 0x172c <__subdi3>
     c8c:	24 31       	cpi	r18, 0x14	; 20
     c8e:	35 40       	sbci	r19, 0x05	; 5
     c90:	41 05       	cpc	r20, r1
     c92:	51 05       	cpc	r21, r1
     c94:	61 05       	cpc	r22, r1
     c96:	71 05       	cpc	r23, r1
     c98:	81 05       	cpc	r24, r1
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f0       	breq	.+2      	; 0xca0 <_Z16buttonControllerv+0x108>
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <_Z16buttonControllerv+0x10a>
     ca0:	4a c0       	rjmp	.+148    	; 0xd36 <_Z16buttonControllerv+0x19e>
				button.isLongPress = true;
     ca2:	ee eb       	ldi	r30, 0xBE	; 190
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 83       	st	Z, r24
				returnTime = 10;
     caa:	8a e0       	ldi	r24, 0x0A	; 10
     cac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <returnTime>
				switch(button.num) {
     cb0:	82 81       	ldd	r24, Z+2	; 0x02
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	19 f0       	breq	.+6      	; 0xcbc <_Z16buttonControllerv+0x124>
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <_Z16buttonControllerv+0x128>
     cba:	1a c0       	rjmp	.+52     	; 0xcf0 <_Z16buttonControllerv+0x158>
					case 1:
						firstButtonLongPress();
     cbc:	a6 de       	rcall	.-692    	; 0xa0a <_Z20firstButtonLongPressv>
						break;
     cbe:	18 c0       	rjmp	.+48     	; 0xcf0 <_Z16buttonControllerv+0x158>
					case 2:
						if (modeWork == mw_Clock && !nightMode.isActive) {
     cc0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
     cc4:	81 11       	cpse	r24, r1
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <_Z16buttonControllerv+0x158>
     cc8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <nightMode>
     ccc:	81 11       	cpse	r24, r1
     cce:	10 c0       	rjmp	.+32     	; 0xcf0 <_Z16buttonControllerv+0x158>
							isLedActive = !isLedActive;
     cd0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <isLedActive>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	89 27       	eor	r24, r25
     cd8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <isLedActive>
							switchPort(PORTB,ledPin, isLedActive);
     cdc:	88 23       	and	r24, r24
     cde:	11 f0       	breq	.+4      	; 0xce4 <_Z16buttonControllerv+0x14c>
     ce0:	c2 9a       	sbi	0x18, 2	; 24
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <_Z16buttonControllerv+0x14e>
     ce4:	c2 98       	cbi	0x18, 2	; 24
							eeprom_update_byte(&eeprom_ledState, isLedActive);
     ce6:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <isLedActive>
     cea:	85 e0       	ldi	r24, 0x05	; 5
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	58 d5       	rcall	.+2736   	; 0x17a0 <eeprom_update_byte>
						}
						break;
				}
				button.longPressTime = millis();
     cf0:	15 da       	rcall	.-3030   	; 0x11c <_Z6millisv>
     cf2:	ee eb       	ldi	r30, 0xBE	; 190
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	25 87       	std	Z+13, r18	; 0x0d
     cf8:	36 87       	std	Z+14, r19	; 0x0e
     cfa:	47 87       	std	Z+15, r20	; 0x0f
     cfc:	50 8b       	std	Z+16, r21	; 0x10
     cfe:	61 8b       	std	Z+17, r22	; 0x11
     d00:	72 8b       	std	Z+18, r23	; 0x12
     d02:	83 8b       	std	Z+19, r24	; 0x13
     d04:	94 8b       	std	Z+20, r25	; 0x14
     d06:	17 c0       	rjmp	.+46     	; 0xd36 <_Z16buttonControllerv+0x19e>
			}
		}
	}
	
	if (curButtonNum == 0 && button.bounceTime != 0 ) {
		if (!button.isLongPress) {
     d08:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <button>
     d0c:	81 11       	cpse	r24, r1
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <_Z16buttonControllerv+0x180>
			returnTime = 10;
     d10:	8a e0       	ldi	r24, 0x0A	; 10
     d12:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <returnTime>
			buttonShortPress();
     d16:	b7 dd       	rcall	.-1170   	; 0x886 <_Z16buttonShortPressv>
		}
		resetButtons();
     d18:	d8 da       	rcall	.-2640   	; 0x2ca <_Z12resetButtonsv>
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <_Z16buttonControllerv+0x19e>
				button.longPressTime = millis();
			}
		}
	}
	
	if (curButtonNum == 0 && button.bounceTime != 0 ) {
     d1c:	ee eb       	ldi	r30, 0xBE	; 190
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	25 81       	ldd	r18, Z+5	; 0x05
     d22:	36 81       	ldd	r19, Z+6	; 0x06
     d24:	47 81       	ldd	r20, Z+7	; 0x07
     d26:	50 85       	ldd	r21, Z+8	; 0x08
     d28:	61 85       	ldd	r22, Z+9	; 0x09
     d2a:	72 85       	ldd	r23, Z+10	; 0x0a
     d2c:	83 85       	ldd	r24, Z+11	; 0x0b
     d2e:	94 85       	ldd	r25, Z+12	; 0x0c
     d30:	a0 e0       	ldi	r26, 0x00	; 0
     d32:	0e d5       	rcall	.+2588   	; 0x1750 <__cmpdi2_s8>
     d34:	49 f7       	brne	.-46     	; 0xd08 <_Z16buttonControllerv+0x170>
			returnTime = 10;
			buttonShortPress();
		}
		resetButtons();
	}
}
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	08 95       	ret

00000d4a <_Z14ds1307_getdatev>:
	i2c_write(ds1307_dec2bcd(dateTime.year));
	i2c_write(0x00);
	i2c_stop();
}

DateTime ds1307_getdate() {
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	27 97       	sbiw	r28, 0x07	; 7
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
     d6a:	80 ed       	ldi	r24, 0xD0	; 208
     d6c:	7f d4       	rcall	.+2302   	; 0x166c <_Z14i2c_start_waith>
	i2c_write(0x00);
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	a3 d4       	rcall	.+2374   	; 0x16b8 <_Z9i2c_writeh>
	i2c_stop();
     d72:	9c d4       	rcall	.+2360   	; 0x16ac <_Z8i2c_stopv>
	DateTime dateTime;
	i2c_rep_start(DS1307_ADDR | I2C_READ);
     d74:	81 ed       	ldi	r24, 0xD1	; 209
     d76:	98 d4       	rcall	.+2352   	; 0x16a8 <_Z13i2c_rep_starth>
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
     d78:	ac d4       	rcall	.+2392   	; 0x16d2 <_Z11i2c_readAckv>
     d7a:	8f 77       	andi	r24, 0x7F	; 127
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	35 95       	asr	r19
     d82:	27 95       	ror	r18
     d84:	35 95       	asr	r19
     d86:	27 95       	ror	r18
     d88:	35 95       	asr	r19
     d8a:	27 95       	ror	r18
     d8c:	35 95       	asr	r19
     d8e:	27 95       	ror	r18
     d90:	92 2f       	mov	r25, r18
     d92:	99 0f       	add	r25, r25
     d94:	29 0f       	add	r18, r25
     d96:	22 0f       	add	r18, r18
     d98:	f8 2e       	mov	r15, r24
     d9a:	f2 1a       	sub	r15, r18
	i2c_write(0x00);
	i2c_stop();
	DateTime dateTime;
	i2c_rep_start(DS1307_ADDR | I2C_READ);
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
     d9c:	9a d4       	rcall	.+2356   	; 0x16d2 <_Z11i2c_readAckv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	35 95       	asr	r19
     da4:	27 95       	ror	r18
     da6:	35 95       	asr	r19
     da8:	27 95       	ror	r18
     daa:	35 95       	asr	r19
     dac:	27 95       	ror	r18
     dae:	35 95       	asr	r19
     db0:	27 95       	ror	r18
     db2:	92 2f       	mov	r25, r18
     db4:	99 0f       	add	r25, r25
     db6:	29 0f       	add	r18, r25
     db8:	22 0f       	add	r18, r18
     dba:	08 2f       	mov	r16, r24
     dbc:	02 1b       	sub	r16, r18
	i2c_stop();
	DateTime dateTime;
	i2c_rep_start(DS1307_ADDR | I2C_READ);
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
     dbe:	89 d4       	rcall	.+2322   	; 0x16d2 <_Z11i2c_readAckv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	35 95       	asr	r19
     dc6:	27 95       	ror	r18
     dc8:	35 95       	asr	r19
     dca:	27 95       	ror	r18
     dcc:	35 95       	asr	r19
     dce:	27 95       	ror	r18
     dd0:	35 95       	asr	r19
     dd2:	27 95       	ror	r18
     dd4:	92 2f       	mov	r25, r18
     dd6:	99 0f       	add	r25, r25
     dd8:	29 0f       	add	r18, r25
     dda:	22 0f       	add	r18, r18
     ddc:	18 2f       	mov	r17, r24
     dde:	12 1b       	sub	r17, r18
	DateTime dateTime;
	i2c_rep_start(DS1307_ADDR | I2C_READ);
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
     de0:	78 d4       	rcall	.+2288   	; 0x16d2 <_Z11i2c_readAckv>
	dateTime.day = ds1307_bcd2dec(i2c_readAck());
     de2:	77 d4       	rcall	.+2286   	; 0x16d2 <_Z11i2c_readAckv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	35 95       	asr	r19
     dea:	27 95       	ror	r18
     dec:	35 95       	asr	r19
     dee:	27 95       	ror	r18
     df0:	35 95       	asr	r19
     df2:	27 95       	ror	r18
     df4:	35 95       	asr	r19
     df6:	27 95       	ror	r18
     df8:	92 2f       	mov	r25, r18
     dfa:	99 0f       	add	r25, r25
     dfc:	29 0f       	add	r18, r25
     dfe:	22 0f       	add	r18, r18
     e00:	e8 2e       	mov	r14, r24
     e02:	e2 1a       	sub	r14, r18
	dateTime.sec = ds1307_bcd2dec(i2c_readAck() & 0x7F);
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	dateTime.day = ds1307_bcd2dec(i2c_readAck());
	dateTime.month = ds1307_bcd2dec(i2c_readAck());
     e04:	66 d4       	rcall	.+2252   	; 0x16d2 <_Z11i2c_readAckv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	35 95       	asr	r19
     e0c:	27 95       	ror	r18
     e0e:	35 95       	asr	r19
     e10:	27 95       	ror	r18
     e12:	35 95       	asr	r19
     e14:	27 95       	ror	r18
     e16:	35 95       	asr	r19
     e18:	27 95       	ror	r18
     e1a:	92 2f       	mov	r25, r18
     e1c:	99 0f       	add	r25, r25
     e1e:	29 0f       	add	r18, r25
     e20:	22 0f       	add	r18, r18
     e22:	c8 2e       	mov	r12, r24
     e24:	c2 1a       	sub	r12, r18
	dateTime.min = ds1307_bcd2dec(i2c_readAck());
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	dateTime.day = ds1307_bcd2dec(i2c_readAck());
	dateTime.month = ds1307_bcd2dec(i2c_readAck());
	dateTime.year = ds1307_bcd2dec(i2c_readNak());
     e26:	5c d4       	rcall	.+2232   	; 0x16e0 <_Z11i2c_readNakv>
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
}

uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	35 95       	asr	r19
     e2e:	27 95       	ror	r18
     e30:	35 95       	asr	r19
     e32:	27 95       	ror	r18
     e34:	35 95       	asr	r19
     e36:	27 95       	ror	r18
     e38:	35 95       	asr	r19
     e3a:	27 95       	ror	r18
     e3c:	92 2f       	mov	r25, r18
     e3e:	99 0f       	add	r25, r25
     e40:	29 0f       	add	r18, r25
     e42:	22 0f       	add	r18, r18
     e44:	d8 2e       	mov	r13, r24
     e46:	d2 1a       	sub	r13, r18
	dateTime.hour = ds1307_bcd2dec(i2c_readAck());
	i2c_readAck();
	dateTime.day = ds1307_bcd2dec(i2c_readAck());
	dateTime.month = ds1307_bcd2dec(i2c_readAck());
	dateTime.year = ds1307_bcd2dec(i2c_readNak());
	i2c_stop();
     e48:	31 d4       	rcall	.+2146   	; 0x16ac <_Z8i2c_stopv>
	return dateTime;
}
     e4a:	2f 2d       	mov	r18, r15
     e4c:	30 2f       	mov	r19, r16
     e4e:	41 2f       	mov	r20, r17
     e50:	5e 2d       	mov	r21, r14
     e52:	6c 2d       	mov	r22, r12
     e54:	7d 2d       	mov	r23, r13
     e56:	8f 81       	ldd	r24, Y+7	; 0x07
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	27 96       	adiw	r28, 0x07	; 7
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	08 95       	ret

00000e78 <_Z4initv>:
#include "Utilities/main.h"

void init() {
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
	DDRD = 0xFC;
     e7e:	8c ef       	ldi	r24, 0xFC	; 252
     e80:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xC7;
     e82:	87 ec       	ldi	r24, 0xC7	; 199
     e84:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x0F;
     e86:	8f e0       	ldi	r24, 0x0F	; 15
     e88:	84 bb       	out	0x14, r24	; 20
	ADMUX = (1 << REFS0);
     e8a:	80 e4       	ldi	r24, 0x40	; 64
     e8c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e8e:	86 b1       	in	r24, 0x06	; 6
     e90:	87 68       	ori	r24, 0x87	; 135
     e92:	86 b9       	out	0x06, r24	; 6
	
	i2c_init();
     e94:	c9 d3       	rcall	.+1938   	; 0x1628 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e96:	87 ec       	ldi	r24, 0xC7	; 199
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <_Z4initv+0x22>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <_Z4initv+0x28>
     ea0:	00 00       	nop
	_delay_us(100);
	dateTime = ds1307_getdate();
     ea2:	53 df       	rcall	.-346    	; 0xd4a <_Z14ds1307_getdatev>
     ea4:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <dateTime>
     ea8:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <dateTime+0x1>
     eac:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <dateTime+0x2>
     eb0:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <dateTime+0x3>
     eb4:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <dateTime+0x4>
     eb8:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <dateTime+0x5>
     ebc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dateTime+0x6>
	
	bright.level = eeprom_read_byte(&eeprom_bright);
     ec0:	86 e0       	ldi	r24, 0x06	; 6
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	65 d4       	rcall	.+2250   	; 0x1790 <eeprom_read_byte>
     ec6:	ec eb       	ldi	r30, 0xBC	; 188
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 83       	st	Z, r24
	bright.dayLevel = bright.level;
     ecc:	81 83       	std	Z+1, r24	; 0x01
	
	hourBeep.isActive = eeprom_read_byte(&eeprom_isHourBeepActive);
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	5e d4       	rcall	.+2236   	; 0x1790 <eeprom_read_byte>
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	81 11       	cpse	r24, r1
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <_Z4initv+0x64>
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <hourBeep>
	hourBeep.lastHour = dateTime.hour;
     ee0:	eb ee       	ldi	r30, 0xEB	; 235
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dateTime+0x2>
     ee8:	82 83       	std	Z+2, r24	; 0x02
	hourBeep.manualActivation = false;
     eea:	11 82       	std	Z+1, r1	; 0x01
	hourBeep.beeper.initCount = 2;
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	87 83       	std	Z+7, r24	; 0x07
	hourBeep.beeper.durationActive = 90;
     ef0:	8a e5       	ldi	r24, 0x5A	; 90
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	91 87       	std	Z+9, r25	; 0x09
     ef6:	80 87       	std	Z+8, r24	; 0x08
	hourBeep.beeper.durationInactive = 50;
     ef8:	82 e3       	ldi	r24, 0x32	; 50
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	93 87       	std	Z+11, r25	; 0x0b
     efe:	82 87       	std	Z+10, r24	; 0x0a
	hourBeep.beeper.waitingTime = 0;
     f00:	15 86       	std	Z+13, r1	; 0x0d
     f02:	14 86       	std	Z+12, r1	; 0x0c
	hourBeep.beeper.canBeep = false;
     f04:	14 82       	std	Z+4, r1	; 0x04
	hourBeep.beeper.isCanInit = false;
     f06:	13 82       	std	Z+3, r1	; 0x03
	hourBeep.beeper.isPinActive = false;
     f08:	15 82       	std	Z+5, r1	; 0x05
	
	alarm.isActive = eeprom_read_byte(&eeprom_isAlarmActive);
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	40 d4       	rcall	.+2176   	; 0x1790 <eeprom_read_byte>
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	81 11       	cpse	r24, r1
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <_Z4initv+0xa0>
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <alarm>
	alarm.startHour = eeprom_read_byte(&eeprom_alarmHour);
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	37 d4       	rcall	.+2158   	; 0x1790 <eeprom_read_byte>
     f22:	c3 ed       	ldi	r28, 0xD3	; 211
     f24:	d0 e0       	ldi	r29, 0x00	; 0
     f26:	8b 83       	std	Y+3, r24	; 0x03
	alarm.startMin = eeprom_read_byte(&eeprom_alarmMin);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	31 d4       	rcall	.+2146   	; 0x1790 <eeprom_read_byte>
     f2e:	8c 83       	std	Y+4, r24	; 0x04
	alarm.lastDay = 0;
     f30:	1a 82       	std	Y+2, r1	; 0x02
	alarm.isTurnedOff = false;
     f32:	19 82       	std	Y+1, r1	; 0x01
	alarm.beeper.initCount = 5;
     f34:	85 e0       	ldi	r24, 0x05	; 5
     f36:	89 87       	std	Y+9, r24	; 0x09
	alarm.beeper.durationActive = 70;
     f38:	26 e4       	ldi	r18, 0x46	; 70
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	3b 87       	std	Y+11, r19	; 0x0b
     f3e:	2a 87       	std	Y+10, r18	; 0x0a
	alarm.beeper.durationInactive = 40;
     f40:	28 e2       	ldi	r18, 0x28	; 40
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	3d 87       	std	Y+13, r19	; 0x0d
     f46:	2c 87       	std	Y+12, r18	; 0x0c
	alarm.beeper.waitingTime = 700;
     f48:	2c eb       	ldi	r18, 0xBC	; 188
     f4a:	32 e0       	ldi	r19, 0x02	; 2
     f4c:	3f 87       	std	Y+15, r19	; 0x0f
     f4e:	2e 87       	std	Y+14, r18	; 0x0e
	alarm.beeper.canBeep = false;
     f50:	1e 82       	std	Y+6, r1	; 0x06
	alarm.beeper.isCanInit = false;
     f52:	1d 82       	std	Y+5, r1	; 0x05
	alarm.beeper.isPinActive = false;
     f54:	1f 82       	std	Y+7, r1	; 0x07
	
	ledBlinking.isCanInit = false;
     f56:	e6 e6       	ldi	r30, 0x66	; 102
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	10 82       	st	Z, r1
	ledBlinking.durationActive = 100;
     f5c:	24 e6       	ldi	r18, 0x64	; 100
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	34 83       	std	Z+4, r19	; 0x04
     f62:	23 83       	std	Z+3, r18	; 0x03
	ledBlinking.durationInactive = 50;
     f64:	22 e3       	ldi	r18, 0x32	; 50
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	36 83       	std	Z+6, r19	; 0x06
     f6a:	25 83       	std	Z+5, r18	; 0x05
	ledBlinking.count = 0;
     f6c:	11 82       	std	Z+1, r1	; 0x01
	ledBlinking.startValue = 5;
     f6e:	82 83       	std	Z+2, r24	; 0x02
	isLedActive = eeprom_read_byte(&eeprom_ledState);
     f70:	85 e0       	ldi	r24, 0x05	; 5
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0d d4       	rcall	.+2074   	; 0x1790 <eeprom_read_byte>
     f76:	18 2f       	mov	r17, r24
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	11 11       	cpse	r17, r1
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <_Z4initv+0x108>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <isLedActive>

	nightMode.isActive = false;
     f84:	c6 e8       	ldi	r28, 0x86	; 134
     f86:	d0 e0       	ldi	r29, 0x00	; 0
     f88:	18 82       	st	Y, r1
	nightMode.thresholdInit = eeprom_read_byte(&eeprom_nightThreshold);
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	00 d4       	rcall	.+2048   	; 0x1790 <eeprom_read_byte>
     f90:	8d 83       	std	Y+5, r24	; 0x05
	nightMode.threshold =  20 * nightMode.thresholdInit;
     f92:	24 e1       	ldi	r18, 0x14	; 20
     f94:	82 9f       	mul	r24, r18
     f96:	c0 01       	movw	r24, r0
     f98:	11 24       	eor	r1, r1
     f9a:	9c 83       	std	Y+4, r25	; 0x04
     f9c:	8b 83       	std	Y+3, r24	; 0x03
	nightMode.isCanTryActivate = true;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
	nightMode.autoStamp = 0;
     fa2:	1a 86       	std	Y+10, r1	; 0x0a
     fa4:	1b 86       	std	Y+11, r1	; 0x0b
     fa6:	1c 86       	std	Y+12, r1	; 0x0c
     fa8:	1d 86       	std	Y+13, r1	; 0x0d
     faa:	1e 86       	std	Y+14, r1	; 0x0e
     fac:	1f 86       	std	Y+15, r1	; 0x0f
     fae:	18 8a       	std	Y+16, r1	; 0x10
     fb0:	19 8a       	std	Y+17, r1	; 0x11
	
	showDate.start = 51;
     fb2:	e1 e0       	ldi	r30, 0x01	; 1
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	93 e3       	ldi	r25, 0x33	; 51
     fb8:	90 83       	st	Z, r25
	showDate.stop = 53;
     fba:	95 e3       	ldi	r25, 0x35	; 53
     fbc:	91 83       	std	Z+1, r25	; 0x01
	showDate.isActive = true;
     fbe:	82 83       	std	Z+2, r24	; 0x02
	
	switchPort(PORTB, ledPin, isLedActive);
     fc0:	11 23       	and	r17, r17
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <_Z4initv+0x150>
     fc4:	c2 9a       	sbi	0x18, 2	; 24
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <_Z4initv+0x152>
     fc8:	c2 98       	cbi	0x18, 2	; 24
	tube.isDoteActive[4] = alarm.isActive;
     fca:	e8 e9       	ldi	r30, 0x98	; 152
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <alarm>
     fd2:	80 8b       	std	Z+16, r24	; 0x10
	tube.isDoteActive[5] = hourBeep.isActive;
     fd4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <hourBeep>
     fd8:	81 8b       	std	Z+17, r24	; 0x11

	etching.isWorking = false;
     fda:	e5 e7       	ldi	r30, 0x75	; 117
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	10 82       	st	Z, r1
	etching.duration = 170;
     fe0:	8a ea       	ldi	r24, 0xAA	; 170
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	94 83       	std	Z+4, r25	; 0x04
     fe6:	83 83       	std	Z+3, r24	; 0x03
	etching.lastMin = dateTime.min;
     fe8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <dateTime+0x1>
     fec:	81 83       	std	Z+1, r24	; 0x01
	
	button.isLongPress = false;
     fee:	ee eb       	ldi	r30, 0xBE	; 190
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	10 82       	st	Z, r1
	button.notInclude = false;
     ff4:	11 82       	std	Z+1, r1	; 0x01
	button.num = 0;
     ff6:	12 82       	std	Z+2, r1	; 0x02
	button.bounceTime = 0;
     ff8:	15 82       	std	Z+5, r1	; 0x05
     ffa:	16 82       	std	Z+6, r1	; 0x06
     ffc:	17 82       	std	Z+7, r1	; 0x07
     ffe:	10 86       	std	Z+8, r1	; 0x08
    1000:	11 86       	std	Z+9, r1	; 0x09
    1002:	12 86       	std	Z+10, r1	; 0x0a
    1004:	13 86       	std	Z+11, r1	; 0x0b
    1006:	14 86       	std	Z+12, r1	; 0x0c
	button.longPressTime = 0;
    1008:	15 86       	std	Z+13, r1	; 0x0d
    100a:	16 86       	std	Z+14, r1	; 0x0e
    100c:	17 86       	std	Z+15, r1	; 0x0f
    100e:	10 8a       	std	Z+16, r1	; 0x10
    1010:	11 8a       	std	Z+17, r1	; 0x11
    1012:	12 8a       	std	Z+18, r1	; 0x12
    1014:	13 8a       	std	Z+19, r1	; 0x13
    1016:	14 8a       	std	Z+20, r1	; 0x14
	initMillis();
    1018:	20 d8       	rcall	.-4032   	; 0x5a <_Z10initMillisv>
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	08 95       	ret

00001022 <_Z14beepControllerP6Beeper>:
	dateTime.year = ds1307_bcd2dec(i2c_readNak());
	i2c_stop();
	return dateTime;
}

void beepController(Beeper* beeper) {
    1022:	2f 92       	push	r2
    1024:	3f 92       	push	r3
    1026:	4f 92       	push	r4
    1028:	5f 92       	push	r5
    102a:	6f 92       	push	r6
    102c:	7f 92       	push	r7
    102e:	8f 92       	push	r8
    1030:	9f 92       	push	r9
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
	if (!beeper->canBeep) {
    1046:	fc 01       	movw	r30, r24
    1048:	21 81       	ldd	r18, Z+1	; 0x01
    104a:	21 11       	cpse	r18, r1
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <_Z14beepControllerP6Beeper+0x32>
		switchPort(PORTD, beepPin, 0);
    104e:	95 98       	cbi	0x12, 5	; 18
		beeper->isPinActive = false;
    1050:	12 82       	std	Z+2, r1	; 0x02
		return;
    1052:	80 c0       	rjmp	.+256    	; 0x1154 <_Z14beepControllerP6Beeper+0x132>
    1054:	ec 01       	movw	r28, r24
	}
	if (beeper->isCanInit) {
    1056:	80 81       	ld	r24, Z
    1058:	88 23       	and	r24, r24
    105a:	89 f0       	breq	.+34     	; 0x107e <_Z14beepControllerP6Beeper+0x5c>
		switchPort(PORTD, beepPin, 1);
    105c:	95 9a       	sbi	0x12, 5	; 18
		beeper->isPinActive = true;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	82 83       	std	Z+2, r24	; 0x02
		beeper->beepTime = millis();
    1062:	5c d8       	rcall	.-3912   	; 0x11c <_Z6millisv>
    1064:	2b 87       	std	Y+11, r18	; 0x0b
    1066:	3c 87       	std	Y+12, r19	; 0x0c
    1068:	4d 87       	std	Y+13, r20	; 0x0d
    106a:	5e 87       	std	Y+14, r21	; 0x0e
    106c:	6f 87       	std	Y+15, r22	; 0x0f
    106e:	78 8b       	std	Y+16, r23	; 0x10
    1070:	89 8b       	std	Y+17, r24	; 0x11
    1072:	9a 8b       	std	Y+18, r25	; 0x12
		beeper->count = beeper->initCount - 1;
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	8b 83       	std	Y+3, r24	; 0x03
		beeper->isCanInit = false;
    107a:	18 82       	st	Y, r1
    107c:	6b c0       	rjmp	.+214    	; 0x1154 <_Z14beepControllerP6Beeper+0x132>
	} else {
		if (beeper->isPinActive) {
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	88 23       	and	r24, r24
    1082:	19 f1       	breq	.+70     	; 0x10ca <_Z14beepControllerP6Beeper+0xa8>
			if (millis() - beeper->beepTime >= beeper->durationActive) {
    1084:	4b d8       	rcall	.-3946   	; 0x11c <_Z6millisv>
    1086:	ab 84       	ldd	r10, Y+11	; 0x0b
    1088:	bc 84       	ldd	r11, Y+12	; 0x0c
    108a:	cd 84       	ldd	r12, Y+13	; 0x0d
    108c:	de 84       	ldd	r13, Y+14	; 0x0e
    108e:	ef 84       	ldd	r14, Y+15	; 0x0f
    1090:	f8 88       	ldd	r15, Y+16	; 0x10
    1092:	09 89       	ldd	r16, Y+17	; 0x11
    1094:	1a 89       	ldd	r17, Y+18	; 0x12
    1096:	4a d3       	rcall	.+1684   	; 0x172c <__subdi3>
    1098:	2d 80       	ldd	r2, Y+5	; 0x05
    109a:	3e 80       	ldd	r3, Y+6	; 0x06
    109c:	a2 2c       	mov	r10, r2
    109e:	b3 2c       	mov	r11, r3
    10a0:	c1 2c       	mov	r12, r1
    10a2:	d1 2c       	mov	r13, r1
    10a4:	e1 2c       	mov	r14, r1
    10a6:	f1 2c       	mov	r15, r1
    10a8:	00 e0       	ldi	r16, 0x00	; 0
    10aa:	10 e0       	ldi	r17, 0x00	; 0
    10ac:	48 d3       	rcall	.+1680   	; 0x173e <__cmpdi2>
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <_Z14beepControllerP6Beeper+0x90>
    10b0:	51 c0       	rjmp	.+162    	; 0x1154 <_Z14beepControllerP6Beeper+0x132>
				switchPort(PORTD, beepPin, 0);
    10b2:	95 98       	cbi	0x12, 5	; 18
				beeper->isPinActive = false;
    10b4:	1a 82       	std	Y+2, r1	; 0x02
				beeper->beepTime = millis();
    10b6:	32 d8       	rcall	.-3996   	; 0x11c <_Z6millisv>
    10b8:	2b 87       	std	Y+11, r18	; 0x0b
    10ba:	3c 87       	std	Y+12, r19	; 0x0c
    10bc:	4d 87       	std	Y+13, r20	; 0x0d
    10be:	5e 87       	std	Y+14, r21	; 0x0e
    10c0:	6f 87       	std	Y+15, r22	; 0x0f
    10c2:	78 8b       	std	Y+16, r23	; 0x10
    10c4:	89 8b       	std	Y+17, r24	; 0x11
    10c6:	9a 8b       	std	Y+18, r25	; 0x12
    10c8:	45 c0       	rjmp	.+138    	; 0x1154 <_Z14beepControllerP6Beeper+0x132>
			}
		} else {
			if (beeper->count > 0) {
    10ca:	83 81       	ldd	r24, Z+3	; 0x03
    10cc:	88 23       	and	r24, r24
    10ce:	31 f1       	breq	.+76     	; 0x111c <_Z14beepControllerP6Beeper+0xfa>
				if (millis() - beeper->beepTime >= beeper->durationInactive) {
    10d0:	25 d8       	rcall	.-4022   	; 0x11c <_Z6millisv>
    10d2:	ab 84       	ldd	r10, Y+11	; 0x0b
    10d4:	bc 84       	ldd	r11, Y+12	; 0x0c
    10d6:	cd 84       	ldd	r12, Y+13	; 0x0d
    10d8:	de 84       	ldd	r13, Y+14	; 0x0e
    10da:	ef 84       	ldd	r14, Y+15	; 0x0f
    10dc:	f8 88       	ldd	r15, Y+16	; 0x10
    10de:	09 89       	ldd	r16, Y+17	; 0x11
    10e0:	1a 89       	ldd	r17, Y+18	; 0x12
    10e2:	24 d3       	rcall	.+1608   	; 0x172c <__subdi3>
    10e4:	2f 80       	ldd	r2, Y+7	; 0x07
    10e6:	38 84       	ldd	r3, Y+8	; 0x08
    10e8:	a2 2c       	mov	r10, r2
    10ea:	b3 2c       	mov	r11, r3
    10ec:	c1 2c       	mov	r12, r1
    10ee:	d1 2c       	mov	r13, r1
    10f0:	e1 2c       	mov	r14, r1
    10f2:	f1 2c       	mov	r15, r1
    10f4:	00 e0       	ldi	r16, 0x00	; 0
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    10f8:	22 d3       	rcall	.+1604   	; 0x173e <__cmpdi2>
    10fa:	60 f1       	brcs	.+88     	; 0x1154 <_Z14beepControllerP6Beeper+0x132>
					switchPort(PORTD, beepPin, 1);
    10fc:	95 9a       	sbi	0x12, 5	; 18
					beeper->isPinActive = true;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	8a 83       	std	Y+2, r24	; 0x02
					beeper->beepTime = millis();
    1102:	0c d8       	rcall	.-4072   	; 0x11c <_Z6millisv>
    1104:	2b 87       	std	Y+11, r18	; 0x0b
    1106:	3c 87       	std	Y+12, r19	; 0x0c
    1108:	4d 87       	std	Y+13, r20	; 0x0d
    110a:	5e 87       	std	Y+14, r21	; 0x0e
    110c:	6f 87       	std	Y+15, r22	; 0x0f
    110e:	78 8b       	std	Y+16, r23	; 0x10
    1110:	89 8b       	std	Y+17, r24	; 0x11
    1112:	9a 8b       	std	Y+18, r25	; 0x12
					beeper->count--;
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	1c c0       	rjmp	.+56     	; 0x1154 <_Z14beepControllerP6Beeper+0x132>
				}
			} else if (beeper->waitingTime != 0 && millis() - beeper->beepTime >= beeper->waitingTime){
    111c:	81 85       	ldd	r24, Z+9	; 0x09
    111e:	92 85       	ldd	r25, Z+10	; 0x0a
    1120:	89 2b       	or	r24, r25
    1122:	c1 f0       	breq	.+48     	; 0x1154 <_Z14beepControllerP6Beeper+0x132>
    1124:	fb d7       	rcall	.+4086   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    1126:	ab 84       	ldd	r10, Y+11	; 0x0b
    1128:	bc 84       	ldd	r11, Y+12	; 0x0c
    112a:	cd 84       	ldd	r12, Y+13	; 0x0d
    112c:	de 84       	ldd	r13, Y+14	; 0x0e
    112e:	ef 84       	ldd	r14, Y+15	; 0x0f
    1130:	f8 88       	ldd	r15, Y+16	; 0x10
    1132:	09 89       	ldd	r16, Y+17	; 0x11
    1134:	1a 89       	ldd	r17, Y+18	; 0x12
    1136:	fa d2       	rcall	.+1524   	; 0x172c <__subdi3>
    1138:	29 84       	ldd	r2, Y+9	; 0x09
    113a:	3a 84       	ldd	r3, Y+10	; 0x0a
    113c:	a2 2c       	mov	r10, r2
    113e:	b3 2c       	mov	r11, r3
    1140:	c1 2c       	mov	r12, r1
    1142:	d1 2c       	mov	r13, r1
    1144:	e1 2c       	mov	r14, r1
    1146:	f1 2c       	mov	r15, r1
    1148:	00 e0       	ldi	r16, 0x00	; 0
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	f8 d2       	rcall	.+1520   	; 0x173e <__cmpdi2>
    114e:	10 f0       	brcs	.+4      	; 0x1154 <_Z14beepControllerP6Beeper+0x132>
				beeper->isCanInit = true;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	88 83       	st	Y, r24
			}
		}
	}
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	af 90       	pop	r10
    1168:	9f 90       	pop	r9
    116a:	8f 90       	pop	r8
    116c:	7f 90       	pop	r7
    116e:	6f 90       	pop	r6
    1170:	5f 90       	pop	r5
    1172:	4f 90       	pop	r4
    1174:	3f 90       	pop	r3
    1176:	2f 90       	pop	r2
    1178:	08 95       	ret

0000117a <_Z19showDissallowedTaskv>:


void showDissallowedTask() {
    117a:	2f 92       	push	r2
    117c:	3f 92       	push	r3
    117e:	4f 92       	push	r4
    1180:	5f 92       	push	r5
    1182:	6f 92       	push	r6
    1184:	7f 92       	push	r7
    1186:	8f 92       	push	r8
    1188:	9f 92       	push	r9
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
	if (!nightMode.isActive && !(alarm.beeper.canBeep && alarm.isActive)) {
    119e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <nightMode>
    11a2:	81 11       	cpse	r24, r1
    11a4:	10 c0       	rjmp	.+32     	; 0x11c6 <_Z19showDissallowedTaskv+0x4c>
    11a6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <alarm+0x6>
    11aa:	88 23       	and	r24, r24
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <_Z19showDissallowedTaskv+0x3c>
    11ae:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <alarm>
    11b2:	81 11       	cpse	r24, r1
    11b4:	08 c0       	rjmp	.+16     	; 0x11c6 <_Z19showDissallowedTaskv+0x4c>
		switchPort(PORTB,ledPin, isLedActive);
    11b6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <isLedActive>
    11ba:	88 23       	and	r24, r24
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <_Z19showDissallowedTaskv+0x48>
    11be:	c2 9a       	sbi	0x18, 2	; 24
    11c0:	78 c0       	rjmp	.+240    	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
    11c2:	c2 98       	cbi	0x18, 2	; 24
    11c4:	76 c0       	rjmp	.+236    	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
		return;
	} 
	
	if (ledBlinking.isCanInit && ledBlinking.count == 0) {
    11c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ledBlinking>
    11ca:	88 23       	and	r24, r24
    11cc:	a1 f0       	breq	.+40     	; 0x11f6 <_Z19showDissallowedTaskv+0x7c>
    11ce:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
    11d2:	81 11       	cpse	r24, r1
    11d4:	6b c0       	rjmp	.+214    	; 0x12ac <_Z19showDissallowedTaskv+0x132>
		switchPort(PORTB,ledPin, true);
    11d6:	c2 9a       	sbi	0x18, 2	; 24
		ledBlinking.ledTime = millis();
    11d8:	a1 d7       	rcall	.+3906   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    11da:	e6 e6       	ldi	r30, 0x66	; 102
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	27 83       	std	Z+7, r18	; 0x07
    11e0:	30 87       	std	Z+8, r19	; 0x08
    11e2:	41 87       	std	Z+9, r20	; 0x09
    11e4:	52 87       	std	Z+10, r21	; 0x0a
    11e6:	63 87       	std	Z+11, r22	; 0x0b
    11e8:	74 87       	std	Z+12, r23	; 0x0c
    11ea:	85 87       	std	Z+13, r24	; 0x0d
    11ec:	96 87       	std	Z+14, r25	; 0x0e
		ledBlinking.count = ledBlinking.startValue;
    11ee:	82 81       	ldd	r24, Z+2	; 0x02
    11f0:	81 83       	std	Z+1, r24	; 0x01
		ledBlinking.isCanInit = false;
    11f2:	10 82       	st	Z, r1
    11f4:	5e c0       	rjmp	.+188    	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
	} else {
		if (isPortHigh(PINB,ledPin) && ledBlinking.count > 0) {
    11f6:	b2 9b       	sbis	0x16, 2	; 22
    11f8:	54 c0       	rjmp	.+168    	; 0x12a2 <_Z19showDissallowedTaskv+0x128>
    11fa:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
    11fe:	88 23       	and	r24, r24
    1200:	09 f4       	brne	.+2      	; 0x1204 <_Z19showDissallowedTaskv+0x8a>
    1202:	57 c0       	rjmp	.+174    	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
    1204:	35 c0       	rjmp	.+106    	; 0x1270 <_Z19showDissallowedTaskv+0xf6>
			if (millis() - ledBlinking.ledTime >= ledBlinking.durationActive) {
				switchPort(PORTB,ledPin, false);
    1206:	c2 98       	cbi	0x18, 2	; 24
				ledBlinking.count--;
    1208:	c6 e6       	ldi	r28, 0x66	; 102
    120a:	d0 e0       	ldi	r29, 0x00	; 0
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	81 50       	subi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
				ledBlinking.ledTime = millis();
    1212:	84 d7       	rcall	.+3848   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    1214:	2f 83       	std	Y+7, r18	; 0x07
    1216:	38 87       	std	Y+8, r19	; 0x08
    1218:	49 87       	std	Y+9, r20	; 0x09
    121a:	5a 87       	std	Y+10, r21	; 0x0a
    121c:	6b 87       	std	Y+11, r22	; 0x0b
    121e:	7c 87       	std	Y+12, r23	; 0x0c
    1220:	8d 87       	std	Y+13, r24	; 0x0d
    1222:	9e 87       	std	Y+14, r25	; 0x0e
    1224:	46 c0       	rjmp	.+140    	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
			}
		} else {
			if (ledBlinking.count > 0) {
				if (millis() - ledBlinking.ledTime >= ledBlinking.durationInactive) {
    1226:	7a d7       	rcall	.+3828   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    1228:	e6 e6       	ldi	r30, 0x66	; 102
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	a7 80       	ldd	r10, Z+7	; 0x07
    122e:	b0 84       	ldd	r11, Z+8	; 0x08
    1230:	c1 84       	ldd	r12, Z+9	; 0x09
    1232:	d2 84       	ldd	r13, Z+10	; 0x0a
    1234:	e3 84       	ldd	r14, Z+11	; 0x0b
    1236:	f4 84       	ldd	r15, Z+12	; 0x0c
    1238:	05 85       	ldd	r16, Z+13	; 0x0d
    123a:	16 85       	ldd	r17, Z+14	; 0x0e
    123c:	77 d2       	rcall	.+1262   	; 0x172c <__subdi3>
    123e:	25 80       	ldd	r2, Z+5	; 0x05
    1240:	36 80       	ldd	r3, Z+6	; 0x06
    1242:	a2 2c       	mov	r10, r2
    1244:	b3 2c       	mov	r11, r3
    1246:	c1 2c       	mov	r12, r1
    1248:	d1 2c       	mov	r13, r1
    124a:	e1 2c       	mov	r14, r1
    124c:	f1 2c       	mov	r15, r1
    124e:	00 e0       	ldi	r16, 0x00	; 0
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	75 d2       	rcall	.+1258   	; 0x173e <__cmpdi2>
    1254:	70 f1       	brcs	.+92     	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
					switchPort(PORTB,ledPin, true);
    1256:	c2 9a       	sbi	0x18, 2	; 24
					ledBlinking.ledTime = millis();
    1258:	61 d7       	rcall	.+3778   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    125a:	e6 e6       	ldi	r30, 0x66	; 102
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	27 83       	std	Z+7, r18	; 0x07
    1260:	30 87       	std	Z+8, r19	; 0x08
    1262:	41 87       	std	Z+9, r20	; 0x09
    1264:	52 87       	std	Z+10, r21	; 0x0a
    1266:	63 87       	std	Z+11, r22	; 0x0b
    1268:	74 87       	std	Z+12, r23	; 0x0c
    126a:	85 87       	std	Z+13, r24	; 0x0d
    126c:	96 87       	std	Z+14, r25	; 0x0e
    126e:	21 c0       	rjmp	.+66     	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
		ledBlinking.ledTime = millis();
		ledBlinking.count = ledBlinking.startValue;
		ledBlinking.isCanInit = false;
	} else {
		if (isPortHigh(PINB,ledPin) && ledBlinking.count > 0) {
			if (millis() - ledBlinking.ledTime >= ledBlinking.durationActive) {
    1270:	55 d7       	rcall	.+3754   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    1272:	e6 e6       	ldi	r30, 0x66	; 102
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	a7 80       	ldd	r10, Z+7	; 0x07
    1278:	b0 84       	ldd	r11, Z+8	; 0x08
    127a:	c1 84       	ldd	r12, Z+9	; 0x09
    127c:	d2 84       	ldd	r13, Z+10	; 0x0a
    127e:	e3 84       	ldd	r14, Z+11	; 0x0b
    1280:	f4 84       	ldd	r15, Z+12	; 0x0c
    1282:	05 85       	ldd	r16, Z+13	; 0x0d
    1284:	16 85       	ldd	r17, Z+14	; 0x0e
    1286:	52 d2       	rcall	.+1188   	; 0x172c <__subdi3>
    1288:	23 80       	ldd	r2, Z+3	; 0x03
    128a:	34 80       	ldd	r3, Z+4	; 0x04
    128c:	a2 2c       	mov	r10, r2
    128e:	b3 2c       	mov	r11, r3
    1290:	c1 2c       	mov	r12, r1
    1292:	d1 2c       	mov	r13, r1
    1294:	e1 2c       	mov	r14, r1
    1296:	f1 2c       	mov	r15, r1
    1298:	00 e0       	ldi	r16, 0x00	; 0
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	50 d2       	rcall	.+1184   	; 0x173e <__cmpdi2>
    129e:	48 f0       	brcs	.+18     	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
    12a0:	b2 cf       	rjmp	.-156    	; 0x1206 <_Z19showDissallowedTaskv+0x8c>
				switchPort(PORTB,ledPin, false);
				ledBlinking.count--;
				ledBlinking.ledTime = millis();
			}
		} else {
			if (ledBlinking.count > 0) {
    12a2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ledBlinking+0x1>
    12a6:	81 11       	cpse	r24, r1
    12a8:	be cf       	rjmp	.-132    	; 0x1226 <_Z19showDissallowedTaskv+0xac>
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <_Z19showDissallowedTaskv+0x138>
		switchPort(PORTB,ledPin, true);
		ledBlinking.ledTime = millis();
		ledBlinking.count = ledBlinking.startValue;
		ledBlinking.isCanInit = false;
	} else {
		if (isPortHigh(PINB,ledPin) && ledBlinking.count > 0) {
    12ac:	b2 99       	sbic	0x16, 2	; 22
    12ae:	e0 cf       	rjmp	.-64     	; 0x1270 <_Z19showDissallowedTaskv+0xf6>
    12b0:	f8 cf       	rjmp	.-16     	; 0x12a2 <_Z19showDissallowedTaskv+0x128>
				}
			}
		}
	}
	
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	9f 90       	pop	r9
    12c8:	8f 90       	pop	r8
    12ca:	7f 90       	pop	r7
    12cc:	6f 90       	pop	r6
    12ce:	5f 90       	pop	r5
    12d0:	4f 90       	pop	r4
    12d2:	3f 90       	pop	r3
    12d4:	2f 90       	pop	r2
    12d6:	08 95       	ret

000012d8 <main>:
	button.bounceTime = 0;
	button.longPressTime = 0;
	initMillis();
}

int main(void) {
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	28 97       	sbiw	r28, 0x08	; 8
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
	init();
    12ec:	c5 dd       	rcall	.-1142   	; 0xe78 <_Z4initv>
					}
					tubeMode = tm_Etching;
				}
			}
		} else {
			if (prevSec != dateTime.sec) {
    12ee:	0f 2e       	mov	r0, r31
    12f0:	f4 e0       	ldi	r31, 0x04	; 4
    12f2:	8f 2e       	mov	r8, r31
    12f4:	f1 e0       	ldi	r31, 0x01	; 1
    12f6:	9f 2e       	mov	r9, r31
    12f8:	f0 2d       	mov	r31, r0
    12fa:	0f 2e       	mov	r0, r31
    12fc:	fe e9       	ldi	r31, 0x9E	; 158
    12fe:	6f 2e       	mov	r6, r31
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	7f 2e       	mov	r7, r31
    1304:	f0 2d       	mov	r31, r0
						alarm.beeper.canBeep = false;
						alarm.beeper.isCanInit = false;
					}
				}
			}
			if (hourBeep.isActive) {
    1306:	0f 2e       	mov	r0, r31
    1308:	fb ee       	ldi	r31, 0xEB	; 235
    130a:	2f 2e       	mov	r2, r31
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	3f 2e       	mov	r3, r31
    1310:	f0 2d       	mov	r31, r0
			}
			if (etching.isWorking) {
				if (etching.value > 99) {
					etching.isWorking = false;
				} else { 
					if (millis() - etching.switchTime >= etching.duration) {
    1312:	0f 2e       	mov	r0, r31
    1314:	f5 e7       	ldi	r31, 0x75	; 117
    1316:	4f 2e       	mov	r4, r31
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	5f 2e       	mov	r5, r31
    131c:	f0 2d       	mov	r31, r0
}

int main(void) {
	init();
	while (true) {
		dateTime = ds1307_getdate();
    131e:	15 dd       	rcall	.-1494   	; 0xd4a <_Z14ds1307_getdatev>
    1320:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <dateTime>
    1324:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <dateTime+0x1>
    1328:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <dateTime+0x2>
    132c:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <dateTime+0x3>
    1330:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <dateTime+0x4>
    1334:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <dateTime+0x5>
    1338:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dateTime+0x6>
		buttonController();
    133c:	2d dc       	rcall	.-1958   	; 0xb98 <_Z16buttonControllerv>
		if (modeWork == mw_Clock) {
    133e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <modeWork>
    1342:	81 11       	cpse	r24, r1
    1344:	08 c1       	rjmp	.+528    	; 0x1556 <main+0x27e>
			checkNightMode();
    1346:	e2 d7       	rcall	.+4036   	; 0x230c <__TEXT_REGION_LENGTH__+0x30c>
			showDissallowedTask();
    1348:	18 df       	rcall	.-464    	; 0x117a <_Z19showDissallowedTaskv>
			if (alarm.isActive) {
    134a:	a3 ed       	ldi	r26, 0xD3	; 211
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	8c 91       	ld	r24, X
    1350:	88 23       	and	r24, r24
    1352:	19 f1       	breq	.+70     	; 0x139a <main+0xc2>
				if (dateTime.hour == alarm.startHour && dateTime.min == alarm.startMin && dateTime.day != alarm.lastDay) {
    1354:	f4 01       	movw	r30, r8
    1356:	22 81       	ldd	r18, Z+2	; 0x02
    1358:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <alarm+0x3>
    135c:	29 13       	cpse	r18, r25
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <main+0xb0>
    1360:	21 81       	ldd	r18, Z+1	; 0x01
    1362:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <alarm+0x4>
    1366:	29 13       	cpse	r18, r25
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <main+0xba>
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <alarm+0x2>
    1370:	92 17       	cp	r25, r18
    1372:	99 f0       	breq	.+38     	; 0x139a <main+0xc2>
					alarm.lastDay = dateTime.day;
    1374:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <alarm+0x2>
					alarm.beeper.canBeep = true;
    1378:	f1 e0       	ldi	r31, 0x01	; 1
    137a:	f0 93 d9 00 	sts	0x00D9, r31	; 0x8000d9 <alarm+0x6>
					alarm.isTurnedOff = false;
    137e:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <alarm+0x1>
					alarm.beeper.isCanInit = true;	
    1382:	f0 93 d8 00 	sts	0x00D8, r31	; 0x8000d8 <alarm+0x5>
    1386:	09 c0       	rjmp	.+18     	; 0x139a <main+0xc2>
				} else {
					if (dateTime.min != alarm.startMin) {
    1388:	21 81       	ldd	r18, Z+1	; 0x01
    138a:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <alarm+0x4>
    138e:	29 17       	cp	r18, r25
    1390:	21 f0       	breq	.+8      	; 0x139a <main+0xc2>
						alarm.beeper.canBeep = false;
    1392:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <alarm+0x6>
						alarm.beeper.isCanInit = false;
    1396:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <alarm+0x5>
					}
				}
			}
			if (hourBeep.isActive) {
    139a:	f1 01       	movw	r30, r2
    139c:	90 81       	ld	r25, Z
    139e:	99 23       	and	r25, r25
    13a0:	f1 f0       	breq	.+60     	; 0x13de <main+0x106>
				if (hourBeep.manualActivation || (hourBeep.lastHour != dateTime.hour && dateTime.min == 0 && alarm.startMin != 0)) 
    13a2:	21 81       	ldd	r18, Z+1	; 0x01
    13a4:	21 11       	cpse	r18, r1
    13a6:	10 c0       	rjmp	.+32     	; 0x13c8 <main+0xf0>
    13a8:	32 81       	ldd	r19, Z+2	; 0x02
    13aa:	d4 01       	movw	r26, r8
    13ac:	12 96       	adiw	r26, 0x02	; 2
    13ae:	2c 91       	ld	r18, X
    13b0:	12 97       	sbiw	r26, 0x02	; 2
    13b2:	32 17       	cp	r19, r18
    13b4:	a1 f0       	breq	.+40     	; 0x13de <main+0x106>
    13b6:	11 96       	adiw	r26, 0x01	; 1
    13b8:	2c 91       	ld	r18, X
    13ba:	21 11       	cpse	r18, r1
    13bc:	10 c0       	rjmp	.+32     	; 0x13de <main+0x106>
    13be:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <alarm+0x4>
    13c2:	22 23       	and	r18, r18
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <main+0xf0>
    13c6:	18 c1       	rjmp	.+560    	; 0x15f8 <main+0x320>
				{
					hourBeep.manualActivation = false;
    13c8:	f1 01       	movw	r30, r2
    13ca:	11 82       	std	Z+1, r1	; 0x01
					hourBeep.lastHour = dateTime.hour;
    13cc:	d4 01       	movw	r26, r8
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	2c 91       	ld	r18, X
    13d2:	22 83       	std	Z+2, r18	; 0x02
					hourBeep.beeper.canBeep = true;
    13d4:	b1 e0       	ldi	r27, 0x01	; 1
    13d6:	b4 83       	std	Z+4, r27	; 0x04
					hourBeep.beeper.isCanInit = true;
    13d8:	aa 24       	eor	r10, r10
    13da:	a3 94       	inc	r10
    13dc:	a3 82       	std	Z+3, r10	; 0x03
				} 
			}
			tube.isDoteActive[4] = alarm.isActive;
    13de:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <tube+0x10>
			tube.isDoteActive[5] = hourBeep.isActive;
    13e2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <tube+0x11>
			
			tubeMode = tm_ShowTime;
    13e6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <tubeMode>
			if (showDate.isActive) {
    13ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <showDate+0x2>
    13ee:	88 23       	and	r24, r24
    13f0:	71 f0       	breq	.+28     	; 0x140e <main+0x136>
				if (dateTime.sec >= showDate.start && dateTime.sec <= showDate.stop) {
    13f2:	d4 01       	movw	r26, r8
    13f4:	8c 91       	ld	r24, X
    13f6:	e1 e0       	ldi	r30, 0x01	; 1
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	90 81       	ld	r25, Z
    13fc:	89 17       	cp	r24, r25
    13fe:	38 f0       	brcs	.+14     	; 0x140e <main+0x136>
    1400:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <showDate+0x1>
    1404:	98 17       	cp	r25, r24
    1406:	18 f0       	brcs	.+6      	; 0x140e <main+0x136>
					tubeMode = tm_ShowDate;
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <tubeMode>
				}
			}
			
			if (dateTime.min % 10 == 0 && dateTime.sec < 3 && etching.lastMin != dateTime.min) {
    140e:	d4 01       	movw	r26, r8
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	2c 91       	ld	r18, X
    1414:	bd ec       	ldi	r27, 0xCD	; 205
    1416:	2b 9f       	mul	r18, r27
    1418:	81 2d       	mov	r24, r1
    141a:	11 24       	eor	r1, r1
    141c:	86 95       	lsr	r24
    141e:	86 95       	lsr	r24
    1420:	86 95       	lsr	r24
    1422:	88 0f       	add	r24, r24
    1424:	98 2f       	mov	r25, r24
    1426:	99 0f       	add	r25, r25
    1428:	99 0f       	add	r25, r25
    142a:	89 0f       	add	r24, r25
    142c:	28 13       	cpse	r18, r24
    142e:	31 c0       	rjmp	.+98     	; 0x1492 <main+0x1ba>
    1430:	f4 01       	movw	r30, r8
    1432:	80 81       	ld	r24, Z
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	68 f5       	brcc	.+90     	; 0x1492 <main+0x1ba>
    1438:	d2 01       	movw	r26, r4
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	8c 91       	ld	r24, X
    143e:	11 97       	sbiw	r26, 0x01	; 1
    1440:	82 17       	cp	r24, r18
    1442:	39 f1       	breq	.+78     	; 0x1492 <main+0x1ba>
				etching.lastMin = dateTime.min;
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	2c 93       	st	X, r18
    1448:	11 97       	sbiw	r26, 0x01	; 1
				etching.isWorking = true;
    144a:	e1 e0       	ldi	r30, 0x01	; 1
    144c:	ec 93       	st	X, r30
				etching.switchTime = millis();
    144e:	66 d6       	rcall	.+3276   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    1450:	d2 01       	movw	r26, r4
    1452:	15 96       	adiw	r26, 0x05	; 5
    1454:	2c 93       	st	X, r18
    1456:	15 97       	sbiw	r26, 0x05	; 5
    1458:	16 96       	adiw	r26, 0x06	; 6
    145a:	3c 93       	st	X, r19
    145c:	16 97       	sbiw	r26, 0x06	; 6
    145e:	17 96       	adiw	r26, 0x07	; 7
    1460:	4c 93       	st	X, r20
    1462:	17 97       	sbiw	r26, 0x07	; 7
    1464:	18 96       	adiw	r26, 0x08	; 8
    1466:	5c 93       	st	X, r21
    1468:	18 97       	sbiw	r26, 0x08	; 8
    146a:	19 96       	adiw	r26, 0x09	; 9
    146c:	6c 93       	st	X, r22
    146e:	19 97       	sbiw	r26, 0x09	; 9
    1470:	1a 96       	adiw	r26, 0x0a	; 10
    1472:	7c 93       	st	X, r23
    1474:	1a 97       	sbiw	r26, 0x0a	; 10
    1476:	1b 96       	adiw	r26, 0x0b	; 11
    1478:	8c 93       	st	X, r24
    147a:	1b 97       	sbiw	r26, 0x0b	; 11
    147c:	1c 96       	adiw	r26, 0x0c	; 12
    147e:	9c 93       	st	X, r25
    1480:	1c 97       	sbiw	r26, 0x0c	; 12
				etching.value = 0;
    1482:	12 96       	adiw	r26, 0x02	; 2
    1484:	1c 92       	st	X, r1
    1486:	12 97       	sbiw	r26, 0x02	; 2
			}
			if (etching.isWorking) {
    1488:	8c 91       	ld	r24, X
    148a:	88 23       	and	r24, r24
    148c:	09 f4       	brne	.+2      	; 0x1490 <main+0x1b8>
    148e:	84 c0       	rjmp	.+264    	; 0x1598 <main+0x2c0>
    1490:	0a c0       	rjmp	.+20     	; 0x14a6 <main+0x1ce>
    1492:	f2 01       	movw	r30, r4
    1494:	80 81       	ld	r24, Z
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <main+0x1c4>
    149a:	7e c0       	rjmp	.+252    	; 0x1598 <main+0x2c0>
				if (etching.value > 99) {
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	84 36       	cpi	r24, 0x64	; 100
    14a0:	10 f0       	brcs	.+4      	; 0x14a6 <main+0x1ce>
					etching.isWorking = false;
    14a2:	10 82       	st	Z, r1
    14a4:	79 c0       	rjmp	.+242    	; 0x1598 <main+0x2c0>
				} else { 
					if (millis() - etching.switchTime >= etching.duration) {
    14a6:	3a d6       	rcall	.+3188   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    14a8:	d2 01       	movw	r26, r4
    14aa:	15 96       	adiw	r26, 0x05	; 5
    14ac:	ac 90       	ld	r10, X
    14ae:	15 97       	sbiw	r26, 0x05	; 5
    14b0:	16 96       	adiw	r26, 0x06	; 6
    14b2:	bc 90       	ld	r11, X
    14b4:	16 97       	sbiw	r26, 0x06	; 6
    14b6:	17 96       	adiw	r26, 0x07	; 7
    14b8:	cc 90       	ld	r12, X
    14ba:	17 97       	sbiw	r26, 0x07	; 7
    14bc:	18 96       	adiw	r26, 0x08	; 8
    14be:	dc 90       	ld	r13, X
    14c0:	18 97       	sbiw	r26, 0x08	; 8
    14c2:	19 96       	adiw	r26, 0x09	; 9
    14c4:	ec 90       	ld	r14, X
    14c6:	19 97       	sbiw	r26, 0x09	; 9
    14c8:	1a 96       	adiw	r26, 0x0a	; 10
    14ca:	fc 90       	ld	r15, X
    14cc:	1a 97       	sbiw	r26, 0x0a	; 10
    14ce:	1b 96       	adiw	r26, 0x0b	; 11
    14d0:	0c 91       	ld	r16, X
    14d2:	1b 97       	sbiw	r26, 0x0b	; 11
    14d4:	1c 96       	adiw	r26, 0x0c	; 12
    14d6:	1c 91       	ld	r17, X
    14d8:	1c 97       	sbiw	r26, 0x0c	; 12
    14da:	28 d1       	rcall	.+592    	; 0x172c <__subdi3>
    14dc:	13 96       	adiw	r26, 0x03	; 3
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	14 97       	sbiw	r26, 0x04	; 4
    14e4:	5f 01       	movw	r10, r30
    14e6:	c1 2c       	mov	r12, r1
    14e8:	d1 2c       	mov	r13, r1
    14ea:	e1 2c       	mov	r14, r1
    14ec:	f1 2c       	mov	r15, r1
    14ee:	87 01       	movw	r16, r14
    14f0:	e9 83       	std	Y+1, r30	; 0x01
    14f2:	ba 82       	std	Y+2, r11	; 0x02
    14f4:	cb 82       	std	Y+3, r12	; 0x03
    14f6:	dc 82       	std	Y+4, r13	; 0x04
    14f8:	ed 82       	std	Y+5, r14	; 0x05
    14fa:	fe 82       	std	Y+6, r15	; 0x06
    14fc:	0f 83       	std	Y+7, r16	; 0x07
    14fe:	18 87       	std	Y+8, r17	; 0x08
    1500:	c1 2c       	mov	r12, r1
    1502:	d1 2c       	mov	r13, r1
    1504:	e1 2c       	mov	r14, r1
    1506:	f1 2c       	mov	r15, r1
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	18 d1       	rcall	.+560    	; 0x173e <__cmpdi2>
    150e:	f8 f0       	brcs	.+62     	; 0x154e <main+0x276>
						etching.value+=11;
    1510:	12 96       	adiw	r26, 0x02	; 2
    1512:	8c 91       	ld	r24, X
    1514:	12 97       	sbiw	r26, 0x02	; 2
    1516:	85 5f       	subi	r24, 0xF5	; 245
    1518:	12 96       	adiw	r26, 0x02	; 2
    151a:	8c 93       	st	X, r24
						etching.switchTime = millis();
    151c:	ff d5       	rcall	.+3070   	; 0x211c <__TEXT_REGION_LENGTH__+0x11c>
    151e:	d2 01       	movw	r26, r4
    1520:	15 96       	adiw	r26, 0x05	; 5
    1522:	2c 93       	st	X, r18
    1524:	15 97       	sbiw	r26, 0x05	; 5
    1526:	16 96       	adiw	r26, 0x06	; 6
    1528:	3c 93       	st	X, r19
    152a:	16 97       	sbiw	r26, 0x06	; 6
    152c:	17 96       	adiw	r26, 0x07	; 7
    152e:	4c 93       	st	X, r20
    1530:	17 97       	sbiw	r26, 0x07	; 7
    1532:	18 96       	adiw	r26, 0x08	; 8
    1534:	5c 93       	st	X, r21
    1536:	18 97       	sbiw	r26, 0x08	; 8
    1538:	19 96       	adiw	r26, 0x09	; 9
    153a:	6c 93       	st	X, r22
    153c:	19 97       	sbiw	r26, 0x09	; 9
    153e:	1a 96       	adiw	r26, 0x0a	; 10
    1540:	7c 93       	st	X, r23
    1542:	1a 97       	sbiw	r26, 0x0a	; 10
    1544:	1b 96       	adiw	r26, 0x0b	; 11
    1546:	8c 93       	st	X, r24
    1548:	1b 97       	sbiw	r26, 0x0b	; 11
    154a:	1c 96       	adiw	r26, 0x0c	; 12
    154c:	9c 93       	st	X, r25
					}
					tubeMode = tm_Etching;
    154e:	bf ef       	ldi	r27, 0xFF	; 255
    1550:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <tubeMode>
    1554:	21 c0       	rjmp	.+66     	; 0x1598 <main+0x2c0>
				}
			}
		} else {
			if (prevSec != dateTime.sec) {
    1556:	f4 01       	movw	r30, r8
    1558:	80 81       	ld	r24, Z
    155a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
    155e:	89 17       	cp	r24, r25
    1560:	a9 f0       	breq	.+42     	; 0x158c <main+0x2b4>
				prevSec = dateTime.sec;
    1562:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				if (returnTime == 0) {
    1566:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <returnTime>
    156a:	81 11       	cpse	r24, r1
    156c:	0c c0       	rjmp	.+24     	; 0x1586 <main+0x2ae>
					modeWork = mw_Clock;
    156e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <modeWork>
    1572:	e8 e9       	ldi	r30, 0x98	; 152
    1574:	f0 e0       	ldi	r31, 0x00	; 0
					for (uint8_t i = 0; i < 6; i++) {
						tube.isFlash[i] = false;
    1576:	11 92       	st	Z+, r1
						tube.isDisabled[i] = false;
    1578:	15 82       	std	Z+5, r1	; 0x05
						tube.isDoteActive[i] = false;
    157a:	13 86       	std	Z+11, r1	; 0x0b
		} else {
			if (prevSec != dateTime.sec) {
				prevSec = dateTime.sec;
				if (returnTime == 0) {
					modeWork = mw_Clock;
					for (uint8_t i = 0; i < 6; i++) {
    157c:	e6 15       	cp	r30, r6
    157e:	f7 05       	cpc	r31, r7
    1580:	d1 f7       	brne	.-12     	; 0x1576 <main+0x29e>
						tube.isFlash[i] = false;
						tube.isDisabled[i] = false;
						tube.isDoteActive[i] = false;
					}
					resetButtons();
    1582:	a3 d6       	rcall	.+3398   	; 0x22ca <__TEXT_REGION_LENGTH__+0x2ca>
    1584:	03 c0       	rjmp	.+6      	; 0x158c <main+0x2b4>
				} else {
					returnTime--;
    1586:	81 50       	subi	r24, 0x01	; 1
    1588:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <returnTime>
				}
			}
			if (!editValue.isGrabbed) {
    158c:	a2 e8       	ldi	r26, 0x82	; 130
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	8c 91       	ld	r24, X
    1592:	81 11       	cpse	r24, r1
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <main+0x2c0>
				assignEditDigit();
    1596:	3d d7       	rcall	.+3706   	; 0x2412 <__TEXT_REGION_LENGTH__+0x412>
			}
		}
		

		if (!alarm.isTurnedOff) {
    1598:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <alarm+0x1>
    159c:	81 11       	cpse	r24, r1
    159e:	16 c0       	rjmp	.+44     	; 0x15cc <main+0x2f4>
			if (alarm.beeper.canBeep && alarm.isActive) {
    15a0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <alarm+0x6>
    15a4:	88 23       	and	r24, r24
    15a6:	49 f0       	breq	.+18     	; 0x15ba <main+0x2e2>
    15a8:	e3 ed       	ldi	r30, 0xD3	; 211
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	88 23       	and	r24, r24
    15b0:	21 f0       	breq	.+8      	; 0x15ba <main+0x2e2>
				ledBlinking.isCanInit = true;
    15b2:	e1 e0       	ldi	r30, 0x01	; 1
    15b4:	a6 e6       	ldi	r26, 0x66	; 102
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	ec 93       	st	X, r30
			}
			if (!hourBeep.beeper.canBeep) {
    15ba:	d1 01       	movw	r26, r2
    15bc:	14 96       	adiw	r26, 0x04	; 4
    15be:	8c 91       	ld	r24, X
    15c0:	81 11       	cpse	r24, r1
    15c2:	0c c0       	rjmp	.+24     	; 0x15dc <main+0x304>
				beepController(&alarm.beeper);
    15c4:	88 ed       	ldi	r24, 0xD8	; 216
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	2c dd       	rcall	.-1448   	; 0x1022 <_Z14beepControllerP6Beeper>
    15ca:	08 c0       	rjmp	.+16     	; 0x15dc <main+0x304>
			}
		} else {
			alarm.beeper.canBeep = false;
    15cc:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <alarm+0x6>
		}
		if (!nightMode.isActive && !alarm.beeper.canBeep) {
    15d0:	e6 e8       	ldi	r30, 0x86	; 134
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	81 11       	cpse	r24, r1
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <main+0x31c>
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <main+0x316>
    15dc:	a6 e8       	ldi	r26, 0x86	; 134
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	8c 91       	ld	r24, X
    15e2:	81 11       	cpse	r24, r1
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <main+0x31c>
    15e6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <alarm+0x6>
    15ea:	81 11       	cpse	r24, r1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <main+0x31c>
			beepController(&hourBeep.beeper);
    15ee:	8e ee       	ldi	r24, 0xEE	; 238
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	17 dd       	rcall	.-1490   	; 0x1022 <_Z14beepControllerP6Beeper>
		}
		tubeAsMode();
    15f4:	fb d7       	rcall	.+4086   	; 0x25ec <__TEXT_REGION_LENGTH__+0x5ec>
	initMillis();
}

int main(void) {
	init();
	while (true) {
    15f6:	93 ce       	rjmp	.-730    	; 0x131e <main+0x46>
					hourBeep.lastHour = dateTime.hour;
					hourBeep.beeper.canBeep = true;
					hourBeep.beeper.isCanInit = true;
				} 
			}
			tube.isDoteActive[4] = alarm.isActive;
    15f8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <tube+0x10>
			tube.isDoteActive[5] = hourBeep.isActive;
    15fc:	b1 e0       	ldi	r27, 0x01	; 1
    15fe:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <tube+0x11>
			
			tubeMode = tm_ShowTime;
    1602:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <tubeMode>
			if (showDate.isActive) {
    1606:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <showDate+0x2>
    160a:	81 11       	cpse	r24, r1
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <main+0x33e>
    160e:	10 cf       	rjmp	.-480    	; 0x1430 <main+0x158>
				if (dateTime.sec >= showDate.start && dateTime.sec <= showDate.stop) {
					tubeMode = tm_ShowDate;
				}
			}
			
			if (dateTime.min % 10 == 0 && dateTime.sec < 3 && etching.lastMin != dateTime.min) {
    1610:	f4 01       	movw	r30, r8
    1612:	21 81       	ldd	r18, Z+1	; 0x01
    1614:	0d cf       	rjmp	.-486    	; 0x1430 <main+0x158>
			tube.isDoteActive[4] = alarm.isActive;
			tube.isDoteActive[5] = hourBeep.isActive;
			
			tubeMode = tm_ShowTime;
			if (showDate.isActive) {
				if (dateTime.sec >= showDate.start && dateTime.sec <= showDate.stop) {
    1616:	d4 01       	movw	r26, r8
    1618:	8c 91       	ld	r24, X
    161a:	e1 e0       	ldi	r30, 0x01	; 1
    161c:	f1 e0       	ldi	r31, 0x01	; 1
    161e:	90 81       	ld	r25, Z
    1620:	89 17       	cp	r24, r25
    1622:	08 f0       	brcs	.+2      	; 0x1626 <main+0x34e>
    1624:	ed ce       	rjmp	.-550    	; 0x1400 <main+0x128>
    1626:	f4 cf       	rjmp	.-24     	; 0x1610 <main+0x338>

00001628 <_Z8i2c_initv>:
#include <compat/twi.h>

//#define SCL_CLOCK  ((F_CPU / 10000L)-16) / 2

void i2c_init(void) {
  TWSR = 0;                        
    1628:	11 b8       	out	0x01, r1	; 1
  TWBR = 392; 
    162a:	88 e8       	ldi	r24, 0x88	; 136
    162c:	80 b9       	out	0x00, r24	; 0
    162e:	08 95       	ret

00001630 <_Z9i2c_starth>:
}

unsigned char i2c_start(unsigned char address) {
    uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1630:	94 ea       	ldi	r25, 0xA4	; 164
    1632:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)));
    1634:	06 b6       	in	r0, 0x36	; 54
    1636:	07 fe       	sbrs	r0, 7
    1638:	fd cf       	rjmp	.-6      	; 0x1634 <_Z9i2c_starth+0x4>
	twst = TW_STATUS & 0xF8;
    163a:	91 b1       	in	r25, 0x01	; 1
    163c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    163e:	98 30       	cpi	r25, 0x08	; 8
    1640:	11 f0       	breq	.+4      	; 0x1646 <_Z9i2c_starth+0x16>
    1642:	90 31       	cpi	r25, 0x10	; 16
    1644:	79 f4       	brne	.+30     	; 0x1664 <_Z9i2c_starth+0x34>
	TWDR = address;
    1646:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1648:	84 e8       	ldi	r24, 0x84	; 132
    164a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
    164c:	06 b6       	in	r0, 0x36	; 54
    164e:	07 fe       	sbrs	r0, 7
    1650:	fd cf       	rjmp	.-6      	; 0x164c <_Z9i2c_starth+0x1c>
	twst = TW_STATUS & 0xF8;
    1652:	91 b1       	in	r25, 0x01	; 1
    1654:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1656:	98 31       	cpi	r25, 0x18	; 24
    1658:	39 f0       	breq	.+14     	; 0x1668 <_Z9i2c_starth+0x38>
unsigned char i2c_start(unsigned char address) {
    uint8_t   twst;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 34       	cpi	r25, 0x40	; 64
    165e:	29 f4       	brne	.+10     	; 0x166a <_Z9i2c_starth+0x3a>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	08 95       	ret
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	08 95       	ret
	TWDR = address;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	return 0;
    1668:	80 e0       	ldi	r24, 0x00	; 0
}
    166a:	08 95       	ret

0000166c <_Z14i2c_start_waith>:

void i2c_start_wait(unsigned char address) {
    uint8_t   twst;
	while ( 1 ) {
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    166c:	24 ea       	ldi	r18, 0xA4	; 164
    	while(!(TWCR & (1<<TWINT)));
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    166e:	34 e8       	ldi	r19, 0x84	; 132
    	while(!(TWCR & (1<<TWINT)));
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) {    	    
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1670:	44 e9       	ldi	r20, 0x94	; 148
}

void i2c_start_wait(unsigned char address) {
    uint8_t   twst;
	while ( 1 ) {
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1672:	26 bf       	out	0x36, r18	; 54
    	while(!(TWCR & (1<<TWINT)));
    1674:	06 b6       	in	r0, 0x36	; 54
    1676:	07 fe       	sbrs	r0, 7
    1678:	fd cf       	rjmp	.-6      	; 0x1674 <_Z14i2c_start_waith+0x8>
    	twst = TW_STATUS & 0xF8;
    167a:	91 b1       	in	r25, 0x01	; 1
    167c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    167e:	98 30       	cpi	r25, 0x08	; 8
    1680:	11 f0       	breq	.+4      	; 0x1686 <_Z14i2c_start_waith+0x1a>
    1682:	90 31       	cpi	r25, 0x10	; 16
    1684:	b1 f7       	brne	.-20     	; 0x1672 <_Z14i2c_start_waith+0x6>
    	TWDR = address;
    1686:	83 b9       	out	0x03, r24	; 3
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1688:	36 bf       	out	0x36, r19	; 54
    	while(!(TWCR & (1<<TWINT)));
    168a:	06 b6       	in	r0, 0x36	; 54
    168c:	07 fe       	sbrs	r0, 7
    168e:	fd cf       	rjmp	.-6      	; 0x168a <_Z14i2c_start_waith+0x1e>
    	twst = TW_STATUS & 0xF8;
    1690:	91 b1       	in	r25, 0x01	; 1
    1692:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) {    	    
    1694:	90 32       	cpi	r25, 0x20	; 32
    1696:	11 f0       	breq	.+4      	; 0x169c <_Z14i2c_start_waith+0x30>
    1698:	98 35       	cpi	r25, 0x58	; 88
    169a:	29 f4       	brne	.+10     	; 0x16a6 <_Z14i2c_start_waith+0x3a>
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    169c:	46 bf       	out	0x36, r20	; 54
	        while(TWCR & (1<<TWSTO));
    169e:	06 b6       	in	r0, 0x36	; 54
    16a0:	04 fc       	sbrc	r0, 4
    16a2:	fd cf       	rjmp	.-6      	; 0x169e <_Z14i2c_start_waith+0x32>
    16a4:	e6 cf       	rjmp	.-52     	; 0x1672 <_Z14i2c_start_waith+0x6>
    16a6:	08 95       	ret

000016a8 <_Z13i2c_rep_starth>:
    	break;
     }
}

unsigned char i2c_rep_start(unsigned char address) {
    return i2c_start( address );
    16a8:	c3 df       	rcall	.-122    	; 0x1630 <_Z9i2c_starth>
}
    16aa:	08 95       	ret

000016ac <_Z8i2c_stopv>:

void i2c_stop(void) {
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    16ac:	84 e9       	ldi	r24, 0x94	; 148
    16ae:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));
    16b0:	06 b6       	in	r0, 0x36	; 54
    16b2:	04 fc       	sbrc	r0, 4
    16b4:	fd cf       	rjmp	.-6      	; 0x16b0 <_Z8i2c_stopv+0x4>
}
    16b6:	08 95       	ret

000016b8 <_Z9i2c_writeh>:

unsigned char i2c_write( unsigned char data ) {	
    uint8_t   twst;
	TWDR = data;
    16b8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    16ba:	84 e8       	ldi	r24, 0x84	; 132
    16bc:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
    16be:	06 b6       	in	r0, 0x36	; 54
    16c0:	07 fe       	sbrs	r0, 7
    16c2:	fd cf       	rjmp	.-6      	; 0x16be <_Z9i2c_writeh+0x6>
	twst = TW_STATUS & 0xF8;
    16c4:	91 b1       	in	r25, 0x01	; 1
    16c6:	98 7f       	andi	r25, 0xF8	; 248
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	98 32       	cpi	r25, 0x28	; 40
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <_Z9i2c_writeh+0x18>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
    16d0:	08 95       	ret

000016d2 <_Z11i2c_readAckv>:

unsigned char i2c_readAck(void) {
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    16d2:	84 ec       	ldi	r24, 0xC4	; 196
    16d4:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
    16d6:	06 b6       	in	r0, 0x36	; 54
    16d8:	07 fe       	sbrs	r0, 7
    16da:	fd cf       	rjmp	.-6      	; 0x16d6 <_Z11i2c_readAckv+0x4>
    return TWDR;
    16dc:	83 b1       	in	r24, 0x03	; 3
}
    16de:	08 95       	ret

000016e0 <_Z11i2c_readNakv>:
unsigned char i2c_readNak(void) {
	TWCR = (1<<TWINT) | (1<<TWEN);
    16e0:	84 e8       	ldi	r24, 0x84	; 132
    16e2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
    16e4:	06 b6       	in	r0, 0x36	; 54
    16e6:	07 fe       	sbrs	r0, 7
    16e8:	fd cf       	rjmp	.-6      	; 0x16e4 <_Z11i2c_readNakv+0x4>
    return TWDR;
    16ea:	83 b1       	in	r24, 0x03	; 3
    16ec:	08 95       	ret

000016ee <__divmodhi4>:
    16ee:	97 fb       	bst	r25, 7
    16f0:	07 2e       	mov	r0, r23
    16f2:	16 f4       	brtc	.+4      	; 0x16f8 <__divmodhi4+0xa>
    16f4:	00 94       	com	r0
    16f6:	06 d0       	rcall	.+12     	; 0x1704 <__divmodhi4_neg1>
    16f8:	77 fd       	sbrc	r23, 7
    16fa:	08 d0       	rcall	.+16     	; 0x170c <__divmodhi4_neg2>
    16fc:	35 d0       	rcall	.+106    	; 0x1768 <__udivmodhi4>
    16fe:	07 fc       	sbrc	r0, 7
    1700:	05 d0       	rcall	.+10     	; 0x170c <__divmodhi4_neg2>
    1702:	3e f4       	brtc	.+14     	; 0x1712 <__divmodhi4_exit>

00001704 <__divmodhi4_neg1>:
    1704:	90 95       	com	r25
    1706:	81 95       	neg	r24
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	08 95       	ret

0000170c <__divmodhi4_neg2>:
    170c:	70 95       	com	r23
    170e:	61 95       	neg	r22
    1710:	7f 4f       	sbci	r23, 0xFF	; 255

00001712 <__divmodhi4_exit>:
    1712:	08 95       	ret

00001714 <__adddi3_s8>:
    1714:	00 24       	eor	r0, r0
    1716:	a7 fd       	sbrc	r26, 7
    1718:	00 94       	com	r0
    171a:	2a 0f       	add	r18, r26
    171c:	30 1d       	adc	r19, r0
    171e:	40 1d       	adc	r20, r0
    1720:	50 1d       	adc	r21, r0
    1722:	60 1d       	adc	r22, r0
    1724:	70 1d       	adc	r23, r0
    1726:	80 1d       	adc	r24, r0
    1728:	90 1d       	adc	r25, r0
    172a:	08 95       	ret

0000172c <__subdi3>:
    172c:	2a 19       	sub	r18, r10
    172e:	3b 09       	sbc	r19, r11
    1730:	4c 09       	sbc	r20, r12
    1732:	5d 09       	sbc	r21, r13
    1734:	6e 09       	sbc	r22, r14
    1736:	7f 09       	sbc	r23, r15
    1738:	80 0b       	sbc	r24, r16
    173a:	91 0b       	sbc	r25, r17
    173c:	08 95       	ret

0000173e <__cmpdi2>:
    173e:	2a 15       	cp	r18, r10
    1740:	3b 05       	cpc	r19, r11
    1742:	4c 05       	cpc	r20, r12
    1744:	5d 05       	cpc	r21, r13
    1746:	6e 05       	cpc	r22, r14
    1748:	7f 05       	cpc	r23, r15
    174a:	80 07       	cpc	r24, r16
    174c:	91 07       	cpc	r25, r17
    174e:	08 95       	ret

00001750 <__cmpdi2_s8>:
    1750:	00 24       	eor	r0, r0
    1752:	a7 fd       	sbrc	r26, 7
    1754:	00 94       	com	r0
    1756:	2a 17       	cp	r18, r26
    1758:	30 05       	cpc	r19, r0
    175a:	40 05       	cpc	r20, r0
    175c:	50 05       	cpc	r21, r0
    175e:	60 05       	cpc	r22, r0
    1760:	70 05       	cpc	r23, r0
    1762:	80 05       	cpc	r24, r0
    1764:	90 05       	cpc	r25, r0
    1766:	08 95       	ret

00001768 <__udivmodhi4>:
    1768:	aa 1b       	sub	r26, r26
    176a:	bb 1b       	sub	r27, r27
    176c:	51 e1       	ldi	r21, 0x11	; 17
    176e:	07 c0       	rjmp	.+14     	; 0x177e <__udivmodhi4_ep>

00001770 <__udivmodhi4_loop>:
    1770:	aa 1f       	adc	r26, r26
    1772:	bb 1f       	adc	r27, r27
    1774:	a6 17       	cp	r26, r22
    1776:	b7 07       	cpc	r27, r23
    1778:	10 f0       	brcs	.+4      	; 0x177e <__udivmodhi4_ep>
    177a:	a6 1b       	sub	r26, r22
    177c:	b7 0b       	sbc	r27, r23

0000177e <__udivmodhi4_ep>:
    177e:	88 1f       	adc	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	5a 95       	dec	r21
    1784:	a9 f7       	brne	.-22     	; 0x1770 <__udivmodhi4_loop>
    1786:	80 95       	com	r24
    1788:	90 95       	com	r25
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	08 95       	ret

00001790 <eeprom_read_byte>:
    1790:	e1 99       	sbic	0x1c, 1	; 28
    1792:	fe cf       	rjmp	.-4      	; 0x1790 <eeprom_read_byte>
    1794:	9f bb       	out	0x1f, r25	; 31
    1796:	8e bb       	out	0x1e, r24	; 30
    1798:	e0 9a       	sbi	0x1c, 0	; 28
    179a:	99 27       	eor	r25, r25
    179c:	8d b3       	in	r24, 0x1d	; 29
    179e:	08 95       	ret

000017a0 <eeprom_update_byte>:
    17a0:	26 2f       	mov	r18, r22

000017a2 <eeprom_update_r18>:
    17a2:	e1 99       	sbic	0x1c, 1	; 28
    17a4:	fe cf       	rjmp	.-4      	; 0x17a2 <eeprom_update_r18>
    17a6:	9f bb       	out	0x1f, r25	; 31
    17a8:	8e bb       	out	0x1e, r24	; 30
    17aa:	e0 9a       	sbi	0x1c, 0	; 28
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	0d b2       	in	r0, 0x1d	; 29
    17b0:	02 16       	cp	r0, r18
    17b2:	31 f0       	breq	.+12     	; 0x17c0 <eeprom_update_r18+0x1e>
    17b4:	2d bb       	out	0x1d, r18	; 29
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	e2 9a       	sbi	0x1c, 2	; 28
    17bc:	e1 9a       	sbi	0x1c, 1	; 28
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	08 95       	ret

000017c2 <_exit>:
    17c2:	f8 94       	cli

000017c4 <__stop_program>:
    17c4:	ff cf       	rjmp	.-2      	; 0x17c4 <__stop_program>
